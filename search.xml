<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>vue-cli 构建 vue 项目详解</title>
      <link href="/vue-cli-init-project-intro/"/>
      <url>/vue-cli-init-project-intro/</url>
      
        <content type="html"><![CDATA[<!-- ## vue-cli 构建 vue 项目详解 --><p>构建一个 <code>vue</code> 项目最简单的方式就是使用脚手架工具 <code>vue-cli</code> 。前端的三大框架都有自己的脚手架工具，其作用就是用配置好的模板迅速搭建起一个项目工程来，省去自己配置 <code>webpack</code> 配置文件的基本内容，大大降低了初学者构建项目的难度。这节我们看看如何使用 <code>vue-cli</code> 构建 <code>vue</code> 项目以及对构建项目的具体分析。</p><h3 id="一、环境搭建"><a href="#一、环境搭建" class="headerlink" title="一、环境搭建"></a>一、环境搭建</h3><p><code>node</code> 和 <code>npm</code> 是必不可少的，这里不再介绍。</p><h4 id="1、安装-vue-cli"><a href="#1、安装-vue-cli" class="headerlink" title="1、安装 vue-cli"></a>1、安装 vue-cli</h4><pre class=" language-shell"><code class="language-shell">$ npm install -g vue-cli</code></pre><p>检查是否安装成功：</p><pre class=" language-shell"><code class="language-shell">$ vue --version3.3.0</code></pre><a id="more"></a><h4 id="2、构建项目"><a href="#2、构建项目" class="headerlink" title="2、构建项目"></a>2、构建项目</h4><pre class=" language-shell"><code class="language-shell">$ vue init webpack hello-vue</code></pre><p>初始化的过程中，会有一个交互式的选项让你选择项目的一些配置，根据项目需求选择即可。为了方便后面几篇教程的演示，可以统一选择以下选项：</p><pre class=" language-shell"><code class="language-shell">? Project name hello-vue # 项目名称? Project description A Vue.js project # 项目描述? Author Deepspace <cxin1427@gmail.com> # 作者? Vue build standalone # 运行+编译时? Install vue-router? Yes # 安装 vue-router? Use ESLint to lint your code? Yes # 使用 ESLint 作为代码规范? Pick an ESLint preset Airbnb # 选择 Airbnb 的代码规范? Set up unit tests Yes # 安装单元测试? Pick a test runner karma # 测试模块? Setup e2e tests with Nightwatch? Yes # 安装 e2e 测试? Should we run `npm install` for you after the project has been created? (recommended) npm # 包管理器，npm</code></pre><p>构建完成之后，会提示构建成功信息：</p><pre class=" language-shell"><code class="language-shell"># Project initialization finished!# ========================To get started:  cd hello-vue  npm run devDocumentation can be found at https://vuejs-templates.github.io/webpack</code></pre><h4 id="3、启动项目"><a href="#3、启动项目" class="headerlink" title="3、启动项目"></a>3、启动项目</h4><pre class=" language-shell"><code class="language-shell">$ cd hello-vue$ npm run dev</code></pre><p>项目默认会在 8080 端口启动，如果端口有占用，会自动调整端口。打开浏览器输入：<code>http://localhost:8080</code>，会看到构建的项目的主页：</p><p><img src="../../ImageHosting/Vue/vue-init-project.png" alt="vue-init-project"></p><h4 id="4、目录结构"><a href="#4、目录结构" class="headerlink" title="4、目录结构"></a>4、目录结构</h4><p>使用编辑器打开(推荐使用 <code>VSCode</code>)，下面具体看看目录结构：</p><p><strong><code>package.json</code> :</strong></p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"dev"</span><span class="token operator">:</span> <span class="token string">"webpack-dev-server --inline --progress --config build/webpack.dev.conf.js"</span><span class="token punctuation">,</span>        <span class="token property">"start"</span><span class="token operator">:</span> <span class="token string">"npm run dev"</span><span class="token punctuation">,</span>        <span class="token property">"unit"</span><span class="token operator">:</span> <span class="token string">"cross-env BABEL_ENV=test karma start test/unit/karma.conf.js --single-run"</span><span class="token punctuation">,</span>        <span class="token property">"e2e"</span><span class="token operator">:</span> <span class="token string">"node test/e2e/runner.js"</span><span class="token punctuation">,</span>        <span class="token property">"test"</span><span class="token operator">:</span> <span class="token string">"npm run unit &amp;&amp; npm run e2e"</span><span class="token punctuation">,</span>        <span class="token property">"lint"</span><span class="token operator">:</span> <span class="token string">"eslint --ext .js,.vue src test/unit test/e2e/specs"</span><span class="token punctuation">,</span>        <span class="token property">"build"</span><span class="token operator">:</span> <span class="token string">"node build/build.js"</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>在 <code>package.json</code> 中，根据我们在构建项目的时候的选项，有以下几个命令。</p><ul><li><code>npm run dev</code> ：项目开发阶段，项目启动的命令；</li><li><code>npm run lint</code> ：使用 <code>eslint</code> 检查代码格式；</li><li><code>npm run test</code>：单元测试和 <code>e2e</code> 测试；</li><li><code>npm run e2e</code> : <code>e2e</code> 测试；</li><li><code>npm run build</code>：开发完成后执行，会把我们的源代码编译成最终的发布代码，生成在项目根目录中的 <code>dist</code> 文件夹下（初始化项目时不会生成）。</li></ul><p><strong><code>config</code>：</strong> 保存一些项目初始化配置。</p><p><strong><code>build</code> ：</strong>里面保存一些 <code>webpack</code> 的初始化配置。</p><p><strong><code>index.html</code> :  </strong>是我们的首页。<code>index</code> 很多时候都被预设为首页，像 <code>index.htm</code>，<code>index.php</code> 等。</p><p><strong><code>src</code> : </strong> 保存项目源代码的地方，我们下面会详细分析该文件夹里的文件。</p><h3 id="二、代码分析"><a href="#二、代码分析" class="headerlink" title="二、代码分析"></a>二、代码分析</h3><p><code>Vue</code> 的核心架构分为两个部分：<strong>路由和组件</strong>，其实 <code>React</code> 也是一样的。我们在切入一个项目的时候，都是从这两个点出发。下面我们具体看看 <code>src</code> 文件夹。</p><h4 id="1、入口文件"><a href="#1、入口文件" class="headerlink" title="1、入口文件"></a>1、入口文件</h4><p>如果我们打开项目根目录下 <code>build</code> 目录中的 <code>webpack.base.conf.js</code>，会看到这样的代码(第22行)：</p><pre class=" language-javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  context<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'../'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  entry<span class="token punctuation">:</span> <span class="token punctuation">{</span>    app<span class="token punctuation">:</span> <span class="token string">'./src/main.js'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span>    </code></pre><p>说明我们的入口文件就是 <code>src</code> 目录下的 <code>main.js</code> 文件。看看代码：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// The Vue build version to load with the `import` command</span><span class="token comment" spellcheck="true">// (runtime-only or standalone) has been set in webpack.base.conf with an alias.</span><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App'</span><span class="token punctuation">;</span><span class="token keyword">import</span> router <span class="token keyword">from</span> <span class="token string">'./router'</span><span class="token punctuation">;</span>Vue<span class="token punctuation">.</span>config<span class="token punctuation">.</span>productionTip <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* eslint-disable no-new */</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>  router<span class="token punctuation">,</span>  components<span class="token punctuation">:</span> <span class="token punctuation">{</span> App <span class="token punctuation">}</span><span class="token punctuation">,</span>  template<span class="token punctuation">:</span> <span class="token string">'&lt;App/>'</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>看看这里面做了什么事情：</p><ul><li>引入 <code>vue</code> 并起名叫作 <code>Vue</code></li><li>引入 根目录下的 <code>App.vue</code> 文件(后缀名可不要)</li><li>引入 <code>router</code> 文件下的 <code>index.js</code> 文件(文件夹后没有具体的文件，默认引入的就是 <code>index.js</code> 文件)</li><li>通过 <code>new</code> 实例化 <code>Vue</code> 实例 ，实例化的时候声明了几个属性：<ul><li><code>el：&#39;#app&#39;</code>：意思是将所有视图放在 <code>id</code> 值为 <code>app</code> 这个 <code>dom</code> 元素中，也就是项目根目录下的 <code>index.html</code> 中的那个 <code>div</code> : <code>&lt;div id=&quot;app&quot;&gt;&lt;/div&gt;</code>；</li><li><code>components: { App }</code>：意思是将上面引入的 <code>App.vue</code> 文件的内容将以 <code>&lt;App/&gt;</code> 这样的标签写进 <code>&lt;div id=&quot;app&quot;&gt;&lt;/div&gt;</code> 中；</li></ul></li></ul><h4 id="2、App-vue"><a href="#2、App-vue" class="headerlink" title="2、App.vue"></a>2、App.vue</h4><p>通过入口文件中做的事情，我们其实已经知道 <code>App.vue</code> 的作用了：<strong>单页面应用的主组件</strong>。所有页面都是在 <code>App.vue</code> 下通过路由进行切换的。所以，我们可以理解为所有的路由（<code>route</code>）也是 <code>App.vue</code> 的子组件。我们看看代码：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"./assets/logo.png"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>router<span class="token operator">-</span>view<span class="token operator">/</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">'App'</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>style<span class="token operator">></span>#app <span class="token punctuation">{</span>  font<span class="token operator">-</span>family<span class="token punctuation">:</span> <span class="token string">'Avenir'</span><span class="token punctuation">,</span> Helvetica<span class="token punctuation">,</span> Arial<span class="token punctuation">,</span> sans<span class="token operator">-</span>serif<span class="token punctuation">;</span>  <span class="token operator">-</span>webkit<span class="token operator">-</span>font<span class="token operator">-</span>smoothing<span class="token punctuation">:</span> antialiased<span class="token punctuation">;</span>  <span class="token operator">-</span>moz<span class="token operator">-</span>osx<span class="token operator">-</span>font<span class="token operator">-</span>smoothing<span class="token punctuation">:</span> grayscale<span class="token punctuation">;</span>  text<span class="token operator">-</span>align<span class="token punctuation">:</span> center<span class="token punctuation">;</span>  color<span class="token punctuation">:</span> #2c3e50<span class="token punctuation">;</span>  margin<span class="token operator">-</span>top<span class="token punctuation">:</span> 60px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span></code></pre><blockquote><p>这里需要提一下：<code>node</code> 之所以可以识别出 <code>*·vue</code> 格式的文件，是因为 <code>webpack</code> 在编译时将 <code>*.vue</code> 文件中的 <code>html</code> 、<code>js</code> 、<code>css</code> 都抽出来形成新的单独文件。可通过 <code>npm run build</code> 命令编译源代码，查看 <code>dist</code> 文件下的文件来验证。</p></blockquote><p><code>App.vue</code> 的内容分为三个部分：<code>&lt;template&gt;...&lt;/template&gt;</code>、<code>&lt;script&gt;...&lt;/script&gt;</code>、<code>&lt;style&gt;...&lt;/style&gt;</code> ，分别在这三类标签里面写入<strong>结构、脚本、样式</strong>。</p><p>我们先从 <code>&lt;template&gt;</code> 看起：里面一个 <code>div</code> 包裹着 <code>img</code> 标签和 <code>router-view</code> 标签。前面提到过： <strong><code>App.vue</code> 是单页面应用的主组件</strong>。对照着前面在浏览器中打开的应用主页面，<code>img</code> 标签就是页面上方的 <code>Vue</code> 的 <code>logo</code>。那下面的内容去哪了呢？和 <code>&lt;router-view/&gt;</code> 有关系吗？这就要去看路由了。</p><h4 id="3、router-index-js"><a href="#3、router-index-js" class="headerlink" title="3、router/index.js"></a>3、router/index.js</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span><span class="token keyword">import</span> Router <span class="token keyword">from</span> <span class="token string">'vue-router'</span><span class="token punctuation">;</span><span class="token keyword">import</span> HelloWorld <span class="token keyword">from</span> <span class="token string">'@/components/HelloWorld'</span><span class="token punctuation">;</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Router<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  routes<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      path<span class="token punctuation">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span>      name<span class="token punctuation">:</span> <span class="token string">'HelloWorld'</span><span class="token punctuation">,</span>      component<span class="token punctuation">:</span> HelloWorld<span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>前面先引入了路由插件 <code>vue-router</code>，然后显式声明要用路由 <code>Vue.use(Router)</code> 。路由的配置非常地明了：给不同 <code>path</code> 分配不同的组件（或者页面），参数 <code>name</code> 只是用来识别。</p><p>当我访问根路由 <code>http://localhost:8080/#/</code> 时，<code>App.vue</code> 中的 <code>&lt;router-view/&gt;</code> 就会把引入的 <code>HelloWorld</code> 组件分配给我，放在了 <code>img</code> 标签的下面，打开 <code>components</code> 目录下的 <code>HelloWorld.vue</code> 就可以看到具体内容了。</p><blockquote><p>我们在看到浏览器中的 <code>url</code>  的时候会觉得奇怪，为什么在后面加了一个 <code>#</code> 号呢？这是因为 <code>vue-router</code> 默认 <code>hash</code> 模式 —— 使用 <code>URL</code> 的 <code>hash</code> 来模拟一个完整的 <code>URL</code>，当 URL 改变时，页面不会重新加载。详见：<a href="https://router.vuejs.org/zh/guide/essentials/history-mode.html" target="_blank" rel="noopener">https://router.vuejs.org/zh/guide/essentials/history-mode.html</a> 。这里可先跳过这点内容。</p></blockquote><p>现在，我们在浏览器访问 <code>http://localhost:8080/#/vue</code> 这个地址，会发现只出现了  <code>Vue</code> 的 <code>logo</code>。这是因为我们并没有配置 <code>/vue</code> 这个路由，找不到路由，那<code>&lt;router-view/&gt;</code> 这个标签就不会加载出来。</p><p>到这里，我们就知道路由是如何根据 <code>url</code> 来分配不同的组件了。配置多个路由就很简单了：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  routes<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      path<span class="token punctuation">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span>      name<span class="token punctuation">:</span> <span class="token string">'HelloWorld'</span><span class="token punctuation">,</span>      component<span class="token punctuation">:</span> HelloWorld    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      path<span class="token punctuation">:</span> <span class="token string">'/about'</span><span class="token punctuation">,</span>      name<span class="token punctuation">:</span> <span class="token string">'about'</span><span class="token punctuation">,</span>      component<span class="token punctuation">:</span> About    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      path<span class="token punctuation">:</span> <span class="token string">'/vue'</span><span class="token punctuation">,</span>      name<span class="token punctuation">:</span> <span class="token string">'vue'</span><span class="token punctuation">,</span>      component<span class="token punctuation">:</span> Vue    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>那如果要访问 <code>http://localhost:8080/#/vue/demo</code> 怎么办呢？</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  routes<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      path<span class="token punctuation">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span>      name<span class="token punctuation">:</span> <span class="token string">'HelloWorld'</span><span class="token punctuation">,</span>      component<span class="token punctuation">:</span> HelloWorld<span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      path<span class="token punctuation">:</span> <span class="token string">'/about'</span><span class="token punctuation">,</span>      name<span class="token punctuation">:</span> <span class="token string">'about'</span><span class="token punctuation">,</span>      component<span class="token punctuation">:</span> About<span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      path<span class="token punctuation">:</span> <span class="token string">'/vue'</span><span class="token punctuation">,</span>      name<span class="token punctuation">:</span> <span class="token string">'vue'</span><span class="token punctuation">,</span>      component<span class="token punctuation">:</span> Vue<span class="token punctuation">,</span>      children<span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>          path<span class="token punctuation">:</span> <span class="token string">'/demo'</span><span class="token punctuation">,</span>          component<span class="token punctuation">:</span> demo<span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>          path<span class="token punctuation">:</span> <span class="token string">'project'</span><span class="token punctuation">,</span>          component<span class="token punctuation">:</span> project<span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>给路由加多一个子路由配置即可。</p><h4 id="4、assets"><a href="#4、assets" class="headerlink" title="4、assets"></a>4、assets</h4><p>用来存放一些图片、样式等静态文件。</p><h3 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h3><p><img src="../../ImageHosting/Vue/vue-core-structure.png" alt="vue-core-structure"></p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> vue-cli </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VSCode插件及配置</title>
      <link href="/vscode-plugins-and-configurations/"/>
      <url>/vscode-plugins-and-configurations/</url>
      
        <content type="html"><![CDATA[<!-- ## VSCode插件及配置 --><blockquote><p>一直把 <code>VSCode</code> 作为前端开发编辑器，非常好用。因为装的插件和自定义配置较多，这里做个备份备忘。</p></blockquote><h4 id="一、插件"><a href="#一、插件" class="headerlink" title="一、插件"></a>一、插件</h4><pre><code>- advanced-new-file- Docker- ESLint- HTML Snippets- JavaScript（ES6）code snippets- Markdown All in One- Material Theme- Path Intellisense- Prettier - Code formatter- React Standard Style code snippets- Vetur</code></pre><a id="more"></a><h4 id="二、VSCode-配置-React"><a href="#二、VSCode-配置-React" class="headerlink" title="二、VSCode 配置 React"></a>二、VSCode 配置 React</h4><p><code>VSCode</code> 自带了 <code>Emmet</code>，可以自动补全 <code>HTML</code> 文件中的标签，想要补全 <code>react</code> 文件中 <code>JSX</code> 里面的标签，需要在用户设置中增加 <code>Emmet</code> 的设置：</p><h5 id="1、配置emmet"><a href="#1、配置emmet" class="headerlink" title="1、配置emmet"></a>1、配置emmet</h5><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"emmet.includeLanguages"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"javascript"</span><span class="token operator">:</span> <span class="token string">"javascriptreact"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"emmet.triggerExpansionOnTab"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span></code></pre><h5 id="2、代码片段生成插件："><a href="#2、代码片段生成插件：" class="headerlink" title="2、代码片段生成插件："></a>2、代码片段生成插件：</h5><p>安装插件： <code>React Standard Style code snippets</code></p><h4 id="三、VSCode-配置-Vue"><a href="#三、VSCode-配置-Vue" class="headerlink" title="三、VSCode 配置 Vue"></a>三、VSCode 配置 Vue</h4><h5 id="1、vue-文件的基本语法高亮"><a href="#1、vue-文件的基本语法高亮" class="headerlink" title="1、vue 文件的基本语法高亮"></a>1、vue 文件的基本语法高亮</h5><p>安装插件：<code>vetur</code> .</p><p>安装完  <code>vetur</code>  后还需要在自定义配置文件中加上如下配置：</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"emmet.includeLanguages"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"vue-html"</span><span class="token operator">:</span> <span class="token string">"html"</span><span class="token punctuation">,</span>        <span class="token property">"javascript"</span><span class="token operator">:</span> <span class="token string">"javascriptreact"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"emmet.syntaxProfiles"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"vue-html"</span><span class="token operator">:</span> <span class="token string">"html"</span><span class="token punctuation">,</span>        <span class="token property">"vue"</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token string">"css"</span><span class="token punctuation">,</span>            <span class="token string">"html"</span><span class="token punctuation">,</span>            <span class="token string">"less"</span>        <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"vetur.format.defaultFormatter.js"</span><span class="token operator">:</span> <span class="token string">"vscode-typescript"</span><span class="token punctuation">,</span>    <span class="token property">"vetur.format.defaultFormatter.html"</span><span class="token operator">:</span> <span class="token string">"prettyhtml"</span><span class="token punctuation">,</span>    <span class="token property">"vetur.format.defaultFormatterOptions"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"wrap_attributes"</span><span class="token operator">:</span> <span class="token string">"force-aligned"</span><span class="token punctuation">,</span>        <span class="token property">"js-beautify-html"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"wrap_attributes"</span><span class="token operator">:</span> <span class="token string">"force-expand-multiline"</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"prettyhtml"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"printWidth"</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span>            <span class="token property">"singleQuote"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>            <span class="token property">"wrapAttributes"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>            <span class="token property">"sortAttributes"</span><span class="token operator">:</span> <span class="token boolean">false</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>配置的过程中遇到一个问题：<code>VScode</code> 快捷键格式化 <code>vue</code> 文件后，会自动把单引号转为双引号。</p><ul><li>原因：<code>vetur</code> 使用的默认格式化方式是 <code>prettier</code></li><li>解决办法：将 <code>&quot;vetur.format.defaultFormatter.ts&quot;: &quot;prettier&quot;</code> 改为： <code>&quot;vetur.format.defaultFormatter.js&quot;: &quot;vscode-typescript&quot;</code></li></ul><h5 id="2、-vue-文件的-ESLint"><a href="#2、-vue-文件的-ESLint" class="headerlink" title="2、 vue 文件的 ESLint"></a>2、 vue 文件的 ESLint</h5><p>安装插件：<code>ESLint</code> ，<code>ESLint</code> 不是安装后就可以用的，还需要其他的一些环境和配置：</p><ul><li><p>全局安装 <code>ESLint</code> :</p><pre class=" language-shell"><code class="language-shell">$ npm install -g eslint</code></pre></li><li><p><code>vue</code> 文件是类 <code>HTML</code> 的文件，为了支持对 <code>vue</code> 文件的 <code>ESLint</code> ，需要 <code>eslint-plugin-html</code> 这个插件：</p><pre class=" language-shell"><code class="language-shell">$ npm install -g eslint-plugin-html</code></pre><p>安装好之后，在自定义配置文件中加上如下配置：</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"eslint.options"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"plugins"</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token string">"html"</span>        <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"eslint.validate"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token string">"javascript"</span><span class="token punctuation">,</span>        <span class="token string">"javascriptreact"</span><span class="token punctuation">,</span>        <span class="token string">"html"</span><span class="token punctuation">,</span>        <span class="token string">"vue"</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>            <span class="token property">"language"</span><span class="token operator">:</span> <span class="token string">"html"</span><span class="token punctuation">,</span>            <span class="token property">"autoFix"</span><span class="token operator">:</span> <span class="token boolean">true</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>            <span class="token property">"language"</span><span class="token operator">:</span> <span class="token string">"vue"</span><span class="token punctuation">,</span>            <span class="token property">"autoFix"</span><span class="token operator">:</span> <span class="token boolean">true</span>        <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><p>此时，<code>eslint</code> 会根据项目根目录下的 <code>.eslintrc.json</code>  文件（没有需要创建）进行代码检查。</p></li></ul><h4 id="四、代码格式化"><a href="#四、代码格式化" class="headerlink" title="四、代码格式化"></a>四、代码格式化</h4><p>安装插件 <code>prettier</code> , 配置如下（可根据项目遵循的规则自行配置）：</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"prettier.disableLanguages"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token property">"prettier.semi"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token property">"prettier.singleQuote"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token property">"prettier.jsxSingleQuote"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token property">"prettier.trailingComma"</span><span class="token operator">:</span> <span class="token string">"all"</span><span class="token punctuation">}</span></code></pre><h4 id="五、用户自定义配置文件"><a href="#五、用户自定义配置文件" class="headerlink" title="五、用户自定义配置文件"></a>五、用户自定义配置文件</h4><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"workbench.startupEditor"</span><span class="token operator">:</span> <span class="token string">"newUntitledFile"</span><span class="token punctuation">,</span>  <span class="token property">"terminal.external.osxExec"</span><span class="token operator">:</span> <span class="token string">"iTerm.app"</span><span class="token punctuation">,</span>  <span class="token property">"explorer.confirmDelete"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token property">"terminal.integrated.fontFamily"</span><span class="token operator">:</span> <span class="token string">"Source Code Pro for Powerline"</span><span class="token punctuation">,</span>  <span class="token property">"terminal.integrated.fontSize"</span><span class="token operator">:</span> <span class="token number">14</span><span class="token punctuation">,</span>  <span class="token property">"editor.fontSize"</span><span class="token operator">:</span> <span class="token number">14</span><span class="token punctuation">,</span>  <span class="token property">"editor.fontWeight"</span><span class="token operator">:</span> <span class="token string">"500"</span><span class="token punctuation">,</span>  <span class="token property">"editor.fontFamily"</span><span class="token operator">:</span> <span class="token string">"Source Code Pro, 'Courier New', monospace"</span><span class="token punctuation">,</span>  <span class="token property">"editor.formatOnSave"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token property">"editor.multiCursorModifier"</span><span class="token operator">:</span> <span class="token string">"ctrlCmd"</span><span class="token punctuation">,</span>  <span class="token property">"editor.formatOnPaste"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token property">"window.zoomLevel"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token property">"emmet.includeLanguages"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"vue-html"</span><span class="token operator">:</span> <span class="token string">"html"</span><span class="token punctuation">,</span>    <span class="token property">"javascript"</span><span class="token operator">:</span> <span class="token string">"javascriptreact"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"emmet.syntaxProfiles"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"vue-html"</span><span class="token operator">:</span> <span class="token string">"html"</span><span class="token punctuation">,</span>    <span class="token property">"vue"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"css"</span><span class="token punctuation">,</span> <span class="token string">"html"</span><span class="token punctuation">,</span> <span class="token string">"less"</span><span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"explorer.confirmDragAndDrop"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token property">"files.associations"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"*.vue"</span><span class="token operator">:</span> <span class="token string">"vue"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"files.trimFinalNewlines"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token property">"files.insertFinalNewline"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token property">"files.autoSave"</span><span class="token operator">:</span> <span class="token string">"onFocusChange"</span><span class="token punctuation">,</span>  <span class="token property">"eslint.options"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"plugins"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"html"</span><span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"eslint.autoFixOnSave"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token property">"eslint.validate"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token string">"javascript"</span><span class="token punctuation">,</span>    <span class="token string">"javascriptreact"</span><span class="token punctuation">,</span>    <span class="token string">"html"</span><span class="token punctuation">,</span>    <span class="token string">"vue"</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      <span class="token property">"language"</span><span class="token operator">:</span> <span class="token string">"vue"</span><span class="token punctuation">,</span>      <span class="token property">"autoFix"</span><span class="token operator">:</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      <span class="token property">"language"</span><span class="token operator">:</span> <span class="token string">"html"</span><span class="token punctuation">,</span>      <span class="token property">"autoFix"</span><span class="token operator">:</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      <span class="token property">"language"</span><span class="token operator">:</span> <span class="token string">"javascript"</span><span class="token punctuation">,</span>      <span class="token property">"autoFix"</span><span class="token operator">:</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"vetur.format.defaultFormatter.js"</span><span class="token operator">:</span> <span class="token string">"vscode-typescript"</span><span class="token punctuation">,</span>  <span class="token property">"vetur.format.defaultFormatter.html"</span><span class="token operator">:</span> <span class="token string">"js-beautify-html"</span><span class="token punctuation">,</span>  <span class="token property">"vetur.format.defaultFormatterOptions"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"wrap_attributes"</span><span class="token operator">:</span> <span class="token string">"force-aligned"</span><span class="token punctuation">,</span>    <span class="token property">"js-beautify-html"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"wrap_attributes"</span><span class="token operator">:</span> <span class="token string">"force-expand-multiline"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"prettyhtml"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"printWidth"</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span>      <span class="token property">"singleQuote"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      <span class="token property">"wrapAttributes"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>      <span class="token property">"sortAttributes"</span><span class="token operator">:</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"javascript.format.insertSpaceBeforeFunctionParenthesis"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token property">"javascript.format.insertSpaceAfterCommaDelimiter"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token property">"prettier.disableLanguages"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"prettier.semi"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token property">"prettier.singleQuote"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token property">"prettier.jsxSingleQuote"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token property">"prettier.trailingComma"</span><span class="token operator">:</span> <span class="token string">"all"</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Tool </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript 中的对象拷贝</title>
      <link href="/javascript-copy-object/"/>
      <url>/javascript-copy-object/</url>
      
        <content type="html"><![CDATA[<!-- ## JavaScript 中的对象拷贝--><blockquote><p>翻译自：原文链接：<a href="https://smalldata.tech/blog/2018/11/01/copying-objects-in-javascript" target="_blank" rel="noopener">copying-objects-in-javascript</a></p></blockquote><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>这篇文章我们将会说说  <code>Javascript</code>  中对象拷贝的几种方式，我们会仔细探究深拷贝（<code>deep coping</code>）和浅拷贝（<code>shallow coping</code>）。</p><p>在文章开始之前，先提一下一些基础知识：在 <code>Javascript</code>  中，对象只是指向内存中某个位置的指针。这些指针是可变的，也就是说，它们可以重新被赋值。因此，如果我们单单简单地复制这个指针，<strong>那就可能造成有两个指针指向内存中的同一块地址的结果。</strong><br><a id="more"></a></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token punctuation">{</span>  a<span class="token punctuation">:</span> <span class="token string">'abc'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// abc</span><span class="token keyword">var</span> bar <span class="token operator">=</span> foo<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bar<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// abc</span>foo<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token string">'yo foo'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// yo foo</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bar<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// yo foo</span>bar<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token string">'whatup bar?'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// whatup bar?</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bar<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// whatup bar?</span></code></pre><p>从上面的例子可以看出，<code>foo</code> 和 <code>bar</code> 这两个对象都能根据对方的变化而变化。因此，在拷贝 <code>Javascript</code> 中的对象的时候，我们要根据实际使用情况选择拷贝方式。</p><h3 id="一、浅拷贝"><a href="#一、浅拷贝" class="headerlink" title="一、浅拷贝"></a>一、浅拷贝</h3><p>如果要操作的对象拥有的属性都是值类型，那么我们可以用 <code>ES6</code> 中的扩展运算符或者 <code>Object.assign(...)</code> :</p><p><strong>1、扩展运算符：</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> foo<span class="token punctuation">:</span> <span class="token string">"foo"</span><span class="token punctuation">,</span> bar<span class="token punctuation">:</span> <span class="token string">"bar"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> copy <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">...</span>obj <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Object { foo: "foo", bar: "bar" }</span></code></pre><p><strong>2、<code>Object.assign(...)</code> :</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> foo<span class="token punctuation">:</span> <span class="token string">"foo"</span><span class="token punctuation">,</span> bar<span class="token punctuation">:</span> <span class="token string">"bar"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> copy <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Object { foo: "foo", bar: "bar" }</span></code></pre><p>可以看到，上面的两个方法都可以把多个不同来源对象中的属性拷贝到一个目标对象中。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span> foo<span class="token punctuation">:</span> <span class="token string">"foo"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span> bar<span class="token punctuation">:</span> <span class="token string">"bar"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> copySpread <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">...</span>obj1<span class="token punctuation">,</span> <span class="token operator">...</span>obj2 <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Object { foo: "foo", bar: "bar" }</span><span class="token keyword">var</span> copyAssign <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> obj1<span class="token punctuation">,</span> obj2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Object { foo: "foo", bar: "bar" }</span></code></pre><p>但是，上面的两种方法也存在一些问题：如果对象的属性本身也是对象，那么实际被拷贝的还只是那些指针。也就是说，这跟执行 <code>var bar = foo;</code>  的效果是一样的，跟前言中的代码的做法效果是一样的。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token punctuation">{</span> a<span class="token punctuation">:</span> <span class="token number">0</span> <span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token punctuation">{</span> c<span class="token punctuation">:</span> <span class="token number">0</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> copy <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">...</span>foo <span class="token punctuation">}</span><span class="token punctuation">;</span>copy<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>copy<span class="token punctuation">.</span>b<span class="token punctuation">.</span>c <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">dir</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// { a: 0, b: { c: 2 } }</span>console<span class="token punctuation">.</span><span class="token function">dir</span><span class="token punctuation">(</span>copy<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// { a: 1, b: { c: 2 } }</span></code></pre><h3 id="二、深拷贝（有缺陷）"><a href="#二、深拷贝（有缺陷）" class="headerlink" title="二、深拷贝（有缺陷）"></a>二、深拷贝（有缺陷）</h3><p>如果想要深拷贝一个对象，一个可用的解决方法是：<strong>先把对象序列化成字符串，然后再把它反序列化回来。</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> a<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token punctuation">{</span> c<span class="token punctuation">:</span> <span class="token number">0</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> copy <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>不幸的是，这个方法只在对象包含可序列化值，并且没有循环引用的时候有用。其中一个不可序列化的类型的就是<strong>日期对象</strong>。尽管它显示出来是字符串化的 <code>ISO</code> 格式，但是 <code>JSON.parse</code> 只会把它解析成为一个字符串，而不是日期类型。</p><h3 id="三、深拷贝-缺陷少一些"><a href="#三、深拷贝-缺陷少一些" class="headerlink" title="三、深拷贝 (缺陷少一些)"></a>三、深拷贝 (缺陷少一些)</h3><p>对于一些更复杂的情景，我们可以使用 <code>HTML5</code> 的一个新算法，叫做<a href="https://developer.mozilla.org/en-US/docs/Web/API/Notification/Notification" target="_blank" rel="noopener">结构化克隆</a>。不过，截至本篇文章发表为止，有些内置类型还是无法支持，但相比 <code>JSON.parse</code> ，它支持的类型要多的多：<strong>日期类型，正则表达式，Map，集合，二进制大对象，文件集合，图像数据，sparse函数和数组</strong>。 它还维护克隆对象的引用，使得他可以支持循环引用结构的拷贝，而这些在上面的序列化例子中是不支持的。</p><p>目前，没有直接调用结构化克隆的方法，但是有些新的浏览器特性，底层使用了这个算法。因此，深拷贝对象可能需要一系列的环境才能实现。</p><p>通过 <code>MessageChannels</code>:  这样做的原理是，借用通讯的一个特性中使用到的序列化算法。由于那个特性是基于事件的，所以这里的克隆也是一个异步操作。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">StructuredCloner</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>pendingClones_ <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>nextKey_ <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> channel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MessageChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>inPort_ <span class="token operator">=</span> channel<span class="token punctuation">.</span>port1<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>outPort_ <span class="token operator">=</span> channel<span class="token punctuation">.</span>port2<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>outPort_<span class="token punctuation">.</span>onmessage <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> data<span class="token punctuation">:</span> <span class="token punctuation">{</span> key<span class="token punctuation">,</span> value <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> resolve <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>pendingClones_<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">resolve</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>pendingClones_<span class="token punctuation">.</span><span class="token keyword">delete</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>outPort_<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">cloneAsync</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span>resolve <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> key <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>nextKey_<span class="token operator">++</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>pendingClones_<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> resolve<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>inPort_<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token punctuation">{</span> key<span class="token punctuation">,</span> value <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> structuredCloneAsync <span class="token operator">=</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>structuredCloneAsync <span class="token operator">=</span> StructuredCloner<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>cloneAsync<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>  <span class="token keyword">new</span> <span class="token class-name">StructuredCloner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> main <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> original <span class="token operator">=</span> <span class="token punctuation">{</span> date<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> number<span class="token punctuation">:</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>  original<span class="token punctuation">.</span>self <span class="token operator">=</span> original<span class="token punctuation">;</span>  <span class="token keyword">const</span> clone <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">structuredCloneAsync</span><span class="token punctuation">(</span>original<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// different objects:</span>  console<span class="token punctuation">.</span><span class="token function">assert</span><span class="token punctuation">(</span>original <span class="token operator">!==</span> clone<span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">assert</span><span class="token punctuation">(</span>original<span class="token punctuation">.</span>date <span class="token operator">!==</span> clone<span class="token punctuation">.</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// cyclical:</span>  console<span class="token punctuation">.</span><span class="token function">assert</span><span class="token punctuation">(</span>original<span class="token punctuation">.</span>self <span class="token operator">===</span> original<span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">assert</span><span class="token punctuation">(</span>clone<span class="token punctuation">.</span>self <span class="token operator">===</span> clone<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// equivalent values:</span>  console<span class="token punctuation">.</span><span class="token function">assert</span><span class="token punctuation">(</span>original<span class="token punctuation">.</span>number <span class="token operator">===</span> clone<span class="token punctuation">.</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">assert</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span>original<span class="token punctuation">.</span>date<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token function">Number</span><span class="token punctuation">(</span>clone<span class="token punctuation">.</span>date<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Assertions complete.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>通过 <code>history</code> 对象 <code>API</code> ：<code>history.pushState()</code> 和 <code>history.replaceState()</code>  都会给它们的第一个参数做一个结构化克隆！要注意的是，这个方法是同步的，操作浏览器历史这个操作速度不是非常快，如果频繁调用这个方法，会导致浏览器卡死。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> structuredClone <span class="token operator">=</span> obj <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> oldState <span class="token operator">=</span> history<span class="token punctuation">.</span>state<span class="token punctuation">;</span>  history<span class="token punctuation">.</span><span class="token function">replaceState</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> clonedObj <span class="token operator">=</span> history<span class="token punctuation">.</span>state<span class="token punctuation">;</span>  history<span class="token punctuation">.</span><span class="token function">replaceState</span><span class="token punctuation">(</span>oldState<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> clonedObj<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>通过 <a href="https://developer.mozilla.org/en-US/docs/Web/API/Notification/Notification" target="_blank" rel="noopener">notification API</a>: 当创建一个 <code>notification</code> 实例的时候，构造器为它相关的数据做了结构化克隆。需要注意的是，它会尝试向用户展示浏览器通知，但是，除非它接收到用户允许展示通知的请求，否则，它什么也不会做。一旦用户点击同意的话，<code>notification</code>  会立刻被关闭。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> structuredClone <span class="token operator">=</span> obj <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> n <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Notification</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> data<span class="token punctuation">:</span> obj<span class="token punctuation">,</span> silent<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  n<span class="token punctuation">.</span>onshow <span class="token operator">=</span> n<span class="token punctuation">.</span>close<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> n<span class="token punctuation">.</span>data<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h3 id="四、使用Node-js进行深拷贝"><a href="#四、使用Node-js进行深拷贝" class="headerlink" title="四、使用Node.js进行深拷贝"></a>四、使用Node.js进行深拷贝</h3><p><code>Node.js</code> 的 8.0.0 版本提供了一个 <a href="https://nodejs.org/api/v8.html#v8_serialization_api" target="_blank" rel="noopener">序列化 api</a> 可以跟结构化克隆媲美。不过这个 <code>API</code> 在本文发布的时候，还只是被认为是试验性的:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> v8 <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'v8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> buf <span class="token operator">=</span> v8<span class="token punctuation">.</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token punctuation">{</span>a<span class="token punctuation">:</span> <span class="token string">'foo'</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> cloned <span class="token operator">=</span> v8<span class="token punctuation">.</span><span class="token function">deserialize</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>cloned<span class="token punctuation">.</span>b<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>8.0.0 版本以下的话，比较稳定的方法，可以考虑用<a href="https://lodash.com/docs/4.17.11" target="_blank" rel="noopener"> <code>lodash</code></a> 的 <a href="https://lodash.com/docs/4.17.11#cloneDeep" target="_blank" rel="noopener"><code>cloneDeep</code></a> 函数，它的思想也多少有点基于结构化克隆算法。</p><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>总结一下，<code>Javascript</code> 中最好的对象拷贝的算法，很大程度上取决于使用环境，以及你需要拷贝的对象的类型。虽然 <code>lodash</code> 是最安全的泛型深拷贝函数，但是，如果你自己封装的话，可能可以得到效率更高的实现方法，以下就是一个简单的深拷贝，也同样适用于<code>Date</code>日期对象：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> copy<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Handle the 3 simple types, and null or undefined</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> obj <span class="token operator">||</span> <span class="token string">'object'</span> <span class="token operator">!=</span> <span class="token keyword">typeof</span> obj<span class="token punctuation">)</span> <span class="token keyword">return</span> obj<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Handle Date</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Date</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    copy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    copy<span class="token punctuation">.</span><span class="token function">setTime</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> copy<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// Handle Array</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    copy <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> len <span class="token operator">=</span> obj<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      copy<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> copy<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// Handle Function</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Function</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    copy <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> obj<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> copy<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// Handle Object</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    copy <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> attr <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>attr<span class="token punctuation">)</span><span class="token punctuation">)</span> copy<span class="token punctuation">[</span>attr<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>attr<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> copy<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>    <span class="token string">"Unable to copy obj as type isn't supported "</span> <span class="token operator">+</span> obj<span class="token punctuation">.</span>constructor<span class="token punctuation">.</span>name  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>就个人来说，我很期待可以随便使用结构克隆的那一天，让对象拷贝不再令人头疼。</p><p><a href="https://www.zcfy.cc/article/tag/JavaScript" target="_blank" rel="noopener">JAVASCRIPT </a><a href="https://www.zcfy.cc/article/tag/%E7%AE%97%E6%B3%95" target="_blank" rel="noopener">算法 </a><a href="https://www.zcfy.cc/article/tag/%E6%B5%8F%E8%A7%88%E5%99%A8" target="_blank" rel="noopener">浏览器 </a><a href="https://www.zcfy.cc/article/tag/API" target="_blank" rel="noopener">API </a><a href="https://www.zcfy.cc/article/tag/HTML" target="_blank" rel="noopener">HTML</a></p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 对象拷贝 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6 —— Promise</title>
      <link href="/es6-promise/"/>
      <url>/es6-promise/</url>
      
        <content type="html"><![CDATA[<!-- ### 一、Promise 是什么？ --><p>阮一峰老师的 <a href="http://es6.ruanyifeng.com/#docs/promise" target="_blank" rel="noopener">ES6 Promise</a> 文章里，把 <code>Promise</code> 介绍地很详细。这里再整理一下，加深理解。</p><p>学习一个东西，得先知道它是什么。我们先在浏览器中使用 <code>console.dir(Promise)</code> 打印出 <code>Promise</code> 对象的所的属性和方法。</p><p><img src="../../ImageHosting/JavaScript/promise.png" alt="Promise"></p><p>从打印结果可以看出，<code>Promise</code> 是一个构造函数，它自己本身有 <code>all</code>、<code>reject</code>、<code>resolve</code> 等方法，原型上有 <code>catch</code>、<code>finally</code>、<code>then</code> 等方法。所以 <code>new</code> 出来的 <code>Promise</code> 对象也就自然拥有 <code>catch</code>、<code>finally</code>、<code>then</code> 这些方法。从上图中可以看到，<code>then</code> 方法返回的是一个新的 <code>Promise</code> 实例（注意，不是原来那个 <code>Promise</code> 实例）。因此可以采用链式写法，即 <code>then</code> 方法后面再调用另一个 <code>then</code> 方法。</p><p><code>Promise</code> 的中文意思是承诺，这种<strong>“承诺将来会执行”</strong>的对象在 <code>JavaScript</code> 中称为 <code>Promise</code> 对象。简单说就是一个容器，里面保存着某个未来才会执行的事件（通常是一个异步操作）的结果。<br><a id="more"></a></p><blockquote><p><code>Promise</code>对象有以下两个特点。</p><p>（1）对象的状态不受外界影响。<code>Promise</code> 对象代表一个异步操作，有三种状态：<code>pending</code>（进行中）、<code>fulfilled</code>（已成功）和 <code>rejected</code>（已失败）。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。这也是 <code>Promise</code> 这个名字的由来，它的英语意思就是“承诺”，表示其他手段无法改变。</p><p>（2）一旦状态改变，就不会再变，任何时候都可以得到这个结果。<code>Promise</code> 对象的状态改变，只有两种可能：从 <code>pending</code> 变为 <code>fulfilled</code> 和从 <code>pending</code> 变为 <code>rejected</code>。只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果，这时就称为 <code>resolved</code>（已定型）。如果改变已经发生了，你再对<code>Promise</code> 对象添加回调函数，也会立即得到这个结果。这与事件（<code>Event</code>）完全不同，事件的特点是，如果你错过了它，再去监听，是得不到结果的。</p><p><code>Promise</code> 也有一些缺点。首先，无法取消 <code>Promise</code>，一旦新建它就会立即执行，无法中途取消。其次，如果不设置回调函数，<code>Promise</code> 内部抛出的错误，不会反应到外部。第三，当处于 <code>pending</code> 状态时，无法得知目前进展到哪一个阶段（刚刚开始还是即将完成）。</p><p>—— 摘自 <a href="http://es6.ruanyifeng.com/#docs/promise" target="_blank" rel="noopener">http://es6.ruanyifeng.com/#docs/promise</a></p></blockquote><h3 id="二、Promise的使用"><a href="#二、Promise的使用" class="headerlink" title="二、Promise的使用"></a>二、Promise的使用</h3><h4 id="1、创建Promise"><a href="#1、创建Promise" class="headerlink" title="1、创建Promise"></a>1、创建Promise</h4><p>那如何创建一个 <code>Promise</code> 呢，下面看一个简单的例子：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//Do some Async</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'执行完成'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'数据'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><code>Promise</code> 构造函数接受一个函数作为参数，该函数的两个参数分别是 <code>resolve</code>和 <code>reject</code>，这两个参数也是函数，由 <code>JavaScript</code> 引擎提供，不用自己实现。</p><ul><li><code>resolve</code> 函数的作用是，将 <code>Promise</code> 对象的状态从“未完成”变为“成功”（即从 <code>pending</code> 变为 <code>resolved</code>），在异步操作成功时调用，并将异步操作的结果，作为参数传递出去；</li><li><code>reject</code> 函数的作用是，将 <code>Promise</code> 对象的状态从“未完成”变为“失败”（即从 <code>pending</code> 变为 <code>rejected</code>），在异步操作失败时调用，并将异步操作报出的错误，作为参数传递出去。</li></ul><p>在上面的代码中，我们执行了一个异步操作，也就是 <code>setTimeout</code>，2秒后，输出“执行完成”，并且调用 <code>resolve</code>方法。运行代码的时候我们发现，我们只是 <code>new</code> 了一个 <code>Promise</code> 对象，并没有调用它，我们传进去的函数就已经执行了。<strong>所以，我们使用 <code>Promise</code> 的时候一般是包在一个函数中，在需要的时候去运行这个函数 :</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">runAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//Do some Async</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'执行完成'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'数据'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> p<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">runAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>函数会 <code>return</code> 出 <code>Promise</code> 对象，也就是说，执行这个函数我们得到了一个 <code>Promise</code> 对象。在文章开始的时候，我们知道 <code>Promise</code> 对象拥有 <code>catch</code>、<code>finally</code>、<code>then</code> 这些方法，现在我们看看怎么使用它们。继续使用上面的 <code>runAsync</code> 函数 :</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">runAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//Do some Async</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'执行完成'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'数据'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> p<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">runAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>  <span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// success</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`成功拿到</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>data<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//后面可以用传过来的数据做些其他操作</span>    <span class="token comment" spellcheck="true">//......</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token keyword">function</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// failure</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><code>Promise</code> 实例生成以后，可以用 <code>then</code> 方法分别指定 <code>resolved</code> 状态和 <code>rejected</code> 状态的回调函数。<code>Promise</code>实例的状态变为 <code>resolved</code> 或 <code>rejected</code>，就会触发<code>then</code>方法绑定的回调函数。</p><pre class=" language-javascript"><code class="language-javascript">promise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// success</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// failure</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><code>then</code>方法可以接受两个回调函数作为参数。第一个回调函数是<code>Promise</code>对象的状态变为<code>resolved</code>时调用，第二个回调函数是<code>Promise</code>对象的状态变为<code>rejected</code>时调用。其中，第二个函数是可选的，不一定要提供。这两个函数都接受<code>Promise</code>对象传出的值作为参数。</p><p>结论：所以这个时候我们就会发现：原来 <code>then</code> 里面的函数和我们平时的回调函数一个意思，能够在 <code>runAsync</code> 这个异步任务执行完成之后被执行。</p><p>这里我们就可以清楚的知道 <code>Promise</code> 的作用了：<strong>异步执行的流程中，把原来的回调写法（执行代码和处理结果的代码）分离出来，在异步操作执行完后，用链式调用的方式执行回调函数。</strong></p><p>下面我们再具体看看 <code>Promise</code> 相比于回调嵌套的写法的好处。</p><h4 id="2、回调嵌套与Promise"><a href="#2、回调嵌套与Promise" class="headerlink" title="2、回调嵌套与Promise"></a>2、回调嵌套与Promise</h4><p>从表面上看，<code>Promise</code> 只是能够简化层层回调的写法，而实质上，<code>Promise</code> 的精髓是“状态”，用维护状态、传递状态的方式来使得回调函数能够及时调用，它比传递 <code>callback</code> 函数要简单、灵活的多。我们来看看这种简化解决了什么问题：</p><p>以往使用回调嵌套的方式来处理异步的代码是怎么实现的呢？</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">doA</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">doB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">doC</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">doD</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">doE</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">doF</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//执行顺序：</span><span class="token comment" spellcheck="true">//doA</span><span class="token comment" spellcheck="true">//doF</span><span class="token comment" spellcheck="true">//doB</span><span class="token comment" spellcheck="true">//doC</span><span class="token comment" spellcheck="true">//doE</span><span class="token comment" spellcheck="true">//doD</span></code></pre><p>这样组织的代码就会遇到一个问题：当项目的代码变得复杂，加上了各种逻辑判断，不断的在函数之间跳转，那排查问题的难度就会大大增加。就比如在上面这个例子中，<code>doD()</code> 必须在 <code>doC()</code> 完成后才能完成，如果 <code>doC()</code> 执行失败了呢？我们是要重试 <code>doC()</code> 吗？还是直接转到其他错误处理函数中？当我们将这些判断都加入到这个流程中，很快代码就会变得非常复杂，难以定位问题。</p><p>回调嵌套：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">request</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> res<span class="token punctuation">,</span> body<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token function">handleError</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>    fs<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span><span class="token string">'1.txt'</span><span class="token punctuation">,</span> body<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">request</span><span class="token punctuation">(</span>url2<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> res<span class="token punctuation">,</span> body<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token function">handleError</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>使用 <code>Promise</code> 之后:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">request</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">writeFileAsynv</span><span class="token punctuation">(</span><span class="token string">'1.txt'</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">request</span><span class="token punctuation">(</span>url2<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">handleError</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>使用 <code>Promise</code> 的好处就非常明显了。</p><h4 id="3、catch-方法"><a href="#3、catch-方法" class="headerlink" title="3、catch 方法"></a>3、catch 方法</h4><p> <code>Promise</code> 对象也拥有 <code>catch</code> 方法。它的用途是什么呢？其实它和 <code>then</code> 方法的第二个参数是一样的，用来指定<code>reject</code> 的回调，和写在 <code>then</code> 里第二个参数里面的效果是一样。用法如下：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">runAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'resolved'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'rejected'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><code>catch</code> 还有另外一个作用：在执行 <code>resolve</code> 的回调（也就是上面 <code>then</code> 中的第一个参数）时，如果抛出异常了（代码出错了），那么并不会程序报错卡死，而是会进到这个 <code>catch</code> 方法中，看个例子：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">runAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'resolved'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>somedata<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//此处的somedata未定义</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'rejected'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 执行完成</span><span class="token comment" spellcheck="true">// resolved</span><span class="token comment" spellcheck="true">// 数据</span><span class="token comment" spellcheck="true">// rejected</span><span class="token comment" spellcheck="true">// ReferenceError: somedata is not defined</span></code></pre><p>在 <code>resolve</code> 的回调中，<code>somedata</code> 这个变量是没有被定义的。如果我们不用 <code>catch</code>，代码运行到这里就直接报错了，不往下运行了。但是在这里，会得到这样的结果。也就是说，程序执行到 <code>catch</code> 方法里面去了，而且把错误原因传到了 <code>error</code> 参数中。即便是有错误的代码也不会报错了，这与 <code>try/catch</code> 语句有相同的功能。<strong>所以，如果想捕获错误，就可以使用 <code>catch</code> 方法。</strong></p><h4 id="4、Promise-all"><a href="#4、Promise-all" class="headerlink" title="4、Promise.all()"></a>4、Promise.all()</h4><p><code>Promise.all</code> 方法用于将多个 Promise 实例，包装成一个新的 Promise 实例。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> p <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span>p1<span class="token punctuation">,</span> p2<span class="token punctuation">,</span> p3<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>看个例子：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">runAsync1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//Do some Async</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'执行完成1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'数据1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> p<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">runAsync2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//Do some Async</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'执行完成2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'数据2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> p<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">runAsync3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//Do some Async</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'执行完成3'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'数据3'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> p<span class="token punctuation">;</span><span class="token punctuation">}</span>Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token function">runAsync1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">runAsync2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">runAsync3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>results<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>results<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 执行完成1</span><span class="token comment" spellcheck="true">// 执行完成2</span><span class="token comment" spellcheck="true">// 执行完成3</span><span class="token comment" spellcheck="true">// [ '数据1', '数据2', '数据3' ]</span></code></pre><p>用 <code>Promise.all</code> 来执行，接收一个数组参数，里面的值最终都返回 <code>Promise</code> 对象。这样，三个异步操作的就是并行执行的，等到它们都执行完后才会进到 <code>then</code> 里面。那么，三个异步操作返回的数据哪里去了呢？都在 <code>then</code> 里面呢，<code>Promise.all</code> 会把所有异步操作的结果放进一个数组中传给 <code>then</code> ，就是上面的 <code>results</code> 。</p><p><strong>应用场景：</strong></p><p><code>Promise.all</code> 方法有一个非常常用的应用场景：打开网页时，预先加载需要用到的各种资源如图片及各种静态文件，所有的都加载完后，再进行页面的初始化。 </p><h4 id="5、Promise-race"><a href="#5、Promise-race" class="headerlink" title="5、Promise.race()"></a>5、Promise.race()</h4><p><code>race</code> 是竞赛、赛跑的意思。它的用法也就是它的字面意思：<strong>谁跑的快，就以谁为准，执行回调</strong>。其实再看看<code>Promise.all</code> 方法，和 <code>race</code> 方法恰恰相反。还是用 <code>Promise.all</code> 的例子，但是把 <code>runAsync1</code> 的方法 <code>timeout</code> 时间调成 1000ms。 </p><pre class=" language-javascript"><code class="language-javascript">Promise<span class="token punctuation">.</span><span class="token function">race</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token function">runAsync1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">runAsync2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">runAsync3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>results<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>results<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 执行完成1</span><span class="token comment" spellcheck="true">// 数据1</span><span class="token comment" spellcheck="true">// 执行完成2</span><span class="token comment" spellcheck="true">// 执行完成3</span></code></pre><p>这三个异步操作同样是并行执行的。结果很可以猜到，1秒后 <code>runAsync1</code> 已经执行完了，此时 <code>then</code> 里面的方法就会立即执行了。但是，在 <code>then</code> 里面的回调函数开始执行时，<code>runAsync2()</code> 和 <code>runAsync3()</code> 并没有停止，仍然继续执行。所以再过1秒后，输出了他们结束的标志。这个点需要注意。</p><p>上面的这些方法就是 <code>Promise</code> 比较常用的几个方法了。</p><h3 id="三、红绿灯问题"><a href="#三、红绿灯问题" class="headerlink" title="三、红绿灯问题"></a>三、红绿灯问题</h3><p>题目：红灯三秒亮一次，绿灯一秒亮一次，黄灯2秒亮一次；如何让三个灯不断交替重复亮灯？（用 Promse 实现）</p><p>三个亮灯函数已经存在：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">red</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'red'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">green</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'green'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">yellow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'yellow'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>利用 then 和递归实现：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">red</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'red'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">green</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'green'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">yellow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'yellow'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> light <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>timmer<span class="token punctuation">,</span> color<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">color</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> timmer<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> step <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token function">light</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> red<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token function">light</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">,</span> green<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token function">light</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span> yellow<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">step</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">step</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何使用 Docker-Compose 部署 WordPress</title>
      <link href="/docker-wordpress/"/>
      <url>/docker-wordpress/</url>
      
        <content type="html"><![CDATA[<!-- ## 如何使用 Docker-Compose 部署 WordPress --><blockquote><p>准备：腾讯云服务器：centos 7.5</p></blockquote><p>部署工具：</p><ul><li><code>Docker</code></li><li><code>Docker Compose</code></li><li><code>WordPress</code> 和 <code>MySql5.7</code> (运行在 Docker 容器中)</li></ul><h3 id="一、安装-Docker"><a href="#一、安装-Docker" class="headerlink" title="一、安装 Docker"></a>一、安装 Docker</h3><h4 id="1、卸载旧版本（重装的新系统可跳过）"><a href="#1、卸载旧版本（重装的新系统可跳过）" class="headerlink" title="1、卸载旧版本（重装的新系统可跳过）"></a>1、卸载旧版本（重装的新系统可跳过）</h4><pre class=" language-shell"><code class="language-shell">$ sudo yum remove docker \                  docker-client \                  docker-client-latest \                  docker-common \                  docker-latest \                  docker-latest-logrotate \                  docker-logrotate \                  docker-selinux \                  docker-engine-selinux \                  docker-engine</code></pre><a id="more"></a><h4 id="2、安装-Docker-所需要的包"><a href="#2、安装-Docker-所需要的包" class="headerlink" title="2、安装 Docker 所需要的包"></a>2、安装 Docker 所需要的包</h4><pre class=" language-shell"><code class="language-shell">$ sudo yum install -y yum-utils \  device-mapper-persistent-data \  lvm2</code></pre><h4 id="3、配置到稳定的-Docker-CE-安装库"><a href="#3、配置到稳定的-Docker-CE-安装库" class="headerlink" title="3、配置到稳定的 Docker CE 安装库"></a>3、配置到稳定的 Docker CE 安装库</h4><pre class=" language-shell"><code class="language-shell">$ sudo yum-config-manager \    --add-repo \    https://download.docker.com/linux/centos/docker-ce.repo</code></pre><h4 id="4、安装-Docker-CE"><a href="#4、安装-Docker-CE" class="headerlink" title="4、安装 Docker CE"></a>4、安装 Docker CE</h4><pre class=" language-shell"><code class="language-shell">$ sudo yum install docker-ce</code></pre><h4 id="5、启动-Docker-service"><a href="#5、启动-Docker-service" class="headerlink" title="5、启动 Docker service"></a>5、启动 Docker service</h4><pre class=" language-shell"><code class="language-shell">$ sudo systemctl start docker</code></pre><h4 id="6、验证安装"><a href="#6、验证安装" class="headerlink" title="6、验证安装"></a>6、验证安装</h4><pre class=" language-shell"><code class="language-shell">// 可以通过查看版本的形式确认安装是否成功：$ docker --version// Docker version 18.06.1-ce, build e68fc7a// 也可以通过直接运行hello-world容器来确认安装是否成功：$ docker run hello-world</code></pre><h3 id="二、安装-Docker-Compose"><a href="#二、安装-Docker-Compose" class="headerlink" title="二、安装 Docker Compose"></a>二、安装 Docker Compose</h3><h4 id="1、下载安装文件"><a href="#1、下载安装文件" class="headerlink" title="1、下载安装文件"></a>1、下载安装文件</h4><pre class=" language-shell"><code class="language-shell">$ sudo curl -L "https://github.com/docker/compose/releases/download/1.22.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose</code></pre><h4 id="2、给已下载的安装文件添加执行权限"><a href="#2、给已下载的安装文件添加执行权限" class="headerlink" title="2、给已下载的安装文件添加执行权限"></a>2、给已下载的安装文件添加执行权限</h4><pre class=" language-shell"><code class="language-shell">$ sudo chmod +x /usr/local/bin/docker-compose</code></pre><h4 id="3、验证安装"><a href="#3、验证安装" class="headerlink" title="3、验证安装"></a>3、验证安装</h4><pre class=" language-shell"><code class="language-shell">$ docker-compose --version// docker-compose version 1.22.0, build f46880fe</code></pre><h3 id="三、部署-WordPress-和-MySql-容器"><a href="#三、部署-WordPress-和-MySql-容器" class="headerlink" title="三、部署 WordPress 和 MySql 容器"></a>三、部署 WordPress 和 MySql 容器</h3><p>创建一个文件夹（<code>WordPress-Blog</code>），并在该目录下创建名为 <code>docker-compose.yml</code> 的文件：</p><pre class=" language-shell"><code class="language-shell">$ sudo mkdir WordPress-Blog && cd WordPress-Blog$ sudo touch docker-compose.yml</code></pre><p>编辑 <code>docker-compose.yml</code> ，将如下内容保存在里面：</p><pre class=" language-yml"><code class="language-yml">version: '3'services:   db:     image: mysql:5.7     volumes:       - db_data:/var/lib/mysql     restart: always     environment:       MYSQL_ROOT_PASSWORD: your-mysql-root-password       MYSQL_DATABASE: wordpress       MYSQL_USER: wordpress       MYSQL_PASSWORD: wordpress   wordpress:     depends_on:       - db     image: wordpress:latest     volumes:        - wp_site:/var/www/html     ports:       - "80:80"       - "443:443"     restart: always     environment:       WORDPRESS_DB_HOST: db:3306       WORDPRESS_DB_USER: wordpress       WORDPRESS_DB_PASSWORD: wordpressvolumes:    db_data:    wp_site:</code></pre><p>使用 <code>docker-compose</code> 命令启动容器：</p><pre class=" language-shell"><code class="language-shell">$ docker-compose up -d</code></pre><h3 id="四、完成"><a href="#四、完成" class="headerlink" title="四、完成"></a>四、完成</h3><p>浏览器访问 IP 地址，安装 WordPress！</p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker-Compose </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何提问？</title>
      <link href="/how-to-ask-a-question/"/>
      <url>/how-to-ask-a-question/</url>
      
        <content type="html"><![CDATA[<!-- ## 如何提问？ --><p>How to ask a question?<br><img src="../../ImageHosting/Tools/howtoask.png" alt="如何提问"><br><a id="more"></a></p>]]></content>
      
      
      <categories>
          
          <category> Tool </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Redux 基础知识</title>
      <link href="/redux-basic/"/>
      <url>/redux-basic/</url>
      
        <content type="html"><![CDATA[<!-- ## Redux 基础知识 --><p>核心思想：</p><pre><code>(1)Web 应用是一个状态机，视图与状态是一一对应的。(2)Redux 专注于状态管理，把所有的状态都存在一个对象中。</code></pre><p>核心概念包括：<code>store</code>、<code>state</code>、<code>action</code>、<code>reducer</code>。</p><a id="more"></a><h3 id="一、概念介绍"><a href="#一、概念介绍" class="headerlink" title="一、概念介绍"></a>一、概念介绍</h3><h4 id="1-store"><a href="#1-store" class="headerlink" title="1. store"></a>1. store</h4><p><code>store</code> 就是存放数据的地方，可以把它看作是一个容器。 <code>Redux</code> 应用只有一个单一的 <code>store</code>。<code>redux</code> 提供<code>createStore</code>函数来生成 <code>store</code>，函数参数是 <code>reducer</code>(后面介绍)。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> createStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'redux'</span><span class="token punctuation">;</span><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">createStore</span><span class="token punctuation">(</span>reducer<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="2-state"><a href="#2-state" class="headerlink" title="2. state"></a>2. state</h4><p>state 是 store 的某个时刻的快照，可以通过 <code>store.getState()</code> 取得当前时刻的 <code>state</code></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> state <span class="token operator">=</span> store<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="3-action"><a href="#3-action" class="headerlink" title="3. action"></a>3. action</h4><p><code>action</code> 用来改变 <code>state</code>。<code>action</code> 是一个对象，其中的 <code>type</code> 属性是必须的，其他的属性一般用来设置改变 <code>state</code> 需要的数据。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> action <span class="token operator">=</span> <span class="token punctuation">{</span>  type<span class="token punctuation">:</span> <span class="token string">'ADD_ONE'</span><span class="token punctuation">,</span>  num<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p><code>store.dispatch()</code> 是发出 <code>action</code> 的唯一方法：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> action <span class="token operator">=</span> <span class="token punctuation">{</span>  type<span class="token punctuation">:</span> <span class="token string">'ADD_ONE'</span><span class="token punctuation">,</span>  num<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span>store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="4-reducer"><a href="#4-reducer" class="headerlink" title="4. reducer"></a>4. reducer</h4><p><code>store</code> 收到 <code>action</code> 以后，必须给出一个新的 <code>state</code>，这样 <code>view</code> 才会发生变化。这种 <code>state</code> 的计算过程就叫做 <code>reducer</code>。它接受 <code>action</code> 和当前 <code>state</code> 作为参数，返回一个新的 <code>state</code> 。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> createStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'redux'</span><span class="token punctuation">;</span><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">createStore</span><span class="token punctuation">(</span>reducer<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> reducer <span class="token operator">=</span> <span class="token punctuation">(</span>state <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> action<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">switch</span> <span class="token punctuation">(</span>action<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token string">'ADD_ONE'</span><span class="token punctuation">:</span>      <span class="token keyword">return</span> state <span class="token operator">+</span> action<span class="token punctuation">.</span>num<span class="token punctuation">;</span>    <span class="token keyword">default</span><span class="token punctuation">:</span>      <span class="token keyword">return</span> state<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>当 <code>store.dispatch</code> 发送过来一个新的 <code>action</code> ，<code>store</code> 就会自动调用 <code>reducer</code>，得到新的 <code>state</code> 。</p><h3 id="二、简单实例"><a href="#二、简单实例" class="headerlink" title="二、简单实例"></a>二、简单实例</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//第一步，创建action</span><span class="token keyword">const</span> addOne <span class="token operator">=</span> <span class="token punctuation">{</span>  type<span class="token punctuation">:</span> <span class="token string">'ADD'</span><span class="token punctuation">,</span>  num<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> addTwo <span class="token operator">=</span> <span class="token punctuation">{</span>  type<span class="token punctuation">:</span> <span class="token string">'ADD'</span><span class="token punctuation">,</span>  num<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> square <span class="token operator">=</span> <span class="token punctuation">{</span>  type<span class="token punctuation">:</span> <span class="token string">'SQUARE'</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//第二步，创建reducer</span><span class="token keyword">let</span> math <span class="token operator">=</span> <span class="token punctuation">(</span>state <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> action<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">switch</span> <span class="token punctuation">(</span>action<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> ADD<span class="token punctuation">:</span>      <span class="token keyword">return</span> state <span class="token operator">+</span> action<span class="token punctuation">.</span>num<span class="token punctuation">;</span>    <span class="token keyword">case</span> SQUARE<span class="token punctuation">:</span>      <span class="token keyword">return</span> state <span class="token operator">*</span> state<span class="token punctuation">;</span>    <span class="token keyword">default</span><span class="token punctuation">:</span>      <span class="token keyword">return</span> state<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//第三步，创建store</span><span class="token keyword">import</span> <span class="token punctuation">{</span> createStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'redux'</span><span class="token punctuation">;</span><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">createStore</span><span class="token punctuation">(</span>math<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//第四步，测试，通过dispatch发出action，并通过getState()取得当前state值</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>store<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//默认值为10</span>store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span>addOne<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//发起'+1'的action</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>store<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//当前值为10+1=11</span>store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span>square<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//发起'乘方'的action</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>store<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//当前值为11*11=121</span>store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span>addTwo<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//发起'+2'的action</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>store<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//当前值为121+2=123</span></code></pre><h3 id="三、Redux-工作流"><a href="#三、Redux-工作流" class="headerlink" title="三、Redux 工作流"></a>三、Redux 工作流</h3><p><img src="../../ImageHosting/React/redux-flow.jpg" alt="Redux工作流"></p><h3 id="四、代码组织目录结构"><a href="#四、代码组织目录结构" class="headerlink" title="四、代码组织目录结构"></a>四、代码组织目录结构</h3><p>下面对目录结构进行划分</p><p>1、一般地，将 <code>action.type</code> 设置为常量，这样有个好处：在书写错误时，会得到报错提示</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// constants/ActionTypes.js</span><span class="token keyword">export</span> <span class="token keyword">const</span> ADD <span class="token operator">=</span> <span class="token string">'ADD'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> SQUARE <span class="token operator">=</span> <span class="token string">'SQUARE'</span><span class="token punctuation">;</span></code></pre><p>2、可以将 <code>addOne</code> 对象和 <code>addTwo</code> 对象整合成 <code>add</code> 函数的形式</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// action/math.js</span><span class="token keyword">import</span> <span class="token punctuation">{</span> ADD<span class="token punctuation">,</span> SQUARE <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'../constants/ActionTypes'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> add <span class="token operator">=</span> num <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">{</span> type<span class="token punctuation">:</span> ADD<span class="token punctuation">,</span> num <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> square <span class="token operator">=</span> <span class="token punctuation">{</span> type<span class="token punctuation">:</span> SQUARE <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>3、根据 <code>action.type</code> 的分类来拆分 <code>reducer</code> ，最终通过 <code>combineReducers</code> 方法将拆分的 <code>reducer</code> 合并起来。上例中的 <code>action</code> 类型都是数字运算，无需拆分，只需进行如下变化:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// reducer/math.js</span><span class="token keyword">import</span> <span class="token punctuation">{</span> ADD<span class="token punctuation">,</span> SQUARE <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'../constants/ActionTypes'</span><span class="token punctuation">;</span><span class="token keyword">const</span> math <span class="token operator">=</span> <span class="token punctuation">(</span>state <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> action<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">switch</span> <span class="token punctuation">(</span>action<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> ADD<span class="token punctuation">:</span>      <span class="token keyword">return</span> state <span class="token operator">+</span> action<span class="token punctuation">.</span>num<span class="token punctuation">;</span>    <span class="token keyword">case</span> SQUARE<span class="token punctuation">:</span>      <span class="token keyword">return</span> state <span class="token operator">*</span> state<span class="token punctuation">;</span>    <span class="token keyword">default</span><span class="token punctuation">:</span>      <span class="token keyword">return</span> state<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> math<span class="token punctuation">;</span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// reducer/index.js</span><span class="token keyword">import</span> <span class="token punctuation">{</span> combineReducers <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'redux'</span><span class="token punctuation">;</span><span class="token keyword">import</span> math <span class="token keyword">from</span> <span class="token string">'./math'</span><span class="token punctuation">;</span><span class="token keyword">const</span> rootReducer <span class="token operator">=</span> <span class="token function">combineReducers</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  math<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> rootReducer<span class="token punctuation">;</span></code></pre><p>4、将 <code>store</code> 存储到 <code>store/index.js</code> 文件中</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// store/index.js</span><span class="token keyword">import</span> <span class="token punctuation">{</span> createStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'redux'</span><span class="token punctuation">;</span><span class="token keyword">import</span> rootReducer <span class="token keyword">from</span> <span class="token string">'../reducer'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">createStore</span><span class="token punctuation">(</span>rootReducer<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>5、最终，根路径下的 <code>index.js</code> 内容如下所示</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> store <span class="token keyword">from</span> <span class="token string">'./store'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> add<span class="token punctuation">,</span> square <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./action/math'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>store<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//默认值为10</span>store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//发起'+1'的action</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>store<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//当前值为10+1=11</span>store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span>square<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//发起'乘方'的action</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>store<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//当前值为11*11=121</span>store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//发起'+2'的action</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>store<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//当前值为121+2=123</span></code></pre><p>最终的目录结构：</p><p><img src="../../ImageHosting/React/redux-directory-structure.png" alt="目录结构"></p><h3 id="四、UI-层"><a href="#四、UI-层" class="headerlink" title="四、UI 层"></a>四、UI 层</h3><p>前面的示例中，只是 <code>redux</code> 的状态改变，下面利用 <code>UI</code> 层来建立 <code>view</code> 和 <code>state</code> 的联系，将根目录下的<code>index.js</code> 的内容更改如下:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> store <span class="token keyword">from</span> <span class="token string">'./store'</span><span class="token punctuation">;</span><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">'react-dom'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> add<span class="token punctuation">,</span> square <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./action/math'</span><span class="token punctuation">;</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>  <span class="token operator">&lt;</span>div store<span class="token operator">=</span><span class="token punctuation">{</span>store<span class="token punctuation">}</span><span class="token operator">></span>    <span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token punctuation">{</span>store<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>math<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>    <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"button"</span> onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span> value<span class="token operator">=</span><span class="token string">"+1"</span> <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"button"</span> onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span> value<span class="token operator">=</span><span class="token string">"+2"</span> <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"button"</span> onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span>square<span class="token punctuation">)</span><span class="token punctuation">}</span> value<span class="token operator">=</span><span class="token string">"乘方"</span> <span class="token operator">/</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">,</span>  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>虽然可以显示数字，但是点击按钮时，却不能重新渲染页面。</p><h4 id="1-store-subscribe"><a href="#1-store-subscribe" class="headerlink" title="1. store.subscribe()"></a>1. store.subscribe()</h4><p>接下来介绍 <code>store.subscribe()</code> 方法了，该方法用来设置监听函数，一旦 <code>state</code> 发生变化，就自动执行这个函数。该方法的返回值是一个函数，调用这个函数可以解除监听。</p><p>下面将示例代码更改如下：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> store <span class="token keyword">from</span> <span class="token string">'./store'</span><span class="token punctuation">;</span><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">'react-dom'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> add<span class="token punctuation">,</span> square <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./action/math'</span><span class="token punctuation">;</span><span class="token keyword">const</span> render <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span>  ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>    <span class="token operator">&lt;</span>div store<span class="token operator">=</span><span class="token punctuation">{</span>store<span class="token punctuation">}</span><span class="token operator">></span>      <span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token punctuation">{</span>store<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>math<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>      <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"button"</span> onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span> value<span class="token operator">=</span><span class="token string">"+1"</span> <span class="token operator">/</span><span class="token operator">></span>      <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"button"</span> onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span> value<span class="token operator">=</span><span class="token string">"+2"</span> <span class="token operator">/</span><span class="token operator">></span>      <span class="token operator">&lt;</span>input        type<span class="token operator">=</span><span class="token string">"button"</span>        onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span>square<span class="token punctuation">)</span><span class="token punctuation">}</span>        value<span class="token operator">=</span><span class="token string">"乘方"</span>      <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">,</span>    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>store<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>render<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="五、异步"><a href="#五、异步" class="headerlink" title="五、异步"></a>五、异步</h3><p><code>redux</code> 默认只处理同步，对于 <code>API</code> 请求这样的异步任务则无能为力，接下来尝试使用<code>axios</code>的<code>get</code>方法来请求下面这个<code>API</code>。</p><pre><code>https://jsonplaceholder.typicode.com/posts/2</code></pre><p>获取的数据如下:</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"userId"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"qui est esse"</span><span class="token punctuation">,</span>  <span class="token property">"body"</span><span class="token operator">:</span> <span class="token string">"est rerum tempore vitae\nsequi sint nihil reprehenderit dolor beatae ea dolores neque\nfugiat blanditiis voluptate porro vel nihil molestiae ut reiciendis\nqui aperiam non debitis possimus qui neque nisi nulla"</span><span class="token punctuation">}</span></code></pre><p>然后，将其 <code>id</code> 值设置为 <code>state.math</code> 的值，代码修改如下：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// constants/ActionTypes.js</span><span class="token keyword">export</span> <span class="token keyword">const</span> ADD <span class="token operator">=</span> <span class="token string">'ADD'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> SQUARE <span class="token operator">=</span> <span class="token string">'SQUARE'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> SET <span class="token operator">=</span> <span class="token string">'SET'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// action/math.js</span><span class="token keyword">import</span> <span class="token punctuation">{</span> ADD<span class="token punctuation">,</span> SQUARE<span class="token punctuation">,</span> SET <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'../constants/ActionTypes'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> add <span class="token operator">=</span> num <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">{</span> type<span class="token punctuation">:</span> ADD<span class="token punctuation">,</span> num <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> square <span class="token operator">=</span> <span class="token punctuation">{</span> type<span class="token punctuation">:</span> SQUARE <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> setNum <span class="token operator">=</span> num <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">{</span> type<span class="token punctuation">:</span> SET<span class="token punctuation">,</span> num <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// reduce/math.js</span><span class="token keyword">import</span> <span class="token punctuation">{</span> ADD<span class="token punctuation">,</span> SQUARE<span class="token punctuation">,</span> SET <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'../constants/ActionTypes'</span><span class="token punctuation">;</span><span class="token keyword">const</span> math <span class="token operator">=</span> <span class="token punctuation">(</span>state <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> action<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">switch</span> <span class="token punctuation">(</span>action<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> ADD<span class="token punctuation">:</span>      <span class="token keyword">return</span> state <span class="token operator">+</span> action<span class="token punctuation">.</span>num<span class="token punctuation">;</span>    <span class="token keyword">case</span> SQUARE<span class="token punctuation">:</span>      <span class="token keyword">return</span> state <span class="token operator">*</span> state<span class="token punctuation">;</span>    <span class="token keyword">case</span> SET<span class="token punctuation">:</span>      <span class="token keyword">return</span> action<span class="token punctuation">.</span>num<span class="token punctuation">;</span>    <span class="token keyword">default</span><span class="token punctuation">:</span>      <span class="token keyword">return</span> state<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> math<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// index.js</span><span class="token keyword">import</span> store <span class="token keyword">from</span> <span class="token string">'./store'</span><span class="token punctuation">;</span><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">'react-dom'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> add<span class="token punctuation">,</span> square<span class="token punctuation">,</span> setNum <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./action/math'</span><span class="token punctuation">;</span><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">'axios'</span><span class="token punctuation">;</span><span class="token keyword">let</span> uri <span class="token operator">=</span> <span class="token string">'https://jsonplaceholder.typicode.com/posts/2'</span><span class="token punctuation">;</span><span class="token keyword">const</span> render <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span>  ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>    <span class="token operator">&lt;</span>div store<span class="token operator">=</span><span class="token punctuation">{</span>store<span class="token punctuation">}</span><span class="token operator">></span>      <span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token punctuation">{</span>store<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>math<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>      <span class="token operator">&lt;</span>input        type<span class="token operator">=</span><span class="token string">"button"</span>        onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          axios<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>uri<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span>store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">setNum</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span>        value<span class="token operator">=</span><span class="token string">"设置Num"</span>      <span class="token operator">/</span><span class="token operator">></span>      <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"button"</span> onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span> value<span class="token operator">=</span><span class="token string">"+1"</span> <span class="token operator">/</span><span class="token operator">></span>      <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"button"</span> onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span> value<span class="token operator">=</span><span class="token string">"+2"</span> <span class="token operator">/</span><span class="token operator">></span>      <span class="token operator">&lt;</span>input        type<span class="token operator">=</span><span class="token string">"button"</span>        onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span>square<span class="token punctuation">)</span><span class="token punctuation">}</span>        value<span class="token operator">=</span><span class="token string">"乘方"</span>      <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">,</span>    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>store<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>render<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>但是，虽然 <code>API</code> 是异步操作，但 <code>store.dispatch</code> 并不是异步，而 <code>axios</code> 通过 <code>get</code> 方法请求回来数据后，<code>store.dispatch</code> 在 <code>axios</code> 中的 <code>then</code> 方法中同步取得数据。</p><p>如果要使用真正的异步操作，即把 <code>axios</code> 方法封装到 <code>store.dispatch</code> 中，需要使用 <code>redux-thunk</code> 中间件。</p><h4 id="1-redux-thunk"><a href="#1-redux-thunk" class="headerlink" title="1. redux-thunk"></a>1. redux-thunk</h4><p>首先，使用 <code>npm</code> 进行安装：</p><pre class=" language-shell"><code class="language-shell">$ npm install --save redux-thunk</code></pre><p>然后，使用 <code>applyMiddleware</code> 来使用 <code>thunk</code> 中间件:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> createStore<span class="token punctuation">,</span> applyMiddleware <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'redux'</span><span class="token punctuation">;</span><span class="token keyword">import</span> thunk <span class="token keyword">from</span> <span class="token string">'redux-thunk'</span><span class="token punctuation">;</span><span class="token keyword">import</span> rootReducer <span class="token keyword">from</span> <span class="token string">'../reducer'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">createStore</span><span class="token punctuation">(</span>rootReducer<span class="token punctuation">,</span> <span class="token function">applyMiddleware</span><span class="token punctuation">(</span>thunk<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>接着来定义 <code>setNum</code> 这个 <code>action creator</code> ，然后在 <code>index.js</code> 文件的 <code>DOM</code> 加载完成后就发出 <code>setNum</code></p><p><strong>[注意]: </strong>如果 <code>action</code> 是一个对象，则它就是一个 <code>action</code> ，如果 <code>action</code> 是一个函数，则它是一个<code>action creator</code> ，即 <code>action</code> 制造器，修改的代码如下：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// action/math.js</span><span class="token keyword">import</span> <span class="token punctuation">{</span> ADD<span class="token punctuation">,</span> SQUARE<span class="token punctuation">,</span> SET <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'../constants/ActionTypes'</span><span class="token punctuation">;</span><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">'axios'</span><span class="token punctuation">;</span><span class="token keyword">const</span> uri <span class="token operator">=</span> <span class="token string">'https://jsonplaceholder.typicode.com/posts/2'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> add <span class="token operator">=</span> num <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">{</span> type<span class="token punctuation">:</span> ADD<span class="token punctuation">,</span> num <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> square <span class="token operator">=</span> <span class="token punctuation">{</span> type<span class="token punctuation">:</span> SQUARE <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> setNum <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>dispatch<span class="token punctuation">,</span> getState<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> axios<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>uri<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      type<span class="token punctuation">:</span> SET<span class="token punctuation">,</span>      num<span class="token punctuation">:</span> res<span class="token punctuation">.</span>data<span class="token punctuation">.</span>id    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// index.js</span><span class="token keyword">import</span> store <span class="token keyword">from</span> <span class="token string">'./store'</span><span class="token punctuation">;</span><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">'react-dom'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> add<span class="token punctuation">,</span> square<span class="token punctuation">,</span> setNum <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./action/math'</span><span class="token punctuation">;</span><span class="token keyword">const</span> render <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span>  ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>    <span class="token operator">&lt;</span>div store<span class="token operator">=</span><span class="token punctuation">{</span>store<span class="token punctuation">}</span><span class="token operator">></span>      <span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token punctuation">{</span>store<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>math<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>      <span class="token operator">&lt;</span>input        type<span class="token operator">=</span><span class="token string">"button"</span>        onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">setNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span>        value<span class="token operator">=</span><span class="token string">"设置Num"</span>      <span class="token operator">/</span><span class="token operator">></span>      <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"button"</span> onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span> value<span class="token operator">=</span><span class="token string">"+1"</span> <span class="token operator">/</span><span class="token operator">></span>      <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"button"</span> onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span> value<span class="token operator">=</span><span class="token string">"+2"</span> <span class="token operator">/</span><span class="token operator">></span>      <span class="token operator">&lt;</span>input        type<span class="token operator">=</span><span class="token string">"button"</span>        onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span>square<span class="token punctuation">)</span><span class="token punctuation">}</span>        value<span class="token operator">=</span><span class="token string">"乘方"</span>      <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">,</span>    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>store<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>render<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>【提示信息】</p><p>如果做的更完备一点，应该把异步请求时的提示信息也加上。增加一个 <code>fetch</code> 的 <code>action</code>，用于控制<code>fetch</code> 过程的提示信息及显示隐藏情况，代码更改如下</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// action/fetch.js</span><span class="token keyword">import</span> <span class="token punctuation">{</span>  SET_FETCH_MESSAGE<span class="token punctuation">,</span>  HIDE_FETCH_MESSAGE<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'../constants/ActionTypes'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> startFetch <span class="token operator">=</span> <span class="token punctuation">{</span>  type<span class="token punctuation">:</span> SET_FETCH_MESSAGE<span class="token punctuation">,</span>  message<span class="token punctuation">:</span> <span class="token string">'开始发送异步请求'</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> successFetch <span class="token operator">=</span> <span class="token punctuation">{</span>  type<span class="token punctuation">:</span> SET_FETCH_MESSAGE<span class="token punctuation">,</span>  message<span class="token punctuation">:</span> <span class="token string">'成功接收数据'</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> failFetch <span class="token operator">=</span> <span class="token punctuation">{</span> type<span class="token punctuation">:</span> SET_FETCH_MESSAGE<span class="token punctuation">,</span> message<span class="token punctuation">:</span> <span class="token string">'接收数据失败'</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> hideFetchMessage <span class="token operator">=</span> <span class="token punctuation">{</span> type<span class="token punctuation">:</span> HIDE_FETCH_MESSAGE <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// action/math.js</span><span class="token keyword">import</span> <span class="token punctuation">{</span> ADD<span class="token punctuation">,</span> SQUARE<span class="token punctuation">,</span> SET <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'../constants/ActionTypes'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> startFetch<span class="token punctuation">,</span> successFetch<span class="token punctuation">,</span> failFetch<span class="token punctuation">,</span> hideFetchMessage <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./fetch'</span><span class="token punctuation">;</span><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">'axios'</span><span class="token punctuation">;</span><span class="token keyword">const</span> uri <span class="token operator">=</span> <span class="token string">'https://jsonplaceholder.typicode.com/posts/2'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> add <span class="token operator">=</span> num <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">{</span> type<span class="token punctuation">:</span> ADD<span class="token punctuation">,</span> num <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> square <span class="token operator">=</span> <span class="token punctuation">{</span> type<span class="token punctuation">:</span> SQUARE <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> setNum <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>dispatch<span class="token punctuation">,</span> getState<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token function">dispatch</span><span class="token punctuation">(</span>startFetch<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">dispatch</span><span class="token punctuation">(</span>hideFetchMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> axios    <span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>uri<span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token function">dispatch</span><span class="token punctuation">(</span>successFetch<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          <span class="token function">dispatch</span><span class="token punctuation">(</span>hideFetchMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span> type<span class="token punctuation">:</span> SET<span class="token punctuation">,</span> num<span class="token punctuation">:</span> res<span class="token punctuation">.</span>data<span class="token punctuation">.</span>id <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>err <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token function">dispatch</span><span class="token punctuation">(</span>failFetch<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token function">dispatch</span><span class="token punctuation">(</span>hideFetchMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// constants/ActionTypes.js</span><span class="token keyword">export</span> <span class="token keyword">const</span> ADD <span class="token operator">=</span> <span class="token string">'ADD'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> SQUARE <span class="token operator">=</span> <span class="token string">'SQUARE'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> SET <span class="token operator">=</span> <span class="token string">'SET'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> SET_FETCH_MESSAGE <span class="token operator">=</span> <span class="token string">'SET_FETCH_MESSAGE'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> HIDE_FETCH_MESSAGE <span class="token operator">=</span> <span class="token string">'HIDE_FETCH_MESSAGE'</span><span class="token punctuation">;</span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// reduce/fetch.js</span><span class="token keyword">import</span> <span class="token punctuation">{</span>  SET_FETCH_MESSAGE<span class="token punctuation">,</span>  HIDE_FETCH_MESSAGE<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'../constants/ActionTypes'</span><span class="token punctuation">;</span><span class="token keyword">const</span> initState <span class="token operator">=</span> <span class="token punctuation">{</span>  message<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>  isShow<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> fetch <span class="token operator">=</span> <span class="token punctuation">(</span>state <span class="token operator">=</span> initState<span class="token punctuation">,</span> action<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">switch</span> <span class="token punctuation">(</span>action<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> SET_FETCH_MESSAGE<span class="token punctuation">:</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span> isShow<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> message<span class="token punctuation">:</span> action<span class="token punctuation">.</span>message <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> HIDE_FETCH_MESSAGE<span class="token punctuation">:</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span> isShow<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> message<span class="token punctuation">:</span> <span class="token string">''</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">default</span><span class="token punctuation">:</span>      <span class="token keyword">return</span> state<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> fetch<span class="token punctuation">;</span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// index.js</span><span class="token keyword">import</span> store <span class="token keyword">from</span> <span class="token string">'./store'</span><span class="token punctuation">;</span><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">'react-dom'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> add<span class="token punctuation">,</span> square<span class="token punctuation">,</span> setNum <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./action/math'</span><span class="token punctuation">;</span><span class="token keyword">const</span> render <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span>  ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>    <span class="token operator">&lt;</span>div store<span class="token operator">=</span><span class="token punctuation">{</span>store<span class="token punctuation">}</span><span class="token operator">></span>      <span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token punctuation">{</span>store<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>math<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>      <span class="token operator">&lt;</span>input        type<span class="token operator">=</span><span class="token string">"button"</span>        onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">setNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span>        value<span class="token operator">=</span><span class="token string">"设置Num"</span>      <span class="token operator">/</span><span class="token operator">></span>      <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"button"</span> onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span> value<span class="token operator">=</span><span class="token string">"+1"</span> <span class="token operator">/</span><span class="token operator">></span>      <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"button"</span> onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span> value<span class="token operator">=</span><span class="token string">"+2"</span> <span class="token operator">/</span><span class="token operator">></span>      <span class="token operator">&lt;</span>input        type<span class="token operator">=</span><span class="token string">"button"</span>        onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span>square<span class="token punctuation">)</span><span class="token punctuation">}</span>        value<span class="token operator">=</span><span class="token string">"乘方"</span>      <span class="token operator">/</span><span class="token operator">></span>      <span class="token punctuation">{</span>store<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>fetch<span class="token punctuation">.</span>isShow <span class="token operator">&amp;&amp;</span> <span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token punctuation">{</span>store<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>fetch<span class="token punctuation">.</span>message<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">,</span>    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>store<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>render<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="六、React-Redux-基础知识点"><a href="#六、React-Redux-基础知识点" class="headerlink" title="六、React-Redux 基础知识点"></a>六、React-Redux 基础知识点</h3><p>前面的代码中，我们是通过 <code>store.subscribe()</code> 方法监控 <code>state</code> 状态的变化来更新 <code>UI</code> 层的。而使用 <code>react-redux</code>，可以让组件动态订阅状态树。状态树一旦被修改，组件能自动刷新显示最新数据。</p><p><code>react-redux</code> 将所有组件分成两大类：展示组件和容器组件。展示组件只负责 <code>UI</code> 呈现，所有数据由参数 <code>props</code> 提供；容器组件则负责管理数据和业务逻辑，带有内部状态，可使用 <code>redux</code> 的 <code>API</code> 。要使用 <code>react-redux</code>，就要遵守它的组件拆分规范。</p><h4 id="1-provider"><a href="#1-provider" class="headerlink" title="1. provider"></a>1. provider</h4><p><code>react-redux</code> 提供 <code>Provider</code> 组件，可以让容器组件默认可以拿到 <code>state</code>，而不用当容器组件层级很深时，一级级将 <code>state</code> 传下去。</p><p>将 <code>index.js</code> 文件更改如下：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// index.js</span><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">'react-dom'</span><span class="token punctuation">;</span><span class="token keyword">import</span> store <span class="token keyword">from</span> <span class="token string">'./store'</span><span class="token punctuation">;</span><span class="token keyword">import</span> MathContainer <span class="token keyword">from</span> <span class="token string">'./container/MathContainer'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> Provider <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react-redux'</span><span class="token punctuation">;</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>  <span class="token operator">&lt;</span>Provider store<span class="token operator">=</span><span class="token punctuation">{</span>store<span class="token punctuation">}</span><span class="token operator">></span>    <span class="token operator">&lt;</span>MathContainer <span class="token operator">/</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>Provider<span class="token operator">></span><span class="token punctuation">,</span>  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>按照组件拆分规范，将原来 <code>index.js</code> 中相关代码，分拆到 <code>container/MathContainer</code> 和 <code>component/Math</code> 这两个组件中。</p><h4 id="2-connect"><a href="#2-connect" class="headerlink" title="2. connect"></a>2. connect</h4><p><code>react-redux</code> 提供 <code>connect</code> 方法，用于从展示组件生成容器组件。<code>connect</code> 的意思就是将这两种组件(容器组件和展示组件)连接起来：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> connect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react-redux'</span><span class="token punctuation">;</span><span class="token keyword">const</span> MathContainer <span class="token operator">=</span> <span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span>Math<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><code>Math</code> 是展示组件，<code>MathContainer</code> 就是由 <code>React-redux</code> 通过 <code>connect</code> 方法自动生成的容器组件.</p><p>为了定义业务逻辑，需要给出下面两方面的信息：</p><ul><li><p>输入逻辑：外部的数据(即<code>state</code>对象)如何转换为展示组件的参数</p></li><li><p>输出逻辑：用户发出的动作如何变为 <code>Action</code> 对象，从展示组件传出去</p></li></ul><p>因此，<code>connect</code> 方法的完整 <code>API</code> 如下:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> connect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react-redux'</span><span class="token punctuation">;</span><span class="token keyword">const</span> MathContainer <span class="token operator">=</span> <span class="token function">connect</span><span class="token punctuation">(</span>  mapStateToProps<span class="token punctuation">,</span>  mapDispatchToProps<span class="token punctuation">)</span><span class="token punctuation">(</span>Math<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>上面代码中，<code>connect</code> 方法接受两个参数：<code>mapStateToProps</code> 和 <code>mapDispatchToProps</code>。它们定义了展示组件的业务逻辑。前者负责输入逻辑，即将 <code>state</code> 映射到 <code>UI</code> 组件的参数(<code>props</code>)，后者负责输出逻辑，即将用户对展示组件的操作映射成 <code>Action</code>，下面分别介绍这两个参数。</p><h4 id="3-mapStateToProps"><a href="#3-mapStateToProps" class="headerlink" title="3. mapStateToProps()"></a>3. mapStateToProps()</h4><p><code>mapStateToProps</code> 建立一个从外部的 <code>state</code> 对象到展示组件的 <code>props</code> 对象的映射关系。作为参数，<code>mapStateToProps</code> 执行后应该返回一个对象，里面的每一个键值对就是一个映射。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> mapStateToProps <span class="token operator">=</span> state <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span>    num<span class="token punctuation">:</span> <span class="token function">getNum</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p><code>mapStateToProps</code> 的第一个参数总是 <code>state</code> 对象，还可以使用第二个参数，代表容器组件的 <code>props</code> 对象。使用 <code>ownProps</code> 作为参数后，如果容器组件的参数发生变化，也会引发展示组件重新渲染。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> mapStateToProps <span class="token operator">=</span> <span class="token punctuation">(</span>state<span class="token punctuation">,</span> ownProps<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span>    num<span class="token punctuation">:</span> <span class="token function">getNum</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p><code>mapStateToProps</code> 会订阅 <code>Store</code> ，每当 <code>state</code> 更新的时候，就会自动执行，重新计算展示组件的参数，从而触发展示组件的重新渲染。<code>connect</code> 方法可以省略 <code>mapStateToProps</code> 参数，那样，展示组件就不会订阅 <code>Store</code>，就是说 <code>Store</code> 的更新不会引起展示组件的更新。</p><h4 id="4-mapDispatchToProps"><a href="#4-mapDispatchToProps" class="headerlink" title="4. mapDispatchToProps"></a>4. mapDispatchToProps</h4><p><code>mapDispatchToProps</code> 是 <code>connect</code> 函数的第二个参数，用来建立展示组件的参数到 <code>store.dispatch</code> 方法的映射。也就是说，它定义了用户的哪些操作应该当作 <code>action</code> ，传给 <code>Store</code> 。它可以是一个函数，也可以是一个对象。</p><p>如果 <code>mapDispatchToProps</code> 是一个函数，会得到 <code>dispatch</code> 和 <code>ownProps</code> (容器组件的 <code>props</code> 对象)两个参数。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> mapDispatchToProps <span class="token operator">=</span> <span class="token punctuation">(</span>dispatch<span class="token punctuation">,</span> ownProps<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span>    onSetNumClick<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">setNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p><code>mapDispatchToProps</code> 作为函数，应该返回一个对象，该对象的每个键值对都是一个映射，定义了展示组件的参数怎样发出 <code>action</code>。</p><p>如果 <code>mapDispatchToProps</code> 是一个对象，它的每个键名也是对应展示组件的同名参数，键值应该是一个函数，会被当作 <code>action creator</code>，返回的 <code>action</code> 会由 <code>redux</code> 自动发出。</p><p>因此，上面的写法简写如下所示：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> mapDispatchToProps <span class="token operator">=</span> <span class="token punctuation">{</span>  onsetNumClick<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">setNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>所以，最终的目录结构就变成下面这个样子（你也可以把 <code>store.js</code> 放在单独的 <code>store</code> 文件夹里面）：</p><p><img src="../../ImageHosting/React/redux-folder-structure.png" alt="目录结构"></p>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> Redux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React 基础知识</title>
      <link href="/react-basic/"/>
      <url>/react-basic/</url>
      
        <content type="html"><![CDATA[<!-- ## React 基础知识点讲解 --><h3 id="零、介绍"><a href="#零、介绍" class="headerlink" title="零、介绍"></a>零、介绍</h3><p><code>React.js</code> 是一个帮助你构建页面 <code>UI</code> 的库。如果你熟悉 <code>MVC</code> 概念的话，那么 <code>React</code> 的组件就相当于 <code>MVC</code> 里面的 <code>View</code>。如果你不熟悉也没关系，你可以简单地理解为，<code>React.js</code>将帮助我们将界面分成了各个独立的小块，每一个块就是组件，这些组件之间可以组合、嵌套，就成了我们的页面。</p><p>一个组件的显示形态和行为有可能是由某些数据决定的。而数据是可能发生改变的，这时候组件的显示形态就会发生相应的改变。而 <code>React.js</code> 也提供了一种非常高效的方式帮助我们做到了数据和组件显示形态之间的同步。</p><p>React.js 不是一个框架，它只是一个库。它只提供 <code>UI （view</code>）层面的解决方案。在实际的项目当中，它并不能解决我们所有的问题，需要结合其它的库，例如 <code>Redux</code>、<code>React-router</code> 等来协助提供完整的解决方法。</p><a id="more"></a><h3 id="一、Hello-World"><a href="#一、Hello-World" class="headerlink" title="一、Hello World"></a>一、Hello World</h3><p><code>create-react-app</code> 是来自于 <code>Facebook</code> 出品的零配置命令行工具，能够帮你自动创建基于<code>jpgack+ES6</code> 的最简易的 <code>React</code> 项目模板。</p><pre class=" language-shell"><code class="language-shell">npm install -g create-react-appcreate-react-app my-appcd my-app/npm start</code></pre><p>执行完上述命令之后，你可以直接打开 <a href="http://localhost:3000，即可以看到你" target="_blank" rel="noopener">http://localhost:3000，即可以看到你</a> <code>React APP</code> 的运行效果：</p><p><img src="../../ImageHosting/React/create-react-app.png" alt="create-react-app"></p><p><strong>目录结构：</strong></p><pre><code>my-app├── README.md├── node_modules├── package.json├── .gitignore├── public│   ├── favicon.ico│   ├── index.html│   └── manifest.json└── src    ├── App.css    ├── App.js    ├── App.test.js    ├── index.css    ├── index.js    ├── logo.svg    └── serviceWorker.js</code></pre><p>一个简单 <code>Hello World</code> 的例子：</p><pre class=" language-jsx"><code class="language-jsx">ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello<span class="token punctuation">,</span> world<span class="token operator">!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="二、JSX-简介"><a href="#二、JSX-简介" class="headerlink" title="二、JSX 简介"></a>二、JSX 简介</h3><p><code>JSX —— React.js</code> 描述页面 <code>UI</code> 的方式。看起来，<code>JSX</code> 有点像模板语言，其实它是由 <code>React</code> 内部实现的。浏览器中，看到的 JSX 内容转换成 <code>html</code> 显示了出来。</p><h4 id="1、在-JSX-中使用表达式"><a href="#1、在-JSX-中使用表达式" class="headerlink" title="1、在 JSX 中使用表达式"></a>1、在 JSX 中使用表达式</h4><p><code>index.js</code> :</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">'react-dom'</span><span class="token punctuation">;</span><span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token punctuation">{</span>  firstName<span class="token punctuation">:</span> <span class="token string">'React'</span><span class="token punctuation">,</span>  lastName<span class="token punctuation">:</span> <span class="token string">'Hello'</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> formatName <span class="token operator">=</span> user <span class="token operator">=</span><span class="token operator">></span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>user<span class="token punctuation">.</span>firstName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">  </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>user<span class="token punctuation">.</span>lastName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">;</span><span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token function">formatName</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token punctuation">;</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>推荐在 JSX 代码的外面扩上一个小括号，这样可以防止 <a href="http://stackoverflow.com/q/2846283" target="_blank" rel="noopener">分号自动插入</a> 的 <code>bug</code>。</p><h4 id="2、JSX-本身其实也是一种表达式"><a href="#2、JSX-本身其实也是一种表达式" class="headerlink" title="2、JSX 本身其实也是一种表达式"></a>2、JSX 本身其实也是一种表达式</h4><p>在编译之后，<code>JSX</code> 其实会被转化为普通的 <code>JavaScript</code> 对象。那就可以在 <code>if</code> 或者 <code>for</code> 语句里使用 <code>JSX</code>，将它赋值给变量，当作参数传入，作为返回值也可以：</p><p><code>index.js</code>：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">'react-dom'</span><span class="token punctuation">;</span><span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token punctuation">{</span>  firstName<span class="token punctuation">:</span> <span class="token string">'E2E'</span><span class="token punctuation">,</span>  lastName<span class="token punctuation">:</span> <span class="token string">'team'</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> formatName <span class="token operator">=</span> user <span class="token operator">=</span><span class="token operator">></span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>user<span class="token punctuation">.</span>firstName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">  </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>user<span class="token punctuation">.</span>lastName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">;</span><span class="token keyword">const</span> getGreeting <span class="token operator">=</span> user <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>user<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token function">formatName</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello<span class="token punctuation">,</span> Stranger<span class="token punctuation">.</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">{</span><span class="token function">getGreeting</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">;</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="3、JSX-嵌套"><a href="#3、JSX-嵌套" class="headerlink" title="3、JSX 嵌套"></a>3、JSX 嵌套</h4><p>如果 <code>JSX</code> 标签是闭合式的，那么你需要在结尾处用 <code>/&gt;</code>, 就好像 XML/HTML 一样：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>user<span class="token punctuation">.</span>avatarUrl<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span></code></pre><p>JSX 标签同样可以相互嵌套：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token punctuation">(</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>头像<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token function">formatName</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>注意：多行的 jsx 要用小括号包裹，里面如果有多个 <code>DOM</code> 节点，也需要用一个 <code>DOM</code> 节点包裹起来，所以这里加了最外面的 <code>div</code> 。</p><h4 id="4、JSX-属性"><a href="#4、JSX-属性" class="headerlink" title="4、JSX 属性"></a>4、JSX 属性</h4><ul><li>可以使用引号来定义以字符串为值的属性：</li></ul><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">tabIndex</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span></code></pre><p>注意：由于相对<code>HTML</code> 而言，<code>JSX</code> 更加类似于<code>JavaScript</code>, <code>React DOM</code> 使用驼峰命名代替<code>HTML</code>中的属性名。</p><ul><li>也可以使用大括号来定义以 <code>JavaScript</code> 表达式为值的属性：</li></ul><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>user<span class="token punctuation">.</span>avatarUrl<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span></code></pre><p>注意：使用了大括号包裹的 <code>JavaScript</code> 表达式时就不能再到外面套引号了，JSX 会将引号中的内容识别为字符串而不是表达式。</p><h4 id="5、JSX-能够防注入攻击"><a href="#5、JSX-能够防注入攻击" class="headerlink" title="5、JSX 能够防注入攻击"></a>5、JSX 能够防注入攻击</h4><pre class=" language-jsx"><code class="language-jsx"><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> content <span class="token operator">=</span> <span class="token string">'First &amp;middot; &lt;i>Second&lt;/i>'</span>    <span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">{</span>content<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token keyword">return</span> element<span class="token punctuation">}</span></code></pre><p>也就是在执行渲染前，<code>React DOM</code> 会默认将要显示的内容中有任何的标签或者脚本都会进行转义编码，按照字符串直接显示出来。 这可以避免应用被注入，可以避免<code>XSS</code>攻击。所以可以放心地在<code>JSX</code> 当中使用用户输入。</p><p>如果需要按照 <code>html</code> 显示的内容，可以使用 <code>dangerouslySetInnerHTML</code> 来实现。</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">dangerouslySetInnerHTML</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> __html<span class="token punctuation">:</span> content <span class="token punctuation">}</span><span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span></code></pre><h4 id="6、JSX-代表-Objects"><a href="#6、JSX-代表-Objects" class="headerlink" title="6、JSX 代表 Objects"></a>6、JSX 代表 Objects</h4><p><code>Babel</code> 转译器会把 <code>JSX</code> 转换成一个名为 <code>React.createElement()</code> 的方法调用。</p><p>下面两种代码的作用是完全相同的：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>greeting<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Hello<span class="token punctuation">,</span> world<span class="token operator">!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token punctuation">;</span></code></pre><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">const</span> element <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>  <span class="token string">'h1'</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span> className<span class="token punctuation">:</span> <span class="token string">'greeting'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token string">'Hello, world!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><code>React.createElement()</code> 这个方法首先会进行一些避免 bug 的检查，之后会返回一个类似下面例子中的对象：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token comment" spellcheck="true">// 注意: 以下示例是简化过的（不代表在 React 源码中是这样）</span><span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token punctuation">{</span>  type<span class="token punctuation">:</span> <span class="token string">'h1'</span><span class="token punctuation">,</span>  props<span class="token punctuation">:</span> <span class="token punctuation">{</span>    className<span class="token punctuation">:</span> <span class="token string">'greeting'</span><span class="token punctuation">,</span>    children<span class="token punctuation">:</span> <span class="token string">'Hello, world'</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>这样的对象被称为 <strong>React 元素</strong>。它代表所有可以在屏幕上看到的东西。<code>React</code> 通过读取这些对象来构建 <code>DOM</code> 并保持数据内容一致。</p><h3 id="三、元素"><a href="#三、元素" class="headerlink" title="三、元素"></a>三、元素</h3><p>元素（ <code>element</code> ）是一个 <code>React</code> 应用的最小组成单元。</p><h4 id="1、将元素渲染到-DOM-中"><a href="#1、将元素渲染到-DOM-中" class="headerlink" title="1、将元素渲染到 DOM 中"></a>1、将元素渲染到 DOM 中</h4><p><code>index.js</code></p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">'react-dom'</span><span class="token punctuation">;</span><span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello<span class="token punctuation">,</span> world<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token punctuation">;</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这里 <code>element</code> 就是一个元素， 元素描述了我们在屏幕上会看到什么。<code>React</code> 元素不是组件，组件由元素构成。</p><p>可以通过 <code>ReactDOM.render</code> 把元素渲染到 <code>DOM</code> 中，<code>id</code> 为 <code>root</code> 的这个节点在 <code>index.html</code> 中。</p><p>浏览器中，可以看到 <code>element</code> 元素显示到了页面上。</p><h4 id="2、React-只会更新必要的内容"><a href="#2、React-只会更新必要的内容" class="headerlink" title="2、React 只会更新必要的内容"></a>2、React 只会更新必要的内容</h4><p><code>Index.js</code> :</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">'react-dom'</span><span class="token punctuation">;</span><span class="token keyword">const</span> tick <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello<span class="token punctuation">,</span> world<span class="token operator">!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>It is <span class="token punctuation">{</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLocaleTimeString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span>  ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">setInterval</span><span class="token punctuation">(</span>tick<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><img src="../../ImageHosting/React/granular-dom-updates.gif" alt="更新必要部分"></p><h3 id="四、组件-amp-Props"><a href="#四、组件-amp-Props" class="headerlink" title="四、组件&amp;Props"></a>四、组件&amp;Props</h3><p>组件（ components ）可以让我们把 UI 分割成独立的可以复用的片段。概念上来讲，组件类似于 JS 的函数，它接收任意的输入（也就是 props ，属性），返回 React 元素。</p><h4 id="1、函数式组件"><a href="#1、函数式组件" class="headerlink" title="1、函数式组件"></a>1、函数式组件</h4><p>定义一个组件最简单的方式是写一个 JS 的函数：</p><p><code>index.js</code> :</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">'react-dom'</span><span class="token punctuation">;</span><span class="token keyword">const</span> Welcome <span class="token operator">=</span> props <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello<span class="token punctuation">,</span> <span class="token punctuation">{</span>props<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Welcome</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Sara<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这个函数就是一个完整的 React 组件，因为它接收一个 props 对象作为参数，返回一个 React 元素。这样的组件叫做函数式组件。</p><h4 id="2、class-式组件"><a href="#2、class-式组件" class="headerlink" title="2、class 式组件"></a>2、class 式组件</h4><p>另外一个定义组件的方式就是使用 ES6 的 class：</p><p><code>index.js</code>：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">'react-dom'</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Welcome</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Welcome</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Sara<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>从 React 的角度，上面两个组件是等价的。不过 class 式组件功能会多一些。</p><h4 id="3、组件的组合"><a href="#3、组件的组合" class="headerlink" title="3、组件的组合"></a>3、组件的组合</h4><p>组件可以在它的输出中引用其它组件，这就可以让我们用同一组件来抽象出任意层次的细节。在 React 应用中，按钮、表单、对话框、整个屏幕的内容等，这些通常都被表示为组件。</p><p>例如，我们可以创建一个<code>App</code>组件，用来多次渲染<code>Welcome</code>组件：</p><p><code>index.js</code>：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">'react-dom'</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Welcome</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> App <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Welcome</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Sara<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Welcome</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Cahal<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Welcome</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Edite<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>App</span> <span class="token punctuation">/></span></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>浏览器中，显示了三个 <code>Welcome</code> 。</p><h3 id="五、State-amp-生命周期"><a href="#五、State-amp-生命周期" class="headerlink" title="五、State&amp;生命周期"></a>五、State&amp;生命周期</h3><h4 id="1、class-式组件中才能用-state"><a href="#1、class-式组件中才能用-state" class="headerlink" title="1、class 式组件中才能用 state"></a>1、class 式组件中才能用 state</h4><p><code>class</code> 式组件要比函数式组件功能多，使用 <code>state</code> 就是只能用在 <code>class</code> 式组件中的功能。</p><p><code>index.js</code> :</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">'react-dom'</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Clock</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span> date<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello<span class="token punctuation">,</span> world<span class="token operator">!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>It is <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>date<span class="token punctuation">.</span><span class="token function">toLocaleTimeString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Clock</span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><code>Clock</code> 是一个 <code>class</code> 式组件。里面初始化了 <code>state</code> 值。然后 <code>render</code> 函数中，显示出了这个 <code>state</code> 值。</p><h4 id="2、给-class-添加生命周期方法"><a href="#2、给-class-添加生命周期方法" class="headerlink" title="2、给 class 添加生命周期方法"></a>2、给 class 添加生命周期方法</h4><p>每当 <code>Clock</code> 组件第一次加载到 <code>DOM</code> 中的时候，我们都想<a href="https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/setInterval" target="_blank" rel="noopener">生成定时器</a>，这在 <code>React</code> 中被称为<code>挂载</code></p><p>同样，每当 <code>Clock</code> 生成的这个 <code>DOM</code> 被移除的时候，我们也会想要<a href="https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/clearInterval" target="_blank" rel="noopener">清除定时器</a>，这在 <code>React</code> 中被称为<code>卸载</code>。</p><p><code>index.js</code>：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">'react-dom'</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Clock</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span> date<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>timerID <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>tick<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">componentWillUnmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">clearInterval</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>timerID<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  tick <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      date<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello<span class="token punctuation">,</span> World<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>It is <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>date<span class="token punctuation">.</span><span class="token function">toLocaleTimeString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Clock</span> <span class="token punctuation">/></span></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>组件初次渲染之后，会自动执行 <code>componentDidMount</code> 这个生命周期方法，这里面我们设置一个定时器，每秒钟执行一下 <code>tick</code> 方法。这里把定时器 <code>id</code> 赋值给了 <code>this.timerID</code> 。</p><p>组件被从 <code>DOM</code> 移除的时候，会自动执行 <code>componentWillUnmount</code> ，这里面我们需要清除一下定时器，释放资源。</p><p>来定义关键的 <code>tick</code> 函数，里面的关键动作就是更新 <code>state</code> 值。注意一定要用 <code>this.setState</code> 来更新。</p><p>浏览器中，可以看到每秒钟界面显示时间都会更新。</p><h3 id="六、事件处理"><a href="#六、事件处理" class="headerlink" title="六、事件处理"></a>六、事件处理</h3><h4 id="1、基本用法"><a href="#1、基本用法" class="headerlink" title="1、基本用法"></a>1、基本用法</h4><p>React 元素的事件处理和 DOM 元素的很相似。但是有一点语法上的不同:</p><ul><li>React 事件绑定属性的命名采用驼峰式写法，而不是小写；</li><li>如果采用 JSX 的语法，需要传入一个函数作为事件处理函数(<strong>推荐使用 ES6 的箭头函数</strong>)，而不是一个字符串(DOM 元素的写法)。</li></ul><p><code>index.js</code> :</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">'react-dom'</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Toggle</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span> isToggleOn<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// This binding is necessary to make `this` work in the callback</span>    <span class="token comment" spellcheck="true">// this.handleClick = this.handleClick.bind(this);</span>  <span class="token punctuation">}</span>  handleClick <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span>prevState <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>      isToggleOn<span class="token punctuation">:</span> <span class="token operator">!</span>prevState<span class="token punctuation">.</span>isToggleOn    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleClick<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>        <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>isToggleOn <span class="token operator">?</span> <span class="token string">'ON'</span> <span class="token punctuation">:</span> <span class="token string">'OFF'</span><span class="token punctuation">}</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Toggle</span> <span class="token punctuation">/></span></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>注意</strong>：类的方法默认是不会<a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_objects/Function/bind" target="_blank" rel="noopener">绑定</a> <code>this</code> 的。可以将 <code>handleClick</code> 直接赋值为一个 <code>es6</code> 箭头函数，这样的好处是里面直接使用 <code>this</code> 而无需绑定。由于 <code>this.setState</code> 的异步性，所以参数不能传入对象，而要传入一个函数，才能稳妥的基于之前的状态来获得最新状态值。</p><h4 id="2、给事件处理函数传参"><a href="#2、给事件处理函数传参" class="headerlink" title="2、给事件处理函数传参"></a>2、给事件处理函数传参</h4><p>通常我们会为事件处理程序传递额外的参数。例如，若是 <code>id</code> 是你要删除那一行的 <code>id</code>：</p><p><code>index.js</code> :</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">'react-dom'</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">List</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>  deleteRow <span class="token operator">=</span> id <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">deleteRow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>Delete Row<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>List</span> <span class="token punctuation">/></span></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>比如有一个列表，这里封装成 List 组件。里面 <code>deleteRow</code> 需要接受行号，这里就是 id ，才能知道要删除哪一行的内容。</p><p>如果 <code>deleteRow</code> 中，还想要事件对象：</p><pre class=" language-jsx"><code class="language-jsx">  deleteRow <span class="token operator">=</span> <span class="token punctuation">(</span>id<span class="token punctuation">,</span> e<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>e <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">deleteRow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>Delete Row<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>  <span class="token punctuation">}</span></code></pre><p><code>ES6</code> 参数中拿到 <code>e</code> ，把它作为第二个参数传递给 <code>deleteRow</code> 即可。</p><h3 id="七、条件渲染"><a href="#七、条件渲染" class="headerlink" title="七、条件渲染"></a>七、条件渲染</h3><p>在 <code>React</code> 中，你可以创建不同的组件来封装各种你需要的行为。然后还可以根据应用的状态变化只渲染其中的一部分。</p><p><code>React</code> 中的条件渲染和 <code>JavaScript</code> 中的一致，使用 <code>JavaScript</code> 操作符 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/if...else" target="_blank" rel="noopener"><code>if</code></a> 或<a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Conditional_Operator" target="_blank" rel="noopener">条件运算符</a>来创建表示当前状态的元素，然后让 <code>React</code> 根据它们来更新 <code>UI</code>。</p><h4 id="1、if-条件渲染"><a href="#1、if-条件渲染" class="headerlink" title="1、if 条件渲染"></a>1、if 条件渲染</h4><p><code>index.js</code> :</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">'react-dom'</span><span class="token punctuation">;</span><span class="token keyword">const</span> UserGreeting <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Welcome back<span class="token operator">!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token punctuation">;</span><span class="token keyword">const</span> GuestGreeting <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Please sign up<span class="token punctuation">.</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token punctuation">;</span><span class="token keyword">const</span> Greeting <span class="token operator">=</span> props <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> isLoggedIn <span class="token operator">=</span> props<span class="token punctuation">.</span>isLoggedIn<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>isLoggedIn<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>UserGreeting</span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>GuestGreeting</span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Greeting</span> <span class="token attr-name">isLoggedIn</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token boolean">true</span><span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">,</span>  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>先定义两个函数式组件，一个是跟已经登陆的用户打招呼，另一个跟访客打招呼。下面定义 <code>Greeting</code> 组件。随着 <code>isLoggedIn</code> 的值的不同，会显示出不同的内容。</p><p>浏览器中，当 <code>isLoggedIn</code> 设置为 <code>true</code> 和 <code>false</code> ，会分别显示不同的打招呼信息。</p><h4 id="2、元素变量"><a href="#2、元素变量" class="headerlink" title="2、元素变量"></a>2、元素变量</h4><p>你可以使用变量来储存元素。它可以帮助你有条件的渲染组件的一部分，而输出的其他部分不会更改。</p><p><code>index.js</code> :</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">'react-dom'</span><span class="token punctuation">;</span><span class="token keyword">const</span> UserGreeting <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Welcome Back<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token punctuation">;</span><span class="token keyword">const</span> GuestGreeting <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Please Sign Up<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token punctuation">;</span><span class="token keyword">const</span> LoginButton <span class="token operator">=</span> props <span class="token operator">=</span><span class="token operator">></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>onClick<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>Login<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token punctuation">;</span><span class="token keyword">const</span> LogoutButton <span class="token operator">=</span> props <span class="token operator">=</span><span class="token operator">></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>onClick<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>Logout<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token punctuation">;</span><span class="token keyword">const</span> Greeting <span class="token operator">=</span> props <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">{</span> isLoggedIn <span class="token punctuation">}</span> <span class="token operator">=</span> props<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>isLoggedIn<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>UserGreeting</span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>GuestGreeting</span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">LoginControl</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>  state <span class="token operator">=</span> <span class="token punctuation">{</span>    isLoggedIn<span class="token punctuation">:</span> <span class="token boolean">false</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  handleLoginClick <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      isLoggedIn<span class="token punctuation">:</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  handleLogoutClick <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      isLoggedIn<span class="token punctuation">:</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span> isLoggedIn <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">;</span>    <span class="token keyword">let</span> button <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>isLoggedIn<span class="token punctuation">)</span> <span class="token punctuation">{</span>      button <span class="token operator">=</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LogoutButton</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleLogoutClick<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      button <span class="token operator">=</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LoginButton</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleLoginClick<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Greeting</span> <span class="token attr-name">isLoggedIn</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>isLoggedIn<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>        <span class="token punctuation">{</span>button<span class="token punctuation">}</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LoginControl</span> <span class="token punctuation">/></span></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>添加两个按钮组件进来，一个是登录，一个是登出。创建一个 <code>LoginControl</code> 组件，初始化 <code>isLoggedIn</code> ，添加登录和登出对应的处理函数，里面对 <code>isLoggedIn</code> 状态值进行了修改。</p><h4 id="3、与运算符-amp-amp"><a href="#3、与运算符-amp-amp" class="headerlink" title="3、与运算符 &amp;&amp;"></a>3、与运算符 &amp;&amp;</h4><p><code>JavaScript</code> 的逻辑与 <code>&amp;&amp;</code>，它可以方便地条件渲染一个元素。</p><p><code>index.js</code> :</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">'react-dom'</span><span class="token punctuation">;</span><span class="token keyword">const</span> Mailbox <span class="token operator">=</span> props <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">{</span> unreadMessages <span class="token punctuation">}</span> <span class="token operator">=</span> props<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello<span class="token operator">!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>      <span class="token punctuation">{</span>unreadMessages<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>You have <span class="token punctuation">{</span>unreadMessages<span class="token punctuation">.</span>length<span class="token punctuation">}</span> unread messages<span class="token punctuation">.</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>      <span class="token punctuation">)</span><span class="token punctuation">}</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> messages <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'React'</span><span class="token punctuation">,</span> <span class="token string">'Re: React'</span><span class="token punctuation">,</span> <span class="token string">'Re:Re: React'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Mailbox</span> <span class="token attr-name">unreadMessages</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>messages<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">,</span>  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>定义 <code>Mailbox</code> 组件，属性中拿到未读邮件的数组，下面用 <code>&amp;&amp;</code> 号实现 <code>if</code> 的效果，如果未读邮件数量大于 0，就显示未读邮件的数量；如果数量为 0，那么大括号里面内容就求值为 <code>undefined</code> ，也就是什么都不会显示了。</p><h4 id="4、三目运算符"><a href="#4、三目运算符" class="headerlink" title="4、三目运算符"></a>4、三目运算符</h4><p>在下面的例子中，我们用它来有条件的渲染一小段文本：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> isLoggedIn <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>isLoggedIn<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>      The user is <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">></span></span><span class="token punctuation">{</span>isLoggedIn <span class="token operator">?</span> <span class="token string">'currently'</span> <span class="token punctuation">:</span> <span class="token string">'not'</span><span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">></span></span> logged <span class="token keyword">in</span><span class="token punctuation">.</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>同样它也可以用在较大的表达式中：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> isLoggedIn <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>isLoggedIn<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>      <span class="token punctuation">{</span>isLoggedIn <span class="token operator">?</span> <span class="token punctuation">(</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LogoutButton</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleLogoutClick<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>      <span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token punctuation">(</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LoginButton</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleLoginClick<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>      <span class="token punctuation">)</span><span class="token punctuation">}</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="5、阻止组件渲染"><a href="#5、阻止组件渲染" class="headerlink" title="5、阻止组件渲染"></a>5、阻止组件渲染</h4><p>在极少数情况下，你可能希望隐藏组件，即使它被其他组件渲染。让 <code>render</code> 方法返回 <code>null</code> 而不是它的渲染结果即可实现。</p><p><code>index.js</code> :</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">'react-dom'</span><span class="token punctuation">;</span><span class="token keyword">const</span> WarningBanner <span class="token operator">=</span> props <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>props<span class="token punctuation">.</span>warn<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>warning<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Warning<span class="token operator">!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Page</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span> showWarning<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  handleToggleClick <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      showWarning<span class="token punctuation">:</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>showWarning    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>WarningBanner</span> <span class="token attr-name">warn</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>showWarning<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleToggleClick<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>          <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>showWarning <span class="token operator">?</span> <span class="token string">'Hide'</span> <span class="token punctuation">:</span> <span class="token string">'Show'</span><span class="token punctuation">}</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Page</span> <span class="token punctuation">/></span></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="八、列表-amp-Keys"><a href="#八、列表-amp-Keys" class="headerlink" title="八、列表 &amp; Keys"></a>八、列表 &amp; Keys</h3><h4 id="1、渲染多个组件"><a href="#1、渲染多个组件" class="headerlink" title="1、渲染多个组件"></a>1、渲染多个组件</h4><p>先看下在 <code>Javascript</code> 中如何转化列表：</p><p>我们使用 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map" target="_blank" rel="noopener"><code>map()</code></a>函数让数组中的每一项翻倍,我们得到了一个新的数列<code>doubled</code></p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> doubled <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>number <span class="token operator">=</span><span class="token operator">></span> number <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>doubled<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>在 <code>React</code>中，把数组转化为数列元素的过程是相似的：</p><p><code>index.js</code> :</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">'react-dom'</span><span class="token punctuation">;</span><span class="token keyword">const</span> messages <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'hello'</span><span class="token punctuation">,</span> <span class="token string">'hi'</span><span class="token punctuation">,</span> <span class="token string">'how are you'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> List <span class="token operator">=</span> props <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">{</span> messages <span class="token punctuation">}</span> <span class="token operator">=</span> props<span class="token punctuation">;</span>  <span class="token keyword">const</span> list <span class="token operator">=</span> messages<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>t <span class="token operator">=</span><span class="token operator">></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token punctuation">{</span>t<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span><span class="token punctuation">{</span>list<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>List</span> <span class="token attr-name">messages</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>messages<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>注：此时打开浏览器控制台会有报错信息：<code>Warning: Each child in an array or iterator should have a unique &quot;key&quot; prop.</code> 。原因是每一个列表条目都应该有一个独一无二的 <code>key</code> 。</p><h4 id="2、Key"><a href="#2、Key" class="headerlink" title="2、Key"></a>2、Key</h4><p>把数据的 id 作为 key 是非常常见的做法：</p><p><code>index.js</code> ：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">'react-dom'</span><span class="token punctuation">;</span><span class="token keyword">const</span> messages <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">{</span>    id<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    text<span class="token punctuation">:</span> <span class="token string">'React'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    id<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    text<span class="token punctuation">:</span> <span class="token string">'Re: React'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    id<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span>    text<span class="token punctuation">:</span> <span class="token string">'Re:Re: React'</span>  <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> List <span class="token operator">=</span> props <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">{</span> messages <span class="token punctuation">}</span> <span class="token operator">=</span> props<span class="token punctuation">;</span>  <span class="token keyword">const</span> list <span class="token operator">=</span> messages<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>t <span class="token operator">=</span><span class="token operator">></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>t<span class="token punctuation">.</span>id<span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token punctuation">{</span>t<span class="token punctuation">.</span>text<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span><span class="token punctuation">{</span>list<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>List</span> <span class="token attr-name">messages</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>messages<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>一个元素的 <code>key</code> 最好是这个元素在列表中拥有的一个独一无二的字符串。通常，我们使用来自数据的 <code>id</code> 作为元素的 key。</p><p>实际开发中的数据一般都是配有 <code>id</code> 的，将 <code>id</code> 作为 <code>key</code> 是一个很好的做法。如果用数组 <code>index</code> 作为 key 也是勉强可以的，但是由于 <code>index</code> 可能会随着数组元素的增减发生变化，如果列表可以重新排序，这会导致渲染变得很慢。</p><h3 id="九、表单"><a href="#九、表单" class="headerlink" title="九、表单"></a>九、表单</h3><p>当用户提交表单时，<code>HTML</code> 的默认行为会使这个表单跳转到一个新页面。在 <code>React</code> 中亦是如此。</p><p>但大多数情况下，我们都会构造一个处理提交表单并可访问用户输入表单数据的函数。实现这一点的标准方法是使用一种称为<strong>受控组件</strong>的技术。</p><h4 id="1、受控组件"><a href="#1、受控组件" class="headerlink" title="1、受控组件"></a>1、受控组件</h4><p><code>&lt;input&gt;</code> 或 <code>&lt;select&gt;</code> 都要绑定一个 <code>change</code> 事件，每当表单的状态发生变化，都会被写入组件的 <code>state</code> 中,这种组件在 <code>React</code> 中被称为受控组件。</p><h4 id="2、form-基本用法"><a href="#2、form-基本用法" class="headerlink" title="2、form 基本用法"></a>2、form 基本用法</h4><p><code>index.js</code> :</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">'react-dom'</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Form</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span> username<span class="token punctuation">:</span> <span class="token string">''</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  handleChange <span class="token operator">=</span> e <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      username<span class="token punctuation">:</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  handleSubmit <span class="token operator">=</span> e <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>    e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        username<span class="token punctuation">:</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span>          <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span>          <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>username<span class="token punctuation">}</span></span>          <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleChange<span class="token punctuation">}</span></span>        <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleSubmit<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>提交<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Form</span> <span class="token punctuation">/></span></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>由于 <code>value</code> 属性是在我们的表单元素上设置的，因此显示的值将始终为 <code>React</code> 数据源上<code>this.state.value</code> 的值。由于每次按键都会触发 <code>handleChange</code> 来更新当前 <code>React</code> 中的 <code>state</code>，所展示的值也会随着不同用户的输入而更新。</p><h4 id="3、处理多个输入"><a href="#3、处理多个输入" class="headerlink" title="3、处理多个输入"></a>3、处理多个输入</h4><p>你有处理多个受控的 <code>input</code> 元素时，你可以通过给每个元素添加一个 <code>name</code> 属性，来让处理函数根据 <code>event.target.name</code> 的值来选择做什么。</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">'react-dom'</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Form</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span> username<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span> email<span class="token punctuation">:</span> <span class="token string">''</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  handleChange <span class="token operator">=</span> event <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span> value<span class="token punctuation">,</span> name <span class="token punctuation">}</span> <span class="token operator">=</span> event<span class="token punctuation">.</span>target<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      <span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">:</span> value    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  handleSubmit <span class="token operator">=</span> e <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>username<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>email<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        Username<span class="token punctuation">:</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span>          <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span>          <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span>          <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>username<span class="token punctuation">}</span></span>          <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleChange<span class="token punctuation">}</span></span>        <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>        Email<span class="token punctuation">:</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span>          <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span>          <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span>          <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>email<span class="token punctuation">}</span></span>          <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleChange<span class="token punctuation">}</span></span>        <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleSubmit<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>提交<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Form</span> <span class="token punctuation">/></span></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React 高阶组件</title>
      <link href="/react-high-order-component/"/>
      <url>/react-high-order-component/</url>
      
        <content type="html"><![CDATA[<!-- ## React 高阶组件 --><p>高阶组件 <code>（HOC）</code> 是 <code>react</code> 中对组件逻辑进行重用的高级技术。高阶组件本身并不是 React API，它只是一种模式，这种模式是由 react 自身的组合性质产生的。</p><p>具体而言， <strong>高阶组件就是一个函数（而不是组件），且该函数接受一个你传递给它的组件作为参数，并返回一个新的组件</strong> 。</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">const</span> NewComponent <span class="token operator">=</span> <span class="token function">higherOrderComponent</span><span class="token punctuation">(</span>OldComponent<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="一、定义高阶组件"><a href="#一、定义高阶组件" class="headerlink" title="一、定义高阶组件"></a>一、定义高阶组件</h3><p>我们来看一个很简单的高级组件：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> WrappedComponent <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">class</span> <span class="token class-name">NewComponent</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// do some things</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>WrappedComponent</span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> NewComponent<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><a id="more"></a><p>看起来这个高级组件什么用都没有，它就是简单的构建了一个新的组件类 <code>NewComponent</code> ，然后把传进入去的 <code>WrappedComponent</code> 渲染出来。但是我们可以给 <code>NewCompoent</code> 做一些数据启动工作：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span>WrappedComponent<span class="token punctuation">,</span> name<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">class</span> <span class="token class-name">NewComponent</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span> data<span class="token punctuation">:</span> <span class="token keyword">null</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">componentWillMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">let</span> data <span class="token operator">=</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> data <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>WrappedComponent</span> <span class="token attr-name">data</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>data<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> NewComponent<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>现在 <code>NewComponent</code> 会根据第二个参数 <code>name</code> 在组件挂载阶段从 <code>LocalStorage</code> 中加载数据，并且 <code>setState</code> 到自己的<code>state.data</code> 中，而渲染的时候将 <code>state.data</code> 通过 <code>props.data</code> 传给 <code>WrappedComponent</code>。</p><h3 id="二、使用高级组件"><a href="#二、使用高级组件" class="headerlink" title="二、使用高级组件"></a>二、使用高级组件</h3><p>假设上面的代码是在 <code>src/wrapWithLoadData.js</code> 文件中的，我们可以在别的地方这么用它：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> wrapWithLoadData <span class="token keyword">from</span> <span class="token string">'./wrapWithLoadData'</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">InputWithUserName</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>data<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>InputWithUserName <span class="token operator">=</span> <span class="token function">wrapWithLoadData</span><span class="token punctuation">(</span>InputWithUserName<span class="token punctuation">,</span> <span class="token string">'username'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> InputWithUserName<span class="token punctuation">;</span></code></pre><p>假如 <code>InputWithUserName</code> 的功能需求是挂载的时候从 <code>LocalStorage</code> 里面加载<code>username</code>字段作为 <code>&lt;input /&gt;</code> 的<code>value</code> 值，现在有了 <code>wrapWithLoadData</code>，我们可以很容易地做到这件事情。</p><p>只需要定义一个非常简单的 <code>InputWithUserName</code>，它会把 <code>props.data</code> 作为 <code>&lt;input /&gt;</code> 的 <code>value</code> 值。然把这个组件和 <code>&#39;username&#39;</code> 传给 <code>wrapWithLoadData</code>，<code>wrapWithLoadData</code> 会返回一个新的组件，我们用这个新的组件覆盖原来的 <code>InputWithUserName</code>，然后再导出去模块。</p><p>这样，别人在使用 <code>InputWithUserName</code> 这个组件的时候，实际上是用了被加工的组件。根据 <code>wrapWithLoadData</code> 的代码我们可以知道，这个新的组件挂载的时候会先去 <code>LocalStorage</code> 加载数据，渲染的时候再通过 <code>props.data</code> 传给真正的 <code>InputWithUserName</code>。</p><p>然后，我又写了一个文本输入框组件，该组件遵循类似的模式：它也需要 LocalStorage 加载 <code>&#39;content&#39;</code> 字段的数据。我们只需要定义一个新的 <code>TextareaWithContent</code>：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> wrapWithLoadData <span class="token keyword">from</span> <span class="token string">'./wrapWithLoadData'</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">TextareaWithContent</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>data<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>TextareaWithContent <span class="token operator">=</span> <span class="token function">wrapWithLoadData</span><span class="token punctuation">(</span>TextareaWithContent<span class="token punctuation">,</span> <span class="token string">'content'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> TextareaWithContent<span class="token punctuation">;</span></code></pre><p>我们根本不需要重复写从 <code>LocalStorage</code> 加载数据字段的逻辑，直接用 <code>wrapWithLoadData</code> 包装一下就可以了。</p><h3 id="三、高阶组件的灵活性"><a href="#三、高阶组件的灵活性" class="headerlink" title="三、高阶组件的灵活性"></a>三、高阶组件的灵活性</h3><p>高阶组件的这种方式其实就是设计模式里面的装饰者模式。它通过组合的方式达到很高的灵活程度。</p><p>假设现在我们需求变化了，现在要的是通过 <code>Ajax</code> 加载数据而不是从 <code>LocalStorage</code> 加载数据。我们只需要新建一个<code>wrapWithAjaxData</code> 高阶组件：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span>WrappedComponent<span class="token punctuation">,</span> name<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">class</span> <span class="token class-name">NewComponent</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span> data<span class="token punctuation">:</span> <span class="token keyword">null</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">componentWillMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      ajax<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/data/'</span> <span class="token operator">+</span> name<span class="token punctuation">,</span> data <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> data <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>WrappedComponent</span> <span class="token attr-name">data</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>data<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> NewComponent<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>其实就是改了一下 <code>wrapWithLoadData</code> 的 <code>componentWillMount</code> 中的逻辑，改成了从服务器加载数据。现在只需要把<code>InputWithUserName</code> 稍微改一下：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> wrapWithAjaxData <span class="token keyword">from</span> <span class="token string">'./wrapWithAjaxData'</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">InputWithUserName</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>data<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>InputWithUserName <span class="token operator">=</span> <span class="token function">wrapWithAjaxData</span><span class="token punctuation">(</span>InputWithUserName<span class="token punctuation">,</span> <span class="token string">'username'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> InputWithUserName<span class="token punctuation">;</span></code></pre><p>只要改一下包装的高阶组件就可以达到需要的效果。而且我们并没有改动 <code>InputWithUserName</code> 组件内部的任何逻辑，也没有改动 <code>Index</code> 的任何逻辑，只是改动了中间的高阶组件函数。</p>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何使用 Gitbook 来做笔记?</title>
      <link href="/notes-with-gitbook/"/>
      <url>/notes-with-gitbook/</url>
      
        <content type="html"><![CDATA[<!-- ## 如何使用 Gitbook 来做笔记? --><p>根据<a href="https://github.com/GitbookIO/gitbook/blob/master/docs/setup.md" target="_blank" rel="noopener">官网说明</a> 第一步，先安装</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> gitbook-cli -g</code></pre><p>然后，创建一个笔记文件夹</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">mkdir</span> my-note</code></pre><a id="more"></a><p>然后执行</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">cd</span> my-note$ gitbook init</code></pre><p>这样，可以生成两个文件</p><ul><li><code>README.md</code> 的内容会显示在书皮上</li><li><code>SUMMARY.md</code> 是目录</li></ul><h3 id="一、启动服务器，查看和编辑书籍"><a href="#一、启动服务器，查看和编辑书籍" class="headerlink" title="一、启动服务器，查看和编辑书籍"></a>一、启动服务器，查看和编辑书籍</h3><pre class=" language-bash"><code class="language-bash">$ gitbook serve</code></pre><p>这样，可以启动一个服务器，然后到 <code>localhost:4000</code> 端口，就可以看到这本书了。</p><p>可以修改 SUMMARY.md 来添加书籍目录</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># Summary</span>* <span class="token punctuation">[</span>Introduction<span class="token punctuation">]</span><span class="token punctuation">(</span>README.md<span class="token punctuation">)</span>* 第一章  - <span class="token punctuation">[</span>第一小节：学习 Git<span class="token punctuation">]</span><span class="token punctuation">(</span>./git/1-hello.md<span class="token punctuation">)</span>  - <span class="token punctuation">[</span>第二小节：Git 本地工作流<span class="token punctuation">]</span><span class="token punctuation">(</span>./git/2-local-git.md<span class="token punctuation">)</span>  - <span class="token punctuation">[</span>第三小节：Github 基本操作<span class="token punctuation">]</span><span class="token punctuation">(</span>./git/3-github.md<span class="token punctuation">)</span></code></pre><p>创建 git 文件夹，然后里面就可以写笔记了。其实 gitbook 本身的使用技巧基本就是这些了。</p><h3 id="二、托管我的-gitbook"><a href="#二、托管我的-gitbook" class="headerlink" title="二、托管我的 gitbook"></a>二、托管我的 gitbook</h3><p>首先到 <code>github.com</code> 上创建 <code>my-note</code> 仓库。</p><p>为了部署方便，我们把我们的 <code>my-note</code> 的内容结构稍微调整一下，把原有的所有内容都放到 content 文件夹中，也就是有这样的目录结构</p><pre class=" language-bash"><code class="language-bash">➜  my-note <span class="token function">ls</span> contentREADME.md  SUMMARY.md <span class="token function">git</span>➜  my-note</code></pre><p>然后，把当然项目变成一个 <code>nodejs</code> 的项目：</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">cd</span> my-note$ <span class="token function">npm</span> init</code></pre><p>然后，<code>package.json</code> 中添加这些代码：</p><pre class=" language-json"><code class="language-json"><span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token property">"start"</span><span class="token operator">:</span> <span class="token string">"gitbook serve ./content ./gh-pages"</span><span class="token punctuation">,</span> <span class="token property">"build"</span><span class="token operator">:</span> <span class="token string">"gitbook build ./content ./gh-pages"</span><span class="token punctuation">,</span> <span class="token property">"deploy"</span><span class="token operator">:</span> <span class="token string">"node ./scripts/deploy-gh-pages.js"</span><span class="token punctuation">,</span> <span class="token property">"publish"</span><span class="token operator">:</span> <span class="token string">"npm run build &amp;&amp; npm run deploy"</span><span class="token punctuation">,</span> <span class="token property">"port"</span><span class="token operator">:</span> <span class="token string">"lsof -i :35729"</span><span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre><p>有了上面的 <code>npm</code> 脚本之后，我们如果我想在本地 <code>4000</code> 端口查看本书，需要运行:</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">npm</span> start</code></pre><p>在准备上传之前，先来创建一个 <code>.gitignore</code> 文件，里面填写</p><pre class=" language-text"><code class="language-text">gh-pages</code></pre><p>然后，运行:</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">git</span> init$ <span class="token function">git</span> add -A$ <span class="token function">git</span> commit -a -m<span class="token string">"hello my book"</span>$ <span class="token function">git</span> remote add origin git@github.com:IDeepspace/my-note.git$ <span class="token function">git</span> push -u origin master</code></pre><p>上面这些完成后，<code>gitbook</code> 的原始代码就被安全的备份到 <code>master</code> 分支了。访问 <a href="http://IDeepspace.github.io/my-note" target="_blank" rel="noopener">http://IDeepspace.github.io/my-note</a> 可以看到这些内容。</p><h3 id="三、部署书籍到-gh-pages"><a href="#三、部署书籍到-gh-pages" class="headerlink" title="三、部署书籍到 gh-pages"></a>三、部署书籍到 gh-pages</h3><p>这一步，可以手动做：</p><ul><li>第一步：运行 <code>npm run build</code> ，来把 <code>md</code> 文件翻译成 <code>html</code> 放到 <code>gh-pages</code> 文件夹</li><li>第二步，拷贝 <code>gh-pages</code> 中的所有文件，到本仓库的 <code>gh-pages</code> 分支，然后上传</li><li>第三步，以后每次修改完都需要拷贝到 <code>gh-pages</code> 分支，很麻烦</li></ul><p>所以，我们采用一个 <code>npm</code> 包，来帮助我们完成上面的操作</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">cd</span> my-note/$ <span class="token function">npm</span> i --save gh-pages</code></pre><p>然后创建 <code>my-note/scripts/deploy-gh-pages.js</code></p><p>里面的内容是：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token string">'use strict'</span><span class="token punctuation">;</span><span class="token keyword">var</span> ghpages <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'gh-pages'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  ghpages<span class="token punctuation">.</span><span class="token function">publish</span><span class="token punctuation">(</span><span class="token string">'./gh-pages'</span><span class="token punctuation">,</span> console<span class="token punctuation">.</span>error<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>console<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这样，每次书稿有了修改，运行</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">npm</span> run publish</code></pre><p>就可以把书稿部署到 <a href="http://IDeepspace.github.io/my-note" target="_blank" rel="noopener">http://IDeepspace.github.io/my-note</a></p>]]></content>
      
      
      <categories>
          
          <category> Tool </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Gitbook </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Express + Mongoose 实现增删改查</title>
      <link href="/express-mongoose/"/>
      <url>/express-mongoose/</url>
      
        <content type="html"><![CDATA[<!-- ## Express + Mongoose 实现增删改查 --><p><code>Express</code> 是一个基于 <code>Node.js</code> 平台的极简、灵活的 web 应用开发框架，它提供一系列强大的特性，帮助你创建各种 Web 和移动设备应用，实现对数据库的增删查改。</p><p>数据库我们选择 <code>MongoDB</code>，它是一个基于分布式文件存储的开源数据库系统，<code>Mongoose</code> 是在 <code>node.js</code> 异步环境下对 <code>mongodb</code> 进行便捷操作的对象模型工具 。</p><p>接下来我们使用 <code>Express + Mongoose</code> 来实现简单的增删查改功能。</p><a id="more"></a><h3 id="一、创建一个-Express-项目"><a href="#一、创建一个-Express-项目" class="headerlink" title="一、创建一个 Express 项目"></a>一、创建一个 Express 项目</h3><p>既然 <code>Express</code> 是基于 <code>Node.js</code> 的框架，那么肯定需要装 <code>node.js</code> ，我们还需要安装 <code>MongoDB</code> , 关于 MongoDB 的使用，网上的教程有很多，我也写了一个基础的学习笔记，可以做下参考：<a href="http://www.togoblog.cn/mongodb-basic/" target="_blank" rel="noopener">MongoDB 学习笔记</a>。</p><p>接下来，我们使用 <code>express-generator</code> 来快速生成一个 <code>Express</code> 项目 :</p><pre><code>$ npm install -g express-generator</code></pre><p>然后初始化一个文件名为 express-mongoose-demo 的项目 :</p><pre><code>$ express express-mongoose-demo</code></pre><p>创建好项目之后，我们需要安装下依赖：</p><pre><code>$ cd express-mongoose-demo$ npm install</code></pre><p>启动项目：</p><pre><code>$ npm start</code></pre><p>浏览器打开 <a href="http://localhost:3000/" target="_blank" rel="noopener">http://localhost:3000</a> ，就可以看到已经可以访问了。</p><h3 id="二、介绍目录结构"><a href="#二、介绍目录结构" class="headerlink" title="二、介绍目录结构"></a>二、介绍目录结构</h3><pre><code>├─bin/      // 启动文件├─public/   // 资源文件├─routes/   // 路由├─views/    // 视图├─app.js└─package.json</code></pre><p>express 创建项目的目录结构还是比较明了的。下面我们详细看看。</p><h4 id="app-js"><a href="#app-js" class="headerlink" title="app.js"></a>app.js</h4><p><code>express</code> 创建的项目默认使用了 <code>jade</code> 模板引擎，在 <code>app.js</code> 中的设置的 ：</p><pre><code>// view engine setupapp.set(&#39;views&#39;, path.join(__dirname, &#39;views&#39;));app.set(&#39;view engine&#39;, &#39;jade&#39;);</code></pre><p><code>views/</code> 目录下都是 <code>.jade</code> 格式文件。简单说一下：</p><p>模板引擎（<code>Template Engine</code>）是一个将页面模板和数据结合起来生成 <code>html</code> 的工具。模板引擎有很多，在本学习笔记中，我们使用 <a href="https://www.npmjs.com/package/ejs" target="_blank" rel="noopener">ejs 模板引擎</a> ，先安装 ejs :</p><pre><code>$ npm install ejs --save</code></pre><p>然后在 <code>app.js</code> 中将模板引擎修改成 ejs :</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> ejs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'ejs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// view engine setup</span>app<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'views'</span><span class="token punctuation">,</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'views'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">engine</span><span class="token punctuation">(</span><span class="token string">'html'</span><span class="token punctuation">,</span> ejs<span class="token punctuation">.</span>__express<span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'view engine'</span><span class="token punctuation">,</span> <span class="token string">'html'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><code>ejs</code> 有 3 种常用标签：</p><ul><li><code>&lt;% code %&gt;</code>：运行 <code>JavaScript</code> 代码，不输出</li><li><code>&lt;%= code %&gt;</code>：显示转义后的 <code>HTML</code> 内容</li><li><code>&lt;%- code %&gt;</code>：显示原始 <code>HTML</code> 内容</li></ul><p>更多使用方法这里不作详解！</p><h3 id="三、搭建视图和路由"><a href="#三、搭建视图和路由" class="headerlink" title="三、搭建视图和路由"></a>三、搭建视图和路由</h3><h4 id="创建用户列表"><a href="#创建用户列表" class="headerlink" title="创建用户列表"></a>创建用户列表</h4><p>把 <code>view/</code> 视图目录下的 <code>.jade</code> 文件都删除，然后创建 <code>UserList.html</code> 文件，内容如下：</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>用户列表页面<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>用户名<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>邮箱<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>操作<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">for(var</span> <span class="token attr-name">i</span> <span class="token attr-name">in</span> <span class="token attr-name">user){</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>&lt;%= user[i].username %><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>&lt;%= user[i].email %><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/users/detail/&lt;%<span class="token punctuation">=</span> user[i]._id %<span class="token punctuation">></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span> 查看 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/users/edit/&lt;%<span class="token punctuation">=</span> user[i]._id %<span class="token punctuation">></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span> 编辑 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>del<span class="token punctuation">"</span></span> <span class="token attr-name">data-id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>&lt;%<span class="token punctuation">=</span> user[i]._id %<span class="token punctuation">></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span> 删除 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">}</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>接下来实现上面视图对应的路由，项目中默认已经给我们生成了两个路由。在 <code>routes/</code> 路由目录下已经有了两个路由文件：<code>index.js</code> 和 <code>users.js</code>。</p><p>在 <code>app.js</code> 文件中，已经帮我们设置好了这两个路由：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> index <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./routes/index'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> users <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./routes/users'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'/users'</span><span class="token punctuation">,</span> users<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>浏览器访问 <a href="http://localhost:3000/users" target="_blank" rel="noopener">http://localhost:3000/users</a> ，就能访问到 <code>users</code> 对应的页面。我们来看看路由里 <code>users.js</code> 是怎么写的：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> router <span class="token operator">=</span> express<span class="token punctuation">.</span><span class="token function">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* GET users listing. */</span>router<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'respond with a resource'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> router<span class="token punctuation">;</span></code></pre><p><code>express.Router</code> 类创建模块化、可挂载的路由句柄。我们修改上面代码来创建用户列表的路由 <code>users/list</code> :</p><pre class=" language-javascript"><code class="language-javascript">router<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/list'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> _id<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> username<span class="token punctuation">:</span> <span class="token string">'Deepspace'</span><span class="token punctuation">,</span> email<span class="token punctuation">:</span> <span class="token string">'cxin1427@qq.com'</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'UserList'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    user<span class="token punctuation">:</span> list  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>还记得我们新建的 <code>UserList.html</code> 视图文件中的 <code>user</code> 变量吗，这里用到了 <code>res.render()</code> 方法，功能就是渲染视图模板。</p><p><code>res.render()</code> 方法接收两个参数：第一个参数为视图文件名，第二个参数是一个对象，用于向模板中传递数据，<code>user</code> 就是在这里传过去的。更改完路由之后我们重启服务器，访问 <a href="http://localhost:3000/users/list" target="_blank" rel="noopener">http://localhost:3000/users/list</a> 就可以看到用户列表页面了。</p><p><img src="../../ImageHosting/NodeJS/express-2.png" alt="用户列表"></p><p>但是用户列表中的数据是写死的，我们应该从数据库中获取，下面我们来做这个工作。</p><h3 id="四、连接-MongoDB-数据库"><a href="#四、连接-MongoDB-数据库" class="headerlink" title="四、连接 MongoDB 数据库"></a>四、连接 MongoDB 数据库</h3><h4 id="1-新建-usersdb-数据库"><a href="#1-新建-usersdb-数据库" class="headerlink" title="1. 新建 usersdb 数据库"></a>1. 新建 usersdb 数据库</h4><pre><code>&gt; use usersdbswitch to db usersdb</code></pre><h4 id="2-在项目中安装-Mongoose"><a href="#2-在项目中安装-Mongoose" class="headerlink" title="2. 在项目中安装 Mongoose"></a>2. 在项目中安装 Mongoose</h4><pre><code>$ npm install mongoose --save</code></pre><p>安装成功后，就可以通过 <code>require(&#39;mongoose&#39;)</code> 来使用了！</p><h4 id="3-验证是否成功连接"><a href="#3-验证是否成功连接" class="headerlink" title="3. 验证是否成功连接"></a>3. 验证是否成功连接</h4><p>我们根目录下新建一个 <code>models</code> 目录，在此目录下创建一个 <code>db.js</code> 文件，内容如下：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> mongoose <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'mongoose'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  DB_URL <span class="token operator">=</span> <span class="token string">'mongodb://localhost:27017/usersdb'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*连接*/</span>mongoose<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>DB_URL<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*连接成功*/</span>mongoose<span class="token punctuation">.</span>connection<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'connected'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Mongoose connection open to '</span> <span class="token operator">+</span> DB_URL<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*连接异常*/</span>mongoose<span class="token punctuation">.</span>connection<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Mongoose connection error: '</span> <span class="token operator">+</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*连接断开*/</span>mongoose<span class="token punctuation">.</span>connection<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'disconnected'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Mongoose connection disconnected'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>然后，我们运行下 <code>db.js</code> :</p><pre class=" language-javascript"><code class="language-javascript">$ node db<span class="token punctuation">.</span>js</code></pre><p>从代码中可以看出，监听了几个事件，并且执行触发了<code>connected</code> 事件，打印：<code>Mongoose connection open to mongodb://localhost:27017/usersdb</code> 则表示连接成功！</p><h4 id="4-创建-Schema"><a href="#4-创建-Schema" class="headerlink" title="4. 创建 Schema"></a>4. 创建 Schema</h4><p><code>schema</code> 是 <code>mongoose</code> 里会用到的一种数据模式，可以理解为表结构的定义；每个 <code>schema</code> 会映射到 <code>mongodb</code> 中的一个 <code>collection</code>，它不具备操作数据库的能力 。</p><p>我们先改造一下 <code>db.js</code>，导出 <code>mongoose</code> 对象，在 <code>db.js</code> 文件最后一行添加如下代码即可：</p><pre class=" language-javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> mongoose<span class="token punctuation">;</span></code></pre><p>下面我们定义一个 Schema，命名为 <code>userModel.js</code> , 内容如下：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> mongoose <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./db.js'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  Schema <span class="token operator">=</span> mongoose<span class="token punctuation">.</span>Schema<span class="token punctuation">;</span><span class="token keyword">var</span> userSchema <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Schema</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  username<span class="token punctuation">:</span> <span class="token punctuation">{</span> type<span class="token punctuation">:</span> String <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//用户名</span>  email<span class="token punctuation">:</span> <span class="token punctuation">{</span> type<span class="token punctuation">:</span> String <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//邮箱</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>定义一个 Schema 就这么简单，指定字段名和类型就可以了。</p><p><strong>Schema Types 内置类型如下：</strong></p><p><img src="../../ImageHosting/NodeJS/Schema-Types.png" alt=""></p><h4 id="5-生成-Model"><a href="#5-生成-Model" class="headerlink" title="5. 生成 Model"></a>5. 生成 Model</h4><p>定义好了 Schema，接下就是生成 Model 。</p><p>这里的 <code>userSchema</code> 还不能对数据库进行操作，只是定义了数据模型属性 <code>username</code> , <code>email</code> 为字符串类型。需要将该 Schema 发布为 Model。<strong>Model 是由 Schema 发布生成的模型，可以对数据库的操作。</strong></p><pre class=" language-javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> mongoose<span class="token punctuation">.</span><span class="token function">model</span><span class="token punctuation">(</span><span class="token string">'user'</span><span class="token punctuation">,</span> userSchema<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="五、实现增删改查"><a href="#五、实现增删改查" class="headerlink" title="五、实现增删改查"></a>五、实现增删改查</h3><h4 id="1-查询"><a href="#1-查询" class="headerlink" title="1. 查询"></a>1. 查询</h4><p>在 <code>user.js</code> 路由文件里，我们来引入 <code>userModel.js</code> 进行数据库操作。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> userModel <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../models/userModel.js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>router<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/list'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>  userModel<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'UserList'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      user<span class="token punctuation">:</span> data    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这里使用 <code>userModel.find()</code> <strong>查询</strong>到所有用户。但是现在我们的数据库里还是空的，我们来新增一个添加用户页面向数据库里插入数据。</p><h4 id="2-新增"><a href="#2-新增" class="headerlink" title="2. 新增"></a>2. 新增</h4><p>在 <code>views/</code> 目录下新建 <code>UserAdd.html</code>添加用户视图</p><pre><code>&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;    &lt;title&gt;用户编辑页面&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;form action=&quot;/users/add&quot; method=&quot;post&quot;&gt;        &lt;input type=&quot;text&quot; name=&quot;username&quot; value=&quot;&quot;&gt;        &lt;input type=&quot;email&quot; name=&quot;email&quot; value=&quot;&quot;&gt;        &lt;button type=&quot;submit&quot;&gt;submit&lt;/button&gt;    &lt;/form&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>在 <code>user.js</code> 路由文件里来添加对应视图的路由:</p><pre class=" language-javascript"><code class="language-javascript">router<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/add'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>  res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'UserAdd'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这是渲染视图页面的路由，我们需要添加一个 post 方法的路由，在点击提交按钮的时候，把数据存进数据库里。</p><pre class=" language-javascript"><code class="language-javascript">router<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/add'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> newUser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">userModel</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    username<span class="token punctuation">:</span> req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>username<span class="token punctuation">,</span>    email<span class="token punctuation">:</span> req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>email  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  newUser<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    res<span class="token punctuation">.</span><span class="token function">redirect</span><span class="token punctuation">(</span><span class="token string">'/users/list'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这里使用 <code>new userModel()</code> 创建了一个 <code>Entity</code>，它是由 <code>Model</code> 创建的实体，它的操作也会影响数据库。<code>newUser</code> 调用 <code>save()</code> 方法将数据保存到数据库中。然后 <code>res.redirect()</code> 将页面重定向到用户列表页面，这时就可以看到我们新增的用户显示在列表中了。接下来我们看看如何来编辑用户信息。</p><h4 id="3-修改"><a href="#3-修改" class="headerlink" title="3. 修改"></a>3. 修改</h4><p>依然是创建相应的用户编辑视图：UserEdit.html</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>用户编辑页面<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/users/update<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>&lt;%<span class="token punctuation">=</span> user._id %<span class="token punctuation">></span><span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>&lt;%<span class="token punctuation">=</span> user.username %<span class="token punctuation">></span><span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>&lt;%<span class="token punctuation">=</span> user.email %<span class="token punctuation">></span><span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>update<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>添加对应的路由：<code>/users/edit/:id</code> 来渲染视图，<code>/users/update</code> 来修改数据库数据 :</p><pre class=" language-javascript"><code class="language-javascript">router<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/edit/:id'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> id <span class="token operator">=</span> req<span class="token punctuation">.</span>params<span class="token punctuation">.</span>id<span class="token punctuation">;</span>  userModel<span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span><span class="token punctuation">{</span> _id<span class="token punctuation">:</span> id <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>    res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'UserEdit'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      user<span class="token punctuation">:</span> data    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>router<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/update'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> id <span class="token operator">=</span> req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>id<span class="token punctuation">;</span>  userModel<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    data<span class="token punctuation">.</span>username <span class="token operator">=</span> req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>username<span class="token punctuation">;</span>    data<span class="token punctuation">.</span>email <span class="token operator">=</span> req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>email<span class="token punctuation">;</span>    data<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>      res<span class="token punctuation">.</span><span class="token function">redirect</span><span class="token punctuation">(</span><span class="token string">'/users/list'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><code>userModel.findOne()</code> 会根据查询条件 <code>{_id: id}</code> 查询到对应的一条数据，那么同理，查看用户详情的实现也是如此，只是渲染你到另外一个模板而已，这里就不重复写了；<code>userModel.findById()</code> 查询到 data 对象，该对象也属于 <code>Entity</code>，有 <code>save()</code> 操作。<code>req.body.username</code> 就可以获取到我们修改后的 <code>username</code>，修改 data 对象之后调用 <code>save()</code> 方法保存到数据库中。接下来看看如何删除用户吧。</p><h4 id="4-删除"><a href="#4-删除" class="headerlink" title="4. 删除"></a>4. 删除</h4><p>在用户列表中，点击删除按钮，就把该用户从数据库中给删除了，不需要视图，直接写路由。</p><pre class=" language-javascript"><code class="language-javascript">router<span class="token punctuation">.</span><span class="token keyword">delete</span><span class="token punctuation">(</span><span class="token string">'/del'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> id <span class="token operator">=</span> req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>id<span class="token punctuation">;</span>  userModel<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">{</span> _id<span class="token punctuation">:</span> id <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">{</span> code<span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">,</span> msg<span class="token punctuation">:</span> <span class="token string">'删除成功'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>点击按钮，发送删除的请求，那我们可以使用 ajax 来实现。在用户列表页面引入 jquery，方便我们操作。然后添加 ajax 请求.</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.del'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> id <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token string">'id'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    url<span class="token punctuation">:</span> <span class="token string">'/users/del?id='</span> <span class="token operator">+</span> id<span class="token punctuation">,</span>    type<span class="token punctuation">:</span> <span class="token string">'delete'</span><span class="token punctuation">,</span>    success<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>重启服务器，进入 <code>users/list</code>，点击删除按钮，如果看到控制台中已经打印了 <code>{code: 200, msg: ‘删除成功’}</code> ，表示已经成功删除了，这时我们刷新页面，看看列表中已经不存在该用户了。</p><p><strong>部分路由对应的页面未创建视图或未做错误处理，但不影响学习本教程！</strong></p><h3 id="六、总结"><a href="#六、总结" class="headerlink" title="六、总结"></a>六、总结</h3><p>通过对用户的增删查改，学习如何写路由已经如何操作数据库。我们来总结一下：</p><ol><li>创建数据库，并验证是否正确连接</li><li>定义 Schema，由 Schema 发布 Model 来操作数据库。</li><li>Model 创建的实体 Entity，可以调用 save() 方法将数据保存到数据库中。</li><li><code>Model.find()</code> 方法查询到该 <code>Schema</code> 下的所有数据，<code>findOne()</code> 根据条件查询数据，<code>findById()</code> 根据 id 查询数据。</li><li>Model.remove() 删除数据。</li></ol><h3 id="代码地址"><a href="#代码地址" class="headerlink" title="代码地址"></a>代码地址</h3><blockquote><p><a href="https://github.com/IDeepspace/express-mongoose-demo-v1" target="_blank" rel="noopener">https://github.com/IDeepspace/express-mongoose-demo-v1</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Express </tag>
            
            <tag> Mongoose </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6 —— 箭头函数 Arrow Functions</title>
      <link href="/es6-arrow-functions/"/>
      <url>/es6-arrow-functions/</url>
      
        <content type="html"><![CDATA[<!-- ## ES6 —— 箭头函数 Arrow Functions --><p>ES6 中引入了一种编写函数的新语法 —- 箭头函数 Arrow Functions</p><h4 id="一-箭头函数产生的目的"><a href="#一-箭头函数产生的目的" class="headerlink" title="一. 箭头函数产生的目的"></a>一. 箭头函数产生的目的</h4><ul><li>简洁语法</li><li>与父作用域共享关键字<code>this</code></li></ul><h4 id="二-箭头函数的优点"><a href="#二-箭头函数的优点" class="headerlink" title="二. 箭头函数的优点"></a>二. 箭头函数的优点</h4><ul><li>使用箭头函数比普通函数少些动词，如：<code>function</code>或 <code>return</code></li><li><code>this</code>提前定义，从上下文可以捕获<code>this</code>。</li></ul><p>当你只需要一个只有一个参数的简单函数时，可以使用新标准中的箭头函数，它的语法非常简单：<code>标识符=&gt;表达式</code>。你无需输入 <code>function</code>和 <code>return</code>，一些小括号、大括号以及分号也可以省略。</p><a id="more"></a><h4 id="三-箭头函数的用法"><a href="#三-箭头函数的用法" class="headerlink" title="三. 箭头函数的用法"></a>三. 箭头函数的用法</h4><h5 id="1-如果箭头函数不需要参数或需要多个参数，就使用一个圆括号代表参数部分。"><a href="#1-如果箭头函数不需要参数或需要多个参数，就使用一个圆括号代表参数部分。" class="headerlink" title="1.如果箭头函数不需要参数或需要多个参数，就使用一个圆括号代表参数部分。"></a>1.如果箭头函数不需要参数或需要多个参数，就使用一个圆括号代表参数部分。</h5><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> f <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 等同于</span><span class="token keyword">let</span> f <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> sum <span class="token operator">=</span> <span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> num1 <span class="token operator">+</span> num2<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 等同于</span><span class="token keyword">let</span> sum <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> num1 <span class="token operator">+</span> num2<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h5 id="2-如果箭头函数的代码块部分多于一条语句，就要使用大括号将它们括起来，并且使用-return-语句返回"><a href="#2-如果箭头函数的代码块部分多于一条语句，就要使用大括号将它们括起来，并且使用-return-语句返回" class="headerlink" title="2.如果箭头函数的代码块部分多于一条语句，就要使用大括号将它们括起来，并且使用 return 语句返回"></a>2.如果箭头函数的代码块部分多于一条语句，就要使用大括号将它们括起来，并且使用 return 语句返回</h5><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> sum <span class="token operator">=</span> <span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> num1 <span class="token operator">+</span> num2<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//如果箭头函数只有一行语句，且不需要返回值，可以采用下面的写法，就不用写大括号了。</span><span class="token keyword">let</span> fn <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">void</span> <span class="token function">doesNotReturn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="3-由于大括号被解释为代码块，所以如果箭头函数直接返回一个对象，必须在对象外面加上括号，否则会报错。"><a href="#3-由于大括号被解释为代码块，所以如果箭头函数直接返回一个对象，必须在对象外面加上括号，否则会报错。" class="headerlink" title="3.由于大括号被解释为代码块，所以如果箭头函数直接返回一个对象，必须在对象外面加上括号，否则会报错。"></a>3.由于大括号被解释为代码块，所以如果箭头函数直接返回一个对象，必须在对象外面加上括号，否则会报错。</h5><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 报错</span><span class="token keyword">let</span> getTempItem <span class="token operator">=</span> id <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> id<span class="token punctuation">:</span> id<span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">"Temp"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 不报错</span><span class="token keyword">let</span> getTempItem <span class="token operator">=</span> id <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">{</span> id<span class="token punctuation">:</span> id<span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">"Temp"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="4-箭头函数还可以和解构赋值-Destructuring-联合使用"><a href="#4-箭头函数还可以和解构赋值-Destructuring-联合使用" class="headerlink" title="4.箭头函数还可以和解构赋值 Destructuring 联合使用."></a>4.箭头函数还可以和解构赋值 <code>Destructuring</code> 联合使用.</h5><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> full <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> first<span class="token punctuation">,</span> last <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> first <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> last<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 等同于</span><span class="token keyword">function</span> <span class="token function">full</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> person<span class="token punctuation">.</span>first <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> person<span class="token punctuation">.</span>last<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h5 id="5-箭头函数的一个用处是简化回调函数"><a href="#5-箭头函数的一个用处是简化回调函数" class="headerlink" title="5.箭头函数的一个用处是简化回调函数"></a><strong>5.箭头函数的一个用处是简化回调函数</strong></h5><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 正常函数写法</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> x <span class="token operator">*</span> x<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 箭头函数写法</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>x <span class="token operator">=</span><span class="token operator">></span> x <span class="token operator">*</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="6-rest-参数与箭头函数结合"><a href="#6-rest-参数与箭头函数结合" class="headerlink" title="6.rest 参数与箭头函数结合"></a>6.rest 参数与箭头函数结合</h5><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> numbers <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">...</span>nums<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> nums<span class="token punctuation">;</span><span class="token function">numbers</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// [1,2,3,4,5]</span><span class="token keyword">const</span> headAndTail <span class="token operator">=</span> <span class="token punctuation">(</span>head<span class="token punctuation">,</span> <span class="token operator">...</span>tail<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span>head<span class="token punctuation">,</span> tail<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">headAndTail</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// [1,[2,3,4,5]]</span></code></pre><h4 id="四-箭头函数的特性"><a href="#四-箭头函数的特性" class="headerlink" title="四.箭头函数的特性"></a>四.箭头函数的特性</h4><h5 id="1、typeof-运算符和普通的函数一样"><a href="#1、typeof-运算符和普通的函数一样" class="headerlink" title="1、typeof 运算符和普通的函数一样"></a>1、typeof 运算符和普通的函数一样</h5><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> commFunc <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> commFunc<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>输出为<code>function</code>。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> arrowFunc <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> arrowFunc<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>输出也为<code>function</code>。<br>从此可以看出箭头函数的类型和普通的函数一样都为<code>function</code>。</p><h5 id="2、instanceof也返回true，表明是-Function-的实例"><a href="#2、instanceof也返回true，表明是-Function-的实例" class="headerlink" title="2、instanceof也返回true，表明是 Function 的实例"></a>2、<code>instanceof</code>也返回<code>true</code>，表明是 Function 的实例</h5><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> func <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>func <span class="token keyword">instanceof</span> <span class="token class-name">Function</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>输出为<code>true</code>，由此可以看出箭头函数也是 Function 的实例</p><h5 id="3、this的指向"><a href="#3、this的指向" class="headerlink" title="3、this的指向"></a>3、<code>this</code>的指向</h5><p>普通函数与箭头函数有个微小的不同点。 <strong>箭头函数没有自己的 this 值</strong> ，其 this 值是通过继承其它传入对象而获得的, 通常来说是上一级外部函数的 <code>this</code> 的指向 。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'id:'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> id <span class="token operator">=</span> <span class="token number">21</span><span class="token punctuation">;</span>foo<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">42</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// id: 42</span></code></pre><p>这个例子中， <code>setTimeout</code> 的参数是一个箭头函数， 每隔 100 毫秒运行一次，如果是普通函数，执行的 <code>this</code> 应该指向全局对象， 但是箭头函数会让 <code>this</code> 总是指向函数所在的对象</p><p><strong>箭头函数里面嵌套箭头函数会有多少个 this 呢？</strong><br>看一个简单的例子</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'id:'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">42</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//id: 42</span></code></pre><p>上面的代码中只有一个 <code>this</code>， 就是函数 f 的<code>this</code> 。这是因为所有的内层函数都是箭头函数，都没有自己的 <code>this</code>，都是最外层 <code>f</code> 函数的 <code>this</code>。</p><p><strong>注意:</strong> 还有三个变量在箭头函数中也是不存在的 <code>arguments</code> , <code>super</code>, <code>new.target</code>。所以，箭头函数也就不能再用这些方法<code>call()</code>,<code>apply()</code>,<code>bind()</code>,因为这是一些改变 this 指向的方法，<br>箭头函数并没有 <code>this</code>。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> adder <span class="token operator">=</span> <span class="token punctuation">{</span>  base<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  add<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> f <span class="token operator">=</span> v <span class="token operator">=</span><span class="token operator">></span> v <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>base<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">f</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  addThruCall<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> f <span class="token operator">=</span> v <span class="token operator">=</span><span class="token operator">></span> v <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>base<span class="token punctuation">;</span>    <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token punctuation">{</span> base<span class="token punctuation">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> f<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>adder<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="4、返回对象用小括号括起来"><a href="#4、返回对象用小括号括起来" class="headerlink" title="4、返回对象用小括号括起来"></a>4、返回对象用小括号括起来</h5><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">'galler'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>输出为<code>undefined</code>。此时的”{}”表明函数的起始位置和结束位置，由于该函数没有返回值，所以被调用时值为 undefined</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">'galler'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>输出为<code>{name:&quot;galler&quot;}</code>。 此时”{}”表示定义一个对象。用”()”括起来表示是一个表达式，默认返回该对象。</p><h5 id="5、箭头函数中不能使用new"><a href="#5、箭头函数中不能使用new" class="headerlink" title="5、箭头函数中不能使用new"></a>5、箭头函数中不能使用<code>new</code></h5><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> Person <span class="token operator">=</span> name <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> one <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'galler'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>运行该程序，则出现<code>TypeError: Person is not a constructor</code></p><h5 id="6、arguments"><a href="#6、arguments" class="headerlink" title="6、arguments"></a>6、arguments</h5><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">person</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>一般的函数使用<code>arguments</code>，在浏览器中输出为一个数组：<code>[1]</code>，在 Node 环境中输出为一个对象：<code>{&#39;0&#39;:1}</code></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">person</span><span class="token punctuation">(</span><span class="token string">'galler'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>箭头函数使用<code>arguments</code>，在浏览器环境中，则出现<code>ReferenceError</code>，在 Node 环境中输出<code>{&quot;0&quot;:{}，……}</code>。<br>由此可以得出，箭头函数与普通函数的再一个区别：不能使用<code>arguments</code>对象。</p><h5 id="7、没有原型"><a href="#7、没有原型" class="headerlink" title="7、没有原型"></a>7、没有原型</h5><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>输出为<code>undefined</code>。由此可以看出箭头函数没有原型 。</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6 —— 数组的拓展</title>
      <link href="/es6-array/"/>
      <url>/es6-array/</url>
      
        <content type="html"><![CDATA[<!-- ## ES6 —— 数组的拓展 --><h4 id="一-Array-from"><a href="#一-Array-from" class="headerlink" title="一 . Array.from()"></a>一 . Array.from()</h4><p><code>Array.from</code>方法用于将两类对象转为真正的数组：类似数组的对象（array-like object）和可遍历（iterable）的对象（包括 ES6 新增的数据结构 Set 和 Map）</p><p>下面是一个类似数组的对象，<code>Array.from</code>将它转为真正的数组。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> arrayLike <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token string">'0'</span><span class="token punctuation">:</span> <span class="token string">'a'</span><span class="token punctuation">,</span>  <span class="token string">'1'</span><span class="token punctuation">:</span> <span class="token string">'b'</span><span class="token punctuation">,</span>  <span class="token string">'2'</span><span class="token punctuation">:</span> <span class="token string">'c'</span><span class="token punctuation">,</span>  length<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// ES5的写法</span><span class="token keyword">var</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span>slice<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arrayLike<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ['a', 'b', 'c']</span><span class="token comment" spellcheck="true">// ES6的写法</span><span class="token keyword">let</span> arr2 <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span>arrayLike<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ['a', 'b', 'c']</span></code></pre><a id="more"></a><h4 id="二-Array-of"><a href="#二-Array-of" class="headerlink" title="二 . Array.of()"></a>二 . Array.of()</h4><p><code>Array.of</code>方法用于将一组值，转换为数组。</p><pre class=" language-javascript"><code class="language-javascript">Array<span class="token punctuation">.</span><span class="token keyword">of</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [3,11,8]</span>Array<span class="token punctuation">.</span><span class="token keyword">of</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [3]</span>Array<span class="token punctuation">.</span><span class="token keyword">of</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1</span></code></pre><p>这个方法的主要目的，是弥补数组构造函数<code>Array()</code>的不足。因为参数个数的不同，会导致<code>Array()</code>的行为有差异。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// []</span><span class="token function">Array</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [, , ,]</span><span class="token function">Array</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [3, 11, 8]</span></code></pre><p>上面代码中，<code>Array</code> 方法没有参数、一个参数、三个参数时，返回结果都不一样。只有当参数个数不少于 2 个时，<code>Array()</code> 才会返回由参数组成的新数组。参数个数只有一个时，实际上是指定数组的长度。</p><p><code>Array.of</code> 基本上可以用来替代<code>Array()</code>或<code>new Array()</code>，并且不存在由于参数不同而导致的重载。它的行为非常统一。</p><pre class=" language-javascript"><code class="language-javascript">Array<span class="token punctuation">.</span><span class="token keyword">of</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// []</span>Array<span class="token punctuation">.</span><span class="token keyword">of</span><span class="token punctuation">(</span>undefined<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [undefined]</span>Array<span class="token punctuation">.</span><span class="token keyword">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [1]</span>Array<span class="token punctuation">.</span><span class="token keyword">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [1, 2]</span></code></pre><p><code>Array.of</code> 总是返回参数值组成的数组。如果没有参数，就返回一个空数组。</p><p><code>Array.of</code> 方法可以用下面的代码模拟实现。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">ArrayOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span>slice<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="三-copyWithin"><a href="#三-copyWithin" class="headerlink" title="三 . copyWithin()"></a>三 . copyWithin()</h4><p>数组实例的<code>copyWithin</code>方法，在当前数组内部，将指定位置的成员复制到其他位置（会覆盖原有成员），然后返回当前数组。也就是说，使用这个方法，会修改当前数组 。</p><h5 id="语法"><a href="#语法" class="headerlink" title="语法"></a><strong>语法</strong></h5><pre class=" language-javascript"><code class="language-javascript">Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">copyWithin</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token punctuation">(</span>start <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>end <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="接受三个参数。"><a href="#接受三个参数。" class="headerlink" title="接受三个参数。"></a>接受三个参数。</h5><ul><li>target（必需）：从该位置开始替换数据。</li><li>start（可选）：从该位置开始读取数据，默认为 0。如果为负值，表示倒数。</li><li>end（可选）：到该位置前停止读取数据，默认等于数组长度。如果为负值，表示倒数。</li></ul><p>看下面的例子 :</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> cct1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">copyWithin</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cct1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//[ 4, 5, 3, 4, 5 ]</span><span class="token comment" spellcheck="true">// 将3号位复制到0号位</span><span class="token keyword">let</span> cct2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">copyWithin</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cct2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [4, 2, 3, 4, 5]</span><span class="token comment" spellcheck="true">// -2相当于3号位，-1相当于4号位</span><span class="token keyword">let</span> cct3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">copyWithin</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cct3<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//[4, 2, 3, 4, 5]</span><span class="token comment" spellcheck="true">// 将3号位复制到0号位</span><span class="token keyword">let</span> cct4 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span>copyWithin<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">{</span> length<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cct4<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// {0: 1, 3: 1, length: 5}</span><span class="token comment" spellcheck="true">// 将2号位到数组结束，复制到0号位</span><span class="token keyword">let</span> i32a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Int32Array</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> cct5 <span class="token operator">=</span> i32a<span class="token punctuation">.</span><span class="token function">copyWithin</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cct5<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Int32Array [3, 4, 5, 4, 5]</span><span class="token comment" spellcheck="true">// 对于没有部署 TypedArray 的 copyWithin 方法的平台</span><span class="token comment" spellcheck="true">// 需要采用下面的写法</span><span class="token keyword">let</span> cct6 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span>copyWithin<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Int32Array</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cct6<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Int32Array [4, 2, 3, 4, 5]</span></code></pre><h4 id="四-数组实例的-find-和-findIndex"><a href="#四-数组实例的-find-和-findIndex" class="headerlink" title="四 . 数组实例的 find() 和 findIndex()"></a>四 . 数组实例的 find() 和 findIndex()</h4><h5 id="1-数组实例的find方法，用于找出第一个符合条件的数组成员。"><a href="#1-数组实例的find方法，用于找出第一个符合条件的数组成员。" class="headerlink" title="1.数组实例的find方法，用于找出第一个符合条件的数组成员。"></a>1.数组实例的<code>find</code>方法，用于找出第一个符合条件的数组成员。</h5><blockquote><p>它的参数是一个回调函数，所有数组成员依次执行该回调函数，直到找出第一个返回值为<code>true</code>的成员，然后返回该成员。如果没有符合条件的成员，则返回<code>undefined</code> 。</p></blockquote><p><strong>语法</strong></p><pre class=" language-javascript"><code class="language-javascript">arr<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>callback<span class="token punctuation">[</span><span class="token punctuation">,</span> thisArg<span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p><strong>参数</strong></p><ul><li><p><code>callback</code></p><p>在数组每一项上执行的函数，接收 3 个参数：<code>element</code>当前遍历到的元素。<code>index</code>当前遍历到的索引。<code>array</code>数组本身。</p></li><li><p><code>thisArg</code>可选</p><p>可选，指定 <code>callback 的 this 参数。</code></p></li></ul><p>看下面的例子 :</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> cct <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>n <span class="token operator">=</span><span class="token operator">></span> n <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cct<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//-5</span><span class="token keyword">let</span> cct2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> index<span class="token punctuation">,</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> value <span class="token operator">></span> <span class="token number">9</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cct2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 10</span></code></pre><h5 id="2-findIndex方法的用法与find方法非常类似，返回第一个符合条件的数组成员的位置，如果所有成员都不符合条件，则返回-1"><a href="#2-findIndex方法的用法与find方法非常类似，返回第一个符合条件的数组成员的位置，如果所有成员都不符合条件，则返回-1" class="headerlink" title="2.findIndex方法的用法与find方法非常类似，返回第一个符合条件的数组成员的位置，如果所有成员都不符合条件，则返回-1 ."></a>2.<code>findIndex</code>方法的用法与<code>find</code>方法非常类似，返回第一个符合条件的数组成员的位置，如果所有成员都不符合条件，则返回<code>-1</code> .</h5><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> cct3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> index<span class="token punctuation">,</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> value <span class="token operator">></span> <span class="token number">9</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cct3<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2</span></code></pre><p><strong>另外，这两个方法都可以发现<code>NaN</code>，弥补了数组的<code>IndexOf</code>方法的不足</strong>。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">[</span><span class="token number">NaN</span><span class="token punctuation">]</span>  <span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// -1</span>  <span class="token punctuation">[</span><span class="token number">NaN</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span>y <span class="token operator">=</span><span class="token operator">></span> Object<span class="token punctuation">.</span><span class="token function">is</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 0</span></code></pre><p>上面代码中，<code>indexOf</code>方法无法识别数组的<code>NaN</code>成员，但是<code>findIndex</code>方法可以借助<code>Object.is</code>方法做到。</p><h4 id="五-fill"><a href="#五-fill" class="headerlink" title="五 . fill()"></a>五 . fill()</h4><p><code>fill</code>方法使用给定值，填充一个数组。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> cct4 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cct4<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [7, 7, 7]</span><span class="token keyword">let</span> cct5 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cct5<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [7, 7, 7]</span></code></pre><p>上面代码表明，<code>fill</code>方法用于空数组的初始化非常方便。数组中已有的元素，会被全部抹去。</p><p><code>fill</code>方法还可以接受第二个和第三个参数，用于指定填充的起始位置和结束位置。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> cct6 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cct6<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ['a', 7, 'c']</span></code></pre><p>上面代码表示，<code>fill</code>方法从 1 号位开始，向原数组填充 7，到 2 号位之前结束。</p><h4 id="六-entries-，keys-和-values"><a href="#六-entries-，keys-和-values" class="headerlink" title="六 . entries()，keys() 和 values()"></a>六 . entries()，keys() 和 values()</h4><h5 id="1-entries-方法返回一个新的Array-Iterator对象，该对象包含数组中每个索引的键-值对-。"><a href="#1-entries-方法返回一个新的Array-Iterator对象，该对象包含数组中每个索引的键-值对-。" class="headerlink" title="1.entries() 方法返回一个新的Array Iterator对象，该对象包含数组中每个索引的键/值对 。"></a>1.<code>entries()</code> 方法返回一个新的<strong>Array Iterator</strong>对象，该对象包含数组中每个索引的键/值对 。</h5><h5 id="2-keys-方法返回一个新的-Array-迭代器，它包含数组中每个索引的键。"><a href="#2-keys-方法返回一个新的-Array-迭代器，它包含数组中每个索引的键。" class="headerlink" title="2.keys()方法返回一个新的 Array 迭代器，它包含数组中每个索引的键。"></a>2.<code>keys()</code>方法返回一个新的 Array 迭代器，它包含数组中每个索引的键。</h5><h5 id="3-values-方法返回一个新的-Array-Iterator-对象，该对象包含数组每个索引的值。"><a href="#3-values-方法返回一个新的-Array-Iterator-对象，该对象包含数组每个索引的值。" class="headerlink" title="3.values() 方法返回一个新的 Array Iterator 对象，该对象包含数组每个索引的值。"></a>3.<strong>values()</strong> 方法返回一个新的 <strong>Array Iterator</strong> 对象，该对象包含数组每个索引的值。</h5><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> index <span class="token keyword">of</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 0</span><span class="token comment" spellcheck="true">// 1</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> elem <span class="token keyword">of</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>elem<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 'a'</span><span class="token comment" spellcheck="true">// 'b'</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> <span class="token punctuation">[</span>index<span class="token punctuation">,</span> elem<span class="token punctuation">]</span> <span class="token keyword">of</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> elem<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 0 'a'</span><span class="token comment" spellcheck="true">// 1 'b'</span></code></pre><p><strong>如果不使用<code>for...of</code>循环，可以手动调用遍历器对象的<code>next</code>方法，进行遍历。</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> letter <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> entries <span class="token operator">=</span> letter<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>entries<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [0, 'a']</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>entries<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [1, 'b']</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>entries<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [2, 'c']</span></code></pre><h4 id="七-includes"><a href="#七-includes" class="headerlink" title="七 . includes()"></a>七 . includes()</h4><p><code>includes()</code> 方法用来判断一个数组是否包含一个指定的值，如果是，返回 true, 反之则返回 false .</p><h5 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h5><pre class=" language-javascript"><code class="language-javascript">arr<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>searchElement<span class="token punctuation">)</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>searchElement<span class="token punctuation">,</span> fromIndex<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h5><ul><li><p><code>searchElement</code></p><p>需要查找的元素值。</p></li><li><p><code>fromIndex</code> 可选</p><p>从该索引处开始查找 <code>searchElement</code>。如果为负值，则按升序从 array.length + fromIndex 的索引开始搜索。默认为 0。</p></li></ul><h5 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h5><p>一个 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Boolean" target="_blank" rel="noopener"><code>Boolean</code></a>。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>  <span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span>  <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// false</span>  <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span></code></pre><p>该方法的第二个参数表示搜索的起始位置，默认为<code>0</code>。如果第二个参数为负数，则表示倒数的位置，如果这时它大于数组长度（比如第二个参数为<code>-4</code>，但数组长度为<code>3</code>），则会重置为从<code>0</code>开始。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span></code></pre><p><strong>注意 :</strong> 没有该方法之前，我们通常使用数组的<code>indexOf</code>方法，检查是否包含某个值。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span></code></pre><p><code>indexOf</code>方法有两个缺点，一是不够语义化，它的含义是找到参数值的第一个出现位置，所以要去比较是否不等于<code>-1</code>，表达起来不够直观。二是，它内部使用严格相等运算符（<code>===</code>）进行判断，这会导致对<code>NaN</code>的误判。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">[</span><span class="token number">NaN</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// -1</span></code></pre><p><code>includes</code>使用的是不一样的判断算法，就没有这个问题。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">[</span><span class="token number">NaN</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// true</span></code></pre><p>下面代码用来检查当前环境是否支持该方法，如果不支持，部署一个简易的替代版本。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> contains <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span>  Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>includes    <span class="token operator">?</span> <span class="token punctuation">(</span>arr<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> arr<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>    <span class="token punctuation">:</span> <span class="token punctuation">(</span>arr<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> arr<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span>el <span class="token operator">=</span><span class="token operator">></span> el <span class="token operator">===</span> value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'foo'</span><span class="token punctuation">,</span> <span class="token string">'bar'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'baz'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// => false</span></code></pre><p>另外，Map 和 Set 数据结构有一个<code>has</code>方法，需要注意与<code>includes</code>区分。</p><ul><li>Map 结构的<code>has</code>方法，是用来查找键名的，比如<code>Map.prototype.has(key)</code>、<code>WeakMap.prototype.has(key)</code>、<code>Reflect.has(target, propertyKey)</code>。</li><li>Set 结构的<code>has</code>方法，是用来查找值的，比如<code>Set.prototype.has(value)</code>、<code>WeakSet.prototype.has(value)</code>。</li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6 —— 模板字符串</title>
      <link href="/es6-string/"/>
      <url>/es6-string/</url>
      
        <content type="html"><![CDATA[<!-- ## ES6 —— 模板字符串 --><p>我们知道, 在传统的 JavaScript 语言，输出模板通常是这样写的 , 需要用<code>+</code>来拼接 :</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#result'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>  <span class="token string">'There are &lt;b>'</span> <span class="token operator">+</span>    basket<span class="token punctuation">.</span>count <span class="token operator">+</span>    <span class="token string">'&lt;/b> '</span> <span class="token operator">+</span>    <span class="token string">'items in your basket, '</span> <span class="token operator">+</span>    <span class="token string">'&lt;em>'</span> <span class="token operator">+</span>    basket<span class="token punctuation">.</span>onSale <span class="token operator">+</span>    <span class="token string">'&lt;/em> are on sale!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>上面这种写法相当繁琐不方便.</p><a id="more"></a><h4 id="ES6-引入了一种新型的字符串字面量语法，我们称之为模板字符串（template-strings）。"><a href="#ES6-引入了一种新型的字符串字面量语法，我们称之为模板字符串（template-strings）。" class="headerlink" title="ES6 引入了一种新型的字符串字面量语法，我们称之为模板字符串（template strings）。"></a>ES6 引入了一种新型的字符串字面量语法，我们称之为模板字符串（template strings）。</h4><h5 id="1-模板字符串（template-string）是增强版的字符串，用反引号（-）标识。"><a href="#1-模板字符串（template-string）是增强版的字符串，用反引号（-）标识。" class="headerlink" title="1.模板字符串（template string）是增强版的字符串，用反引号（`）标识。"></a>1.模板字符串（template string）是增强版的字符串，用反引号（`）标识。</h5><h5 id="2-它可以当作普通字符串使用，也可以用来定义多行字符串，或者在字符串中嵌入变量。"><a href="#2-它可以当作普通字符串使用，也可以用来定义多行字符串，或者在字符串中嵌入变量。" class="headerlink" title="2.它可以当作普通字符串使用，也可以用来定义多行字符串，或者在字符串中嵌入变量。"></a>2.它可以当作普通字符串使用，也可以用来定义多行字符串，或者在字符串中嵌入变量。</h5><h5 id="3-模板字符串中嵌入变量，需要将变量名写在-之中-。"><a href="#3-模板字符串中嵌入变量，需要将变量名写在-之中-。" class="headerlink" title="3.模板字符串中嵌入变量，需要将变量名写在 ${} 之中 。"></a>3.模板字符串中嵌入变量，需要将变量名写在 <code>${}</code> 之中 。</h5><h5 id="4-如果在模板字符串中需要使用反引号，则前面要用反斜杠转义。"><a href="#4-如果在模板字符串中需要使用反引号，则前面要用反斜杠转义。" class="headerlink" title="4.如果在模板字符串中需要使用反引号，则前面要用反斜杠转义。"></a>4.如果在模板字符串中需要使用反引号，则前面要用反斜杠转义。</h5><h5 id="5-如果使用模板字符串表示多行字符串，所有的空格和缩进都会被保留在输出之中。"><a href="#5-如果使用模板字符串表示多行字符串，所有的空格和缩进都会被保留在输出之中。" class="headerlink" title="5.如果使用模板字符串表示多行字符串，所有的空格和缩进都会被保留在输出之中。"></a>5.如果使用模板字符串表示多行字符串，所有的空格和缩进都会被保留在输出之中。</h5><h5 id="6-所有模板字符串的空格和换行，都是被保留的，比如-lt-ul-gt-标签前面会有一个换行。如果你不想要这个换行，可以使用trim方法消除它"><a href="#6-所有模板字符串的空格和换行，都是被保留的，比如-lt-ul-gt-标签前面会有一个换行。如果你不想要这个换行，可以使用trim方法消除它" class="headerlink" title="6.所有模板字符串的空格和换行，都是被保留的，比如&lt;ul&gt;标签前面会有一个换行。如果你不想要这个换行，可以使用trim方法消除它"></a>6.所有模板字符串的空格和换行，都是被保留的，比如<code>&lt;ul&gt;</code>标签前面会有一个换行。如果你不想要这个换行，可以使用<code>trim</code>方法消除它</h5><p><strong>看看下面的例子 :</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//1. 普通字符串</span><span class="token template-string"><span class="token string">`In JavaScript '\n' is a line-feed.`</span></span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 2 .字符串中嵌入变量</span><span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">'Bob'</span><span class="token punctuation">,</span>  time <span class="token operator">=</span> <span class="token string">'today'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`Hello </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, how are you </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>time<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">?`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 2.1如果变量没有声明,则会报错 !变量place没有声明</span><span class="token keyword">let</span> msg <span class="token operator">=</span> <span class="token template-string"><span class="token string">`Hello, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>place<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 报错</span><span class="token comment" spellcheck="true">//3 .反斜杠转义</span><span class="token keyword">let</span> greeting <span class="token operator">=</span> <span class="token template-string"><span class="token string">`\`Yo\` World!`</span></span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>greeting<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 4.多行字符串</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`string text line 1string text line 2`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//5.使用模板字符串表示多行字符串，所有的空格和缩进都会被保留在输出之中</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#list'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`&lt;ul>  &lt;li>first&lt;/li>  &lt;li>second&lt;/li>&lt;/ul>`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//6. 可以使用trim方法消除换行</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#list'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span>  <span class="token template-string"><span class="token string">`&lt;ul>  &lt;li>first&lt;/li>  &lt;li>second&lt;/li>&lt;/ul>`</span></span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="7-大括号内部可以放入任意的-JavaScript-表达式，可以进行运算，以及引用对象属性。"><a href="#7-大括号内部可以放入任意的-JavaScript-表达式，可以进行运算，以及引用对象属性。" class="headerlink" title="7.大括号内部可以放入任意的 JavaScript 表达式，可以进行运算，以及引用对象属性。"></a>7.大括号内部可以放入任意的 JavaScript 表达式，可以进行运算，以及引用对象属性。</h5><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">let</span> y <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>x<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> + </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>y<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>x <span class="token operator">+</span> y<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>  x <span class="token comment" spellcheck="true">// "1 + 2 = 3"</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> + </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>y <span class="token operator">*</span> <span class="token number">2</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>x <span class="token operator">+</span> y <span class="token operator">*</span> <span class="token number">2</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// "1 + 4 = 5"</span><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> x<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>obj<span class="token punctuation">.</span>x <span class="token operator">+</span> obj<span class="token punctuation">.</span>y<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// "3"</span></code></pre><h5 id="8-模板字符串之中还能调用函数。"><a href="#8-模板字符串之中还能调用函数。" class="headerlink" title="8.模板字符串之中还能调用函数。"></a>8.模板字符串之中还能调用函数。</h5><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token string">'Hello World'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token template-string"><span class="token string">`foo </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> bar`</span></span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// foo Hello World bar</span></code></pre><p>如果大括号中的值不是字符串，将按照一般的规则转为字符串。比如，大括号中是一个对象，将默认调用对象的<code>toString</code>方法。</p><h5 id="9-由于模板字符串的大括号内部，就是执行-JavaScript-代码，因此如果大括号内部是一个字符串，将会原样输出。"><a href="#9-由于模板字符串的大括号内部，就是执行-JavaScript-代码，因此如果大括号内部是一个字符串，将会原样输出。" class="headerlink" title="9.由于模板字符串的大括号内部，就是执行 JavaScript 代码，因此如果大括号内部是一个字符串，将会原样输出。"></a>9.由于模板字符串的大括号内部，就是执行 JavaScript 代码，因此如果大括号内部是一个字符串，将会原样输出。</h5><pre class=" language-javascript"><code class="language-javascript"><span class="token template-string"><span class="token string">`Hello </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token string">'World'</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// "Hello World"</span></code></pre><h5 id="10-模板字符串甚至还能嵌套。"><a href="#10-模板字符串甚至还能嵌套。" class="headerlink" title="10.模板字符串甚至还能嵌套。"></a>10.模板字符串甚至还能嵌套。</h5><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> tmpl <span class="token operator">=</span> addrs <span class="token operator">=</span><span class="token operator">></span> <span class="token template-string"><span class="token string">`  &lt;table>  ${addrs    .map(      addr => `</span></span>    <span class="token operator">&lt;</span>tr<span class="token operator">></span><span class="token operator">&lt;</span>td<span class="token operator">></span>$<span class="token punctuation">{</span>addr<span class="token punctuation">.</span>first<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">></span>    <span class="token operator">&lt;</span>tr<span class="token operator">></span><span class="token operator">&lt;</span>td<span class="token operator">></span>$<span class="token punctuation">{</span>addr<span class="token punctuation">.</span>last<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">></span>  <span class="token template-string"><span class="token string">`    )    .join('')}  &lt;/table>`</span></span><span class="token punctuation">;</span></code></pre><p>上面代码中，模板字符串的变量之中，又嵌入了另一个模板字符串，使用方法如下。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">{</span> first<span class="token punctuation">:</span> <span class="token string">'&lt;Jane>'</span><span class="token punctuation">,</span> last<span class="token punctuation">:</span> <span class="token string">'Bond'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span> first<span class="token punctuation">:</span> <span class="token string">'Lars'</span><span class="token punctuation">,</span> last<span class="token punctuation">:</span> <span class="token string">'&lt;Croft>'</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">tmpl</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// &lt;table></span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">//   &lt;tr>&lt;td>&lt;Jane>&lt;/td>&lt;/tr></span><span class="token comment" spellcheck="true">//   &lt;tr>&lt;td>Bond&lt;/td>&lt;/tr></span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">//   &lt;tr>&lt;td>Lars&lt;/td>&lt;/tr></span><span class="token comment" spellcheck="true">//   &lt;tr>&lt;td>&lt;Croft>&lt;/td>&lt;/tr></span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">// &lt;/table></span></code></pre><h5 id="11-如果需要引用模板字符串本身，在需要时执行，可以像下面这样写。"><a href="#11-如果需要引用模板字符串本身，在需要时执行，可以像下面这样写。" class="headerlink" title="11.如果需要引用模板字符串本身，在需要时执行，可以像下面这样写。"></a>11.如果需要引用模板字符串本身，在需要时执行，可以像下面这样写。</h5><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 写法一</span><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'return '</span> <span class="token operator">+</span> <span class="token string">'`Hello ${name}!`'</span><span class="token punctuation">;</span><span class="token keyword">let</span> func <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token string">'Jack'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "Hello Jack!"</span><span class="token comment" spellcheck="true">// 写法二</span><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'(name) => `Hello ${name}!`'</span><span class="token punctuation">;</span><span class="token keyword">let</span> func <span class="token operator">=</span> eval<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token string">'Jack'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "Hello Jack!"</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6 —— Set 和 Map 的数据结构</title>
      <link href="/es6-set-map/"/>
      <url>/es6-set-map/</url>
      
        <content type="html"><![CDATA[<!-- ## ES6 —— Set 和 Map 的数据结构 --><h3 id="一-Set"><a href="#一-Set" class="headerlink" title="一 . Set"></a>一 . Set</h3><p><code>ES6</code> 提供了新的数据结构 <code>Set</code> 。它类似于数组，但是成员的值都是唯一的，没有重复的值。</p><p><code>Set</code> 本身是一个构造函数，用来生成 <code>Set</code> 数据结构。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>x <span class="token operator">=</span><span class="token operator">></span> s<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">of</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 2</span><span class="token comment" spellcheck="true">// 3</span><span class="token comment" spellcheck="true">// 5</span><span class="token comment" spellcheck="true">// 4</span></code></pre><a id="more"></a><p>在 <code>Set</code> 内部，两个 <code>NaN</code> 是相等。两个对象总是不相等的。可以用 <code>length</code> 来检测 .</p><h4 id="Set-实例的属性和方法"><a href="#Set-实例的属性和方法" class="headerlink" title="Set 实例的属性和方法"></a><strong>Set 实例的属性和方法</strong></h4><p>Set 结构的实例有以下属性。</p><ul><li><code>Set.prototype.constructor</code>：构造函数，默认就是<code>Set</code>函数。</li><li><code>Set.prototype.size</code>：返回<code>Set</code>实例的成员总数。</li></ul><p>Set 实例的方法分为两大类：操作方法（用于操作数据）和遍历方法（用于遍历成员）。下面先介绍四个操作方法。</p><ul><li><code>add(value)</code>：添加某个值，返回 Set 结构本身。</li><li><code>delete(value)</code>：删除某个值，返回一个布尔值，表示删除是否成功。</li><li><code>has(value)</code>：返回一个布尔值，表示该值是否为<code>Set</code>的成员。</li><li><code>clear()</code>：清除所有成员，没有返回值。</li></ul><h4 id="遍历操作"><a href="#遍历操作" class="headerlink" title="遍历操作"></a>遍历操作</h4><p>Set 结构的实例有四个遍历方法，可以用于遍历成员。</p><ul><li><code>keys()</code>：返回键名的遍历器</li><li><code>values()</code>：返回键值的遍历器</li><li><code>entries()</code>：返回键值对的遍历器</li><li><code>forEach()</code>：使用回调函数遍历每个成员</li></ul><p>需要特别指出的是，<code>Set</code>的遍历顺序就是插入顺序。这个特性有时非常有用，比如使用 Set 保存一个回调函数列表，调用时就能保证按照添加顺序调用。</p><h3 id="二-Map"><a href="#二-Map" class="headerlink" title="二 . Map"></a>二 . Map</h3><p>Map 结构提供了“值—值”的对应，是一种更完善的 Hash 结构实现。如果你需要“键值对”的数据结构，Map 比 Object 更合适。它类似于对象，也是键值对的集合，但是“键”的范围不限于字符串，各种类型的值（包括对象）都可以当作键。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> m <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token punctuation">{</span> p<span class="token punctuation">:</span> <span class="token string">'Hello World'</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>m<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span> <span class="token string">'content'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>m<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "content"</span>m<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>m<span class="token punctuation">.</span><span class="token keyword">delete</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>m<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false</span></code></pre><p>注意，只有对同一个对象的引用，Map 结构才将其视为同一个键。这一点要非常小心。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">555</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// undefined</span></code></pre><p>上面代码的 <code>set</code> 和 <code>get</code> 方法，表面是针对同一个键，但实际上这是两个值，内存地址是不一样的，因此 get 方法无法读取该键，返回 <code>undefined</code>。</p><p>如果 Map 的键是一个简单类型的值（数字、字符串、布尔值），则只要两个值严格相等，<code>Map</code> 将其视为一个键，包括 <code>0</code> 和 <code>-0</code>。另外，虽然 <code>NaN</code> 不严格相等于自身，但 <code>Map</code> 将其视为同一个键。</p><p>实例属性和方法：<code>size</code>、<code>set</code>、<code>get</code>、<code>has</code>、<code>delete</code>、<code>clear</code></p><p>遍历方法：<code>keys()</code>、<code>values()</code>、<code>entries()</code>、<code>forEach()</code></p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript 原型链和原型继承</title>
      <link href="/es6-proptype-chain/"/>
      <url>/es6-proptype-chain/</url>
      
        <content type="html"><![CDATA[<!-- ## JavaScript 原型链和原型继承 --><p>JavaScript 中最难最繁复的一个知识点应该就是原型继承, 要说清楚原型继承，就得先了解清楚什么是原型链。</p><h3 id="一-原型链"><a href="#一-原型链" class="headerlink" title="一.原型链"></a>一.原型链</h3><p>在写 JavaScript 的时候，我们经常会写出下面的代码：</p><pre><code>const arr = [1, 2, 3];arr.push(4); // 4const string = &#39;Deepspace&#39;;string.slice(1);//eepspace</code></pre><p>那么我们会不会觉得很奇怪, 为什么我好端端的创建一个数组或者字符串，莫名其妙地就有了 <code>.push</code>, <code>.slice</code> 这些方法呢？</p><a id="more"></a><p>实际上, 我们用字面量创建字符串和数组是对 <code>Array</code> 和 <code>String</code> 进行了实例化 .</p><p>看看 MDN 上面是怎么说的 :</p><blockquote><p>当谈到继承时，Javascript 只有一种结构：对象。每个对象都有一个私有属性(称为[[Prototype]])，它持有一个连接到另一个称为其 prototype 对象的链接。该原型对象具有一个自己的原型，等等，直到达到一个对象的 prototype 为 null。根据定义，null 没有 prototype，并作为这个原型链 中的最后一个环节。</p><p>JavaScript 中几乎所有的对象都是位于原型链顶端的 Object 的实例。</p><p>……</p><p>JavaScript 对象是动态的属性“包”（指其自己的属性）。JavaScript 对象有一个指向一个原型对象的链。当试图访问一个对象的属性时，它不仅仅在该对象上搜寻，还会搜寻该对象的原型，以及该对象的原型的原型，依次层层向上搜索，直到找到一个名字匹配的属性或到达原型链的末尾。</p></blockquote><p>我们来验证一下 MDN 的说法 :</p><pre><code>arr.hasOwnProperty(&#39;push&#39;);     // falsestring.hasOwnProperty(&#39;slice&#39;); // false</code></pre><p><code>hasOwnProperty</code> 是用来检测指定的属性是否在对象本身上的，上面的两行代码都返回了 <code>false</code>。那么显然， <code>.push</code>, <code>.slice</code> 是原型链上的，那么 JavaScript 引擎是如何找到这两个方法的呢？</p><p>实际上，根据 ECMAScript 标准，每个对象都有一个 <code>[[prototype]]</code> 属性，用来指向该对象的原型，这等同于某些浏览器内核给 JavaScript 实现的 <code>__proto__</code> 属性（已在 ES6 中成为标准）。从 ECMAScript 6 开始，<code>[[Prototype]]</code>还可以用 <code>Object.getPrototypeOf()</code>和 <code>Object.setPrototypeOf()</code> 访问器来访问。</p><p>我们用下面的例子来说明 :</p><pre><code>const o = {    a: 1,    b: 2};// 演示使用，尽量不要直接操作 .__proto__// 否则可能造成原型链混乱o.__proto__ = {    b: 3,    c: 4};// 上面两行代码执行完，我们就创建了这么一段原型链：// { a:1, b:2 } --&gt; { b:3, c:4 } --&gt; Object.prototype --&gt; nullconsole.log(o.a); //1// a 是 o 的自身属性吗？是的，该属性的值为 1console.log(o.b); // 2// b 是 o 的自身属性吗？是的，该属性的值为 2// o.[[Prototype]] 上还有一个 b 属性，但是它不会被访问到。// 这种情况称为“属性遮蔽 (property shadowing)”。console.log(o.c); // 4// c 是 o 的自身属性吗？不是，那看看 o.[[Prototype]] 上有没有。// c 是 o.[[Prototype]] 的自身属性吗？是的，该属性的值为 4console.log(o.d); // undefined// d 是 o 的自身属性吗？不是，那看看 o.[[Prototype]] 上有没有.// d 是 o.[[Prototype]] 的自身属性吗？不是，那看看 o.[[Prototype]].[[Prototype]] 上有没有。// o.[[Prototype]].[[Prototype]] 为 null，停止搜索。// 没有 d 属性，返回 undefined。</code></pre><p>那么同样的, 文章刚开始的两段代码也是创建了原型链 :</p><pre><code>// [1, 2, 3] --&gt; Array.prototype -&gt; Object.prototype --&gt; nullconst arr = [1, 2, 3];console.log(arr.__proto__ === Array.prototype); // truearr.push(4); // 4// Array.prototype.push// [1, 2, 3] --&gt; String.prototype -&gt; Object.prototype --&gt; nullconst str = &#39;Deepspace&#39;;console.log(str.__proto__ === String.prototype); // truestr.slice(1); // eepspace// String.prototype.slice</code></pre><p><strong>那么对于函数又是怎么一回事呢？</strong></p><p>JavaScript 全部都是动态的，都是运行时，不存在类（classes）。实际上，在 JavaScript 中，所谓的类的构造器，其实就是一个普通的函数。当使用 <code>new</code> 来作用这个函数时，它就可以被称为构造方法（构造函数），比如：</p><pre><code>const Person = function (name, age) {    this.name = name;    this.age = age};Person.prototype.say = function () {    return &#39;hello!&#39;};// 创建了一个原型链// Deepspace --&gt; Person.prototype --&gt; Object.prototype --&gt; nullconst Deepspace = new Person(&#39;Deepspace&#39;, 22);console.log(Deepspace.say()); // hello!console.log(Deepspace.__proto__ === Person.prototype); // true</code></pre><p>可见，<code>Deepspace.__proto__</code> 指向了构造函数 <code>Person</code> 的 <code>prototype</code> , 形成了一个原型链。</p><h3 id="二-原型继承"><a href="#二-原型继承" class="headerlink" title="二.原型继承"></a>二.原型继承</h3><p>通过上面的描述, 我们已经对原型链有所了解. 我们再来看看原型继承 .</p><p>继承是面向对象的特性之一，JavaScript 当然也可以，只不过不是类继承，而是原型继承：</p><pre><code>const Animal = function () {};Animal.prototype.run = function () {    console.log(&#39;Animal run fast!&#39;)};// 继承 Animalconst Person = function (name, age) {    this.name = name;    this.age = age;};Person.prototype = new Animal();Person.prototype.constructor = Person;Person.prototype.say = function () {    console.log(&#39;hello!&#39;)};// Deepspace --&gt; Person.prototype --&gt; Animal.prototype --&gt; Object.prototype --&gt; nullconst Deepspace = new Person(&#39;Deepspace&#39;, 22);Deepspace.run(); // Animal run fast!Deepspace.say(); // hello!console.log(Deepspace.name);  // Deepspaceconsole.log(Deepspace.age);  // 22</code></pre><p>我们首先创造了一个名为 <code>Animal</code> 的构造函数，并给他的原型加了一个 <code>run()</code> 的方法。</p><p>接着我们创建了一个名为 <code>Person</code> 的构造函数，然后，我们将 <code>Person</code> 的原型指向了 <code>Animal</code> 的实例：</p><pre><code>Person.prototype = new Animal()</code></pre><p>这个的用处是，我们想把 <code>Animal</code> 原型上定义的方法继承下来，你也可以采用下面的办法：</p><pre><code>Person.prototype = Animal.prototype</code></pre><p>但是<strong>不建议</strong>这么写，<strong>因为这样会让 <code>Person</code> 和 <code>Animal</code> 共用了一个原型对象</strong>，那么之后我们对 <code>Person.prototype</code> 的修改也会相应的修改到 <code>Animal.prototype</code>，这是我们不希望的。</p><p>然后我们把 <code>Person.prototype.constructor</code> 指回了 <code>Person</code> 构造函数：</p><pre><code>Person.prototype.constructor = Person</code></pre><p>这是因为我们执行 <code>Person.prototype = new Animal()</code> 的时候，<code>Person.prototype.constructor</code> 会被改成 <code>Animal</code>，那么之后的 <code>Deepspace</code> 的构造函数就变成 <code>Animal</code> ，这是不对的，于是我们做了修正。</p><p>然后我们就可以愉快的给 <code>Person</code> 添加其他的方法了，比如我加了一个 <code>say</code>。那么实例出 <code>Deepspace</code> 我们可以看到，<code>Deepspace</code> 同时继承了 <code>Animal</code> 的 <code>run</code> 和 <code>Person</code> 的 <code>say</code> 方法，实现了原型继承。</p><h3 id="三-ES6-的语法糖"><a href="#三-ES6-的语法糖" class="headerlink" title="三.ES6 的语法糖"></a>三.ES6 的语法糖</h3><p>可以看到，使用原生来写原型继承实在是太麻烦了，于是 ES6 添加了一个语法糖—— <code>class</code>，新的 <code>class</code>写法只是让对象原型的写法更加清晰、更像“面向对象”编程的语法而已。</p><p>我们把上面的例子改写成 ES6 <code>class</code> 的形式：</p><pre><code>// Animal 类class Animal {    // 定义构造函数    constructor () {}    // 定义 run 方法    run () {        console.log(&#39;Animal run fast!&#39;)    }}// Person 类 继承于 Animalclass Person extends Animal {    // 重写 Animal 的构造函数    constructor (name, age) {        super();        this.name = name;        this.age = age    }    // 添加 say 方法    say () {        console.log(&#39;hello!&#39;)    }}const Deepspace = new Person(&#39;Deepspace&#39;, 22);Deepspace.run(); // Animal run fast!Deepspace.say(); // hello!console.log(Deepspace.name);  // Deepspaceconsole.log(Deepspace.age);  // 22</code></pre><p>有一点要注意，在继承的时候，构造函数内要记得使用 <code>super</code> 来调用父类的构造函数，否则新建实例时会报错。这是因为子类没有自己的 <code>this</code> 对象，而是继承父类的 <code>this</code> 对象，然后对其进行加工。如果不调用 <code>super</code> 方法，子类就得不到 <code>this</code> 对象。</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6 —— let 和 const</title>
      <link href="/es6-let-const/"/>
      <url>/es6-let-const/</url>
      
        <content type="html"><![CDATA[<!-- ## ES6 —— let 和 const --><h4 id="零、块级作用域"><a href="#零、块级作用域" class="headerlink" title="零、块级作用域"></a>零、块级作用域</h4><p>在学习 <code>let</code> 和 <code>const</code> 之前，我们不得不谈一谈 <code>ES5</code> 的块级作用域，理解为什么要在 <code>ES6</code> 引入 <code>let</code> 和 <code>const</code> 。</p><p>我们都知道：<strong>通过 <code>var</code> 声明的变量存在变量提升的特性。</strong> 看看下面的示例代码：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span>condition<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> value <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>我们可能会觉得只有 <code>condition</code> 为 <code>true</code> 的时候，才会创建 <code>value</code>，如果 <code>condition</code> 为 <code>false</code>，程序就不会走到 <code>if</code> 里面，结果是程序报错：<code>ReferenceError: value is not defined</code> 。</p><p>但是，因为变量提升的原因，实际代码相当于：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> value<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>condition<span class="token punctuation">)</span> <span class="token punctuation">{</span>    value <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>如果 <code>condition</code> 为 <code>false</code> ，结果会是 <code>undefined</code>。</p><p>除此之外，在 <code>for</code> 循环中：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//...</span>  <span class="token punctuation">}</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>即便循环已经结束了，我们依然可以访问 <code>i</code> 的值。</p><p>为了加强对变量生命周期的控制，<code>ECMAScript 6</code> 引入了块级作用域。</p><p>块级作用域存在于：</p><ul><li>函数内部</li><li>块中(字符 { 和 } 之间的区域)</li></ul><a id="more"></a><h4 id="一、let-声明变量"><a href="#一、let-声明变量" class="headerlink" title="一、let 声明变量"></a>一、let 声明变量</h4><p>在 <code>ES5</code> 中，除了全局作用域外，限定所声明的变量的作用域是函数作用域。这使得 <code>ES5</code> 在很多情况下为了模拟块级作用域（避免变量名污染）需要使用立即执行的匿名函数。在 ES6 中新增了声明块级使用域变量的关键字 <code>let</code>。与 <code>var</code> 相比，使用 <code>let</code> 声明的变量有如下特点：</p><ol><li><code>let</code> 声明的变量所在的作用域为块级;</li><li><code>let</code> 声明的变量不存在变量提升;</li><li><code>let</code> 声明的变量不允许重复声明，否则会报错。 使用 <code>let</code> 可以替代 <code>ES5</code> 中为了模拟块级作用域而使用的立即执行的匿名函数:</li></ol><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//ES5实现方法:</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//...</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//ES6实现方法:</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//...</span><span class="token punctuation">}</span></code></pre><p>我们具体来看看它的特点</p><p><strong>1 . 所声明的变量，只在 let 命令所在的代码块内有效</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">{</span>  <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span>a<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ReferenceError: a is not defined.</span>b<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1</span></code></pre><p>有了这个特性,我们经常使用 <code>for</code> 循环的计数器，就很合适使用 <code>let</code> 命令。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//ReferenceError: i is not defined</span></code></pre><p><strong>2 . let 不像 var 那样，会发生“变量提升”现象。</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">do_something</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ReferenceError</span>  <span class="token keyword">let</span> foo <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>上面代码在声明 <code>foo</code> 之前，就使用这个变量，结果会抛出一个错误。</p><p><strong>3 . 不允许重复声明</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 报错</span><span class="token punctuation">{</span>  <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 报错</span><span class="token punctuation">{</span>  <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>因此，不能在函数内部重新声明参数。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">func</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> arg<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 报错</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">func</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token punctuation">{</span>    <span class="token keyword">let</span> arg<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 不报错</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>4 . 另外，ES6 也规定，函数本身的作用域，在其所在的块级作用域之内。如 :</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'I am outside!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 重复声明一次函数f</span>    <span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'I am inside!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>上面代码在 <code>ES5</code> 中运行，会得到 <code>I am inside!</code>，但是在 <code>ES6</code> 中运行，会得到 <code>I am outside!</code>。这是因为 <code>ES5</code> 存在函数提升，不管会不会进入 <code>if</code> 代码块，函数声明都会提升到当前作用域的顶部，得到执行；而 <code>ES6</code> 支持块级作用域，不管会不会进入 <code>if</code> 代码块，其内部声明的函数皆不会影响到作用域的外部。</p><p>需要注意的是，如果在严格模式下，函数只能在顶层作用域和函数内声明，其他情况（比如 <code>if</code> 代码块、循环代码块）的声明都会报错。</p><h4 id="二、const-声明常量"><a href="#二、const-声明常量" class="headerlink" title="二、const 声明常量"></a>二、const 声明常量</h4><p><code>ES6</code> 中可以使用 <code>const</code> 关键字来声明常量，被声明的常量是不能被修改的。与使用 <code>let</code> 声明的变量类似，<code>const</code> 声明的常量为块级作用域，不存在变量提升，且不可重复声明。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> PI <span class="token operator">=</span> <span class="token number">3.1415</span><span class="token punctuation">;</span>PI<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 3.1415</span>PI <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>PI<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 3.1415,这里赋值无效,但是不会报错</span><span class="token keyword">const</span> PI <span class="token operator">=</span> <span class="token number">3.1</span><span class="token punctuation">;</span>PI<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 3.1415,这里重复声明了</span></code></pre><p>上面代码表明改变常量的值是不起作用的。需要注意的是，对常量重新赋值不会报错，只会默默地失败。</p><p><strong>注意 :</strong></p><p><code>const</code> 实际上保证的，并不是变量的值不得改动，而是变量指向的那个内存地址不得改动。对于简单类型的数据（数值、字符串、布尔值），值就保存在变量指向的那个内存地址，因此等同于常量。但对于复合类型的数据（主要是对象和数组），变量指向的内存地址，保存的只是一个指针，<code>const</code> 只能保证这个指针是固定的，至于它指向的数据结构是不是可变的，就完全不能控制了。因此，将一个对象声明为常量必须非常小心。 看个例子 :</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 为 foo 添加一个属性，可以成功</span>foo<span class="token punctuation">.</span>prop <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>foo<span class="token punctuation">.</span>prop<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 123</span><span class="token comment" spellcheck="true">// 将 foo 指向另一个对象，就会报错</span>foo <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// TypeError: "foo" is read-only</span></code></pre><p>另一个例子:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>a<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'Hello'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 可执行</span>a<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 可执行</span>a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Dave'</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 报错</span></code></pre><p>如果要使对象为常量的话可以配合 <code>Object.freeze()</code> 函数来实现 :</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> foo <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">freeze</span><span class="token punctuation">(</span><span class="token punctuation">{</span> a<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>foo <span class="token operator">=</span> <span class="token punctuation">{</span> b<span class="token punctuation">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//无法修改foo,严格模式下报错</span>foo<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//无法修改foo.a</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//1</span></code></pre><p>以上方法中的 <code>Object.freeze()</code> 函数本身有局限性，它只能冻结对象的属性不被修改，并不能冻结它的属性的属性被修改。如果要实现将对象内部所有属性冻结，需要使用自定义的强化的冻结函数。下面是一个深度冻结的方法:</p><pre class=" language-javascript"><code class="language-javascript">Object<span class="token punctuation">.</span>deepFreeze <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span> <span class="token punctuation">{</span>  Object<span class="token punctuation">.</span><span class="token function">freeze</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">;</span>  Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> object<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'object'</span><span class="token punctuation">)</span> <span class="token keyword">return</span> Object<span class="token punctuation">.</span><span class="token function">deepFreeze</span><span class="token punctuation">(</span>object<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>通过以上 <code>deepFreeze</code> 即可实现完全将对象常量化。效果如下：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> foo <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">freeze</span><span class="token punctuation">(</span><span class="token punctuation">{</span> a<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//使用原始的冻结函数</span><span class="token keyword">let</span> a <span class="token operator">=</span> foo<span class="token punctuation">.</span>a<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//本操作可以使foo.a变为[1,2]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//[1,2]</span><span class="token keyword">const</span> foo2 <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">deepFreeze</span><span class="token punctuation">(</span><span class="token punctuation">{</span> a<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//使用深度冻结函数</span><span class="token keyword">let</span> b <span class="token operator">=</span> foo2<span class="token punctuation">.</span>a<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//本操作无法改变foo2.a ,会报错</span><span class="token comment" spellcheck="true">//console.log(b);</span></code></pre><h4 id="三、全局对象属性"><a href="#三、全局对象属性" class="headerlink" title="三、全局对象属性"></a>三、全局对象属性</h4><p>全局对象是最顶层的对象，在浏览器环境指的是 <code>window</code> 对象，在 <code>Node.js</code> 指的是 <code>global</code> 对象。<code>ES5</code> 规定，所有全局变量都是全局对象的属性。</p><p><code>ES6</code> 规定，<code>var</code> 和 <code>function</code> 声明的全局变量，属于全局对象的属性；<code>let</code> 命令、<code>const</code> 命令、<code>class</code> 命令声明的全局变量，不属于全局对象的属性。例 :</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 如果在Node的REPL环境，可以写成global.a</span><span class="token comment" spellcheck="true">// 或者采用通用方法，写成this.a</span>window<span class="token punctuation">.</span>a<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1</span><span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>window<span class="token punctuation">.</span>b<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// undefined</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS 面向对象(一)</title>
      <link href="/js-oo-1/"/>
      <url>/js-oo-1/</url>
      
        <content type="html"><![CDATA[<!-- ## JS 面向对象(一) --><h3 id="一、什么是面向对象编程？"><a href="#一、什么是面向对象编程？" class="headerlink" title="一、什么是面向对象编程？"></a>一、什么是面向对象编程？</h3><p>维基百科上是这样说的</p><blockquote><p>Object-oriented programming (OOP) is a programming paradigm based on the concept of “objects”, which may contain data, in the form of fields, often known as attributes; and code, in the form of procedures, often known as methods.</p></blockquote><p>翻译一下：面向对象编程是一套基于“对象”这个概念的编程方法论。一个对象中会包含数据，通常叫“属性”，也会包含一些函数，通常叫方法。</p><h4 id="1-class-和-object"><a href="#1-class-和-object" class="headerlink" title="1.class 和 object"></a>1.class 和 object</h4><p>object 就是对象的英文，class 中文翻译为”类”，这两个概念是面向对象编程的最重要的概念。对象是类的实例化，例如人是一个类，人有名字这个属性，但是没有具体值。 把人这个类实例化成一个具体的人，给这个人具体赋值，这个具体的人，就是一个对象，对象中就有了实际的数据值了。</p><a id="more"></a><h4 id="2-为何要面向对象编程？"><a href="#2-为何要面向对象编程？" class="headerlink" title="2.为何要面向对象编程？"></a>2.为何要面向对象编程？</h4><p>面向过程其实最为实际的一种思考方式，因为我们总是一贯一步一步的解决问题。可以说面向过程是一种基础的方法，它考虑的是实际的实现。 所以面向过程编程其实是更对新手直观的，但是面向对象编程因为对数据和方法进行了封装，造成类是有极强的可复用性的，所以在大型项目中面向对象 几乎是标配了。</p><p>还是有一个有意思的小点要提一下，面向对象编程跟最直观的面向过程的编程有很大的区别。当然任何的编程都要考虑两个要素，一个是数据，另外一个是方法。面向对象先考虑 的是数据，后考虑方法，而面向过程编程是相反的。</p><h3 id="二、使用-Babel-编译-ES6"><a href="#二、使用-Babel-编译-ES6" class="headerlink" title="二、使用 Babel 编译 ES6"></a>二、使用 Babel 编译 ES6</h3><p>并不是所有的浏览器都支持 ES6（ES2015）的各种新语法。如果我们要把用 ES6 写的代码运行到产品环境下，还是要把 ES6 语法编译成 ES5 （也就是老语法）以获得 最佳的浏览器支持的。目前，工程实践中最常用的做法是用 Babel 来完成这个编译工作。具体怎么做呢？</p><h4 id="1-初始化一个项目"><a href="#1-初始化一个项目" class="headerlink" title="1.初始化一个项目"></a>1.初始化一个项目</h4><p>我们新建一个文件夹，就叫作 <code>oo-js-demo</code> 吧，执行：</p><pre><code>$ npm init -y</code></pre><h4 id="2-新建一个-html-文件"><a href="#2-新建一个-html-文件" class="headerlink" title="2.新建一个 html 文件"></a>2.新建一个 html 文件</h4><pre><code>&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;  &lt;meta charset=&quot;UTF-8&quot;&gt;  &lt;title&gt;o-o-js&lt;/title&gt;&lt;/head&gt;&lt;body&gt;  &lt;script src=&quot;build/main.js&quot;&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>我们要在 <code>src</code> 文件夹中新建 <code>main.js</code> , 简单写入 ES6 的一些新语法，然后使用 Babel 将其编译成 ES5 的语法，编译后的文件放在 <code>build</code> 文件夹下的 <code>main.js</code> , 这样在 html 中引入的 js 文件就可以在不支持 ES6 语法的浏览器中运行了。</p><h4 id="3-src-main-js"><a href="#3-src-main-js" class="headerlink" title="3.src/main.js"></a>3.src/main.js</h4><pre><code>class Person {  constructor(name) {    this.name = name  }}var Deepspace = new Person(&#39;Deepspace&#39;)console.log(Deepspace.name)</code></pre><h4 id="4-使用-Babel"><a href="#4-使用-Babel" class="headerlink" title="4.使用 Babel"></a>4.使用 Babel</h4><p>安装</p><pre><code>$ npm install --save-dev babel-cli$ npm install babel-preset-env --save-dev</code></pre><p>在根目录下创建一个 <code>.babelrc</code> 文件，写入以下内容：</p><pre><code>{  &quot;presets&quot;: [&quot;env&quot;]}</code></pre><p>然后在 <code>package.json</code> 中将 Babel 的命令写入进去：</p><pre><code>{  &quot;name&quot;: &quot;oo-js-demo&quot;,  &quot;version&quot;: &quot;1.0.0&quot;,  &quot;description&quot;: &quot;&quot;,  &quot;main&quot;: &quot;index.js&quot;,  &quot;scripts&quot;: {    &quot;build&quot;: &quot;babel src -d build&quot;  },  &quot;author&quot;: &quot;&quot;,  &quot;license&quot;: &quot;ISC&quot;,  &quot;devDependencies&quot;: {    &quot;babel-cli&quot;: &quot;^6.26.0&quot;,    &quot;babel-preset-env&quot;: &quot;^1.6.1&quot;  }}</code></pre><p>最后，执行：</p><pre><code>$ npm run build</code></pre><p>这样，就会在根目录创建 <code>build</code> 文件夹，并将编译好的 ES5 语法写入 <code>build/main.js</code> 中。</p><h3 id="三、Class-核心知识"><a href="#三、Class-核心知识" class="headerlink" title="三、Class 核心知识"></a>三、Class 核心知识</h3><h4 id="1-写一个-Class"><a href="#1-写一个-Class" class="headerlink" title="1.写一个 Class"></a>1.写一个 Class</h4><p>我们先用 ES5 的语法写个类</p><pre><code>function Person(name) {  this.name = name;}Person.prototype.changeName = function(newName) {  this.name = newName;};</code></pre><p>ES6 语法：</p><pre><code>class Person {  constructor(name) {    this.name = name;  }  changeName(newName) {    this.name = newName;  }}</code></pre><p>使用的时候都是一样的，都用 new 关键字</p><pre><code>var Deepspace = new Person(&#39;Deepspace&#39;);console.log(Deepspace.name);Deepspace.changeName(&#39;Deepspace&#39;);console.log(Deepspace.name);</code></pre><h4 id="2-理解-this-的指向"><a href="#2-理解-this-的指向" class="headerlink" title="2.理解 this 的指向"></a>2.理解 this 的指向</h4><blockquote><p>在面向对象编程条件下，类的方法内部如果含有 this，它默认指向类的实例。</p></blockquote><pre><code>class Person {  constructor(name) {    this.name = name;    console.log(this);  }  changeName(newName) {    this.name = newName;  }  sayName(){    console.log(this.name);  }}let deepspace = new Person(&#39;deepspace&#39;);let togoblog = new Person(&#39;togoblog&#39;);deepspace.changeName(&#39;cxin&#39;);deepspace.sayName();</code></pre><p>打印出来的结果是：</p><pre><code>Person { name: &#39;deepspace&#39; }Person { name: &#39;togoblog&#39; }cxin</code></pre><p>我们也可以使用“对象字面量”的形式来定义对象 :</p><pre><code>let Person = {  name: &#39;Peter&#39;,  talk: function() {    console.log(`My name is ${this.name}`);  }}Person.talk();</code></pre><h4 id="3-bind"><a href="#3-bind" class="headerlink" title="3.bind"></a>3.bind</h4><p>this 在不同的执行上下文中指向不同的对象，这样往往会造成 undefined 错误，bind 要解决的就是明确函数在执行的时候 this 的指向。</p><p>理解 bind 和 this 是使用 JS 对象的必备基础。我们看下面的例子：</p><pre><code>let Person = {  name: &#39;Deepspace&#39;,  talk: function() {    console.log(`My name is ${this.name}`);  }};Person.talk();let plzTalk = Person.talk;plzTalk();</code></pre><p>执行的结果会是这样的：</p><pre><code>My name is DeepspaceMy name is undefined</code></pre><p>为什么呢？其实 <code>let plzTalk = Person.talk;</code> 可以写成这样：</p><pre><code>let plzTalk = function() {  console.log(`My name is ${this.name}`);}</code></pre><p>那 <code>this.name</code> 自然就是 undefined 的了。</p><p><strong>使用 bind 之后</strong> :</p><pre><code>let Person = {  name: &#39;Deepspace&#39;,  talk: function() {    console.log(`My name is ${this.name}`);  }};Person.talk();let plzTalk = Person.talk;plzTalk.bind(Person)();</code></pre><p>也可以写成下面这样：</p><pre><code>let Person = {  name: &#39;Deepspace&#39;}let plzTalk = function() {    console.log(`My name is ${this.name}`);};plzTalk.bind(Person)();</code></pre><p>所以总结一下： bind 的作用就是把一个对象（作为 bind 的参数传入），绑定到这个函数中的 this 之上。</p><h4 id="4-bind-的例子"><a href="#4-bind-的例子" class="headerlink" title="4.bind 的例子"></a>4.bind 的例子</h4><p>再举一个 bind/this 的小例子，加深一下理解。</p><p>看下面这个例子：</p><pre><code>function talk() {  console.log(this.sound);}let Person = {  sound: &#39;Hi there!&#39;,  speak: talk};Person.speak();</code></pre><p>执行后的结果：</p><pre><code>Hi there!</code></pre><p>是可以正确输出 sound 的值的。其实是把 talk 这个函数拷贝到了 Person 对象中的 speak 中的 talk，这时候 this 就是指向 Person 这个对象，所以可以正确输出！</p><p>所以，这样做也是可以的：</p><pre><code>function talk() {  console.log(this.sound);}let Person = {  sound: &#39;Hi there!&#39;,};talk.bind(Person)();</code></pre><h4 id="5-静态方法"><a href="#5-静态方法" class="headerlink" title="5.静态方法"></a>5.静态方法</h4><p>我们在调用 class 里面的方法的时候，需要先将类实例化成对象，然后调用对象中的方法，这是很不方便的。</p><p>静态方法（ static method ）可以让我们不用实例化 class ，直接呼叫，很适合用来组织很多小功能到一个 Class 之上。</p><p>我们先看下面的错误示范：</p><pre><code>class Person {  constructor() {  }  sayHello() {    console.log(&quot;Hello&quot;);  }}Person.sayHello();</code></pre><p>会报错：</p><pre><code>TypeError: Person.sayHello is not a function</code></pre><p>我们只需要在方法前加上 <code>static</code> 关键字即可</p><pre><code>class Person {  constructor() {  }  static sayHello() {    console.log(&quot;Hello&quot;);  }}Person.sayHello();</code></pre><p>运行一下，会正确打印出 <code>Hello</code> , OK !</p><h3 id="四、继承"><a href="#四、继承" class="headerlink" title="四、继承"></a>四、继承</h3><h4 id="1-父类和子类"><a href="#1-父类和子类" class="headerlink" title="1.父类和子类"></a>1.父类和子类</h4><p>面向对象编程中所谓”继承”，指的就是子类会继承父类的属性和方法。ES6 语法中，继承通过 extends 关键字来实现。</p><p><strong>通过下面的代码来演示这几个效果：</strong></p><ul><li>子类中可以使用父类中的属性</li><li>子类中可以调用父类中的方法</li><li>子类中可以扩展自己的属性和方法</li></ul><pre><code>class Father {  constructor() {    this.gender = &#39;male&#39;;  }  getFamilyName() {    console.log(`The family name is Zhang`);  }}class Son extends Father {  constructor() {    super();    this.height = 160;  }  getSchoolName() {    console.log(&#39;NO.2 Middle School&#39;);  }}let tom = new Son;console.log(tom.gender);console.log(tom.height);tom.getFamilyName();tom.getSchoolName();</code></pre><h4 id="2-super-调用父类方法"><a href="#2-super-调用父类方法" class="headerlink" title="2.super 调用父类方法"></a>2.super 调用父类方法</h4><p>使用类继承的过程中，理解 super() 的作用是非常必要的。</p><p><strong>super 是什么？</strong></p><p>可以这样简单的认为： super 代表父类。主要有两个用途：</p><ul><li>使用 super() 呼叫父类的 constructor()</li><li>使用 <code>super.functionName()</code> 调用父类中的 static 方法</li></ul><p><strong>super() 的作用</strong></p><p>子类必须在 constructor 方法中调用 super 方法，否则新建实例时会报错。这是因为子类没有自己的 this 对象，而是继承父类的 this 对象，然后对其进行加工。如果不调用 super 方法，子类就得不到 this 对象。</p><p>ES6 的继承机制，实质是先创造父类的实例对象 this（所以必须先调用 super 方法），然后再用子类的构造函数修改 this。</p><pre><code>class Father {  constructor(familyName){    this.familyName = familyName;  }  getFamilyName(){    return `The family name is ${this.familyName}`;  }  static sayHello() {    console.log(&#39;hello&#39;);  }}class Son extends Father {  constructor(familyName, height) {    super(familyName);    this.height = height; // 没有上一行的 super() ，这里的 this 就不让用  }  getSchool(){    return &#39;NO.2 Middle School!&#39;;  }  static hello() {    super.sayHello(); // 调用父类的静态方法  }}let tom = new Son(&#39;Chen&#39;, 180);console.log(tom.height);console.log(tom.getFamilyName());console.log(Son.hello());</code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo+Github 搭建博客教程</title>
      <link href="/create-blog-site-with-hexo/"/>
      <url>/create-blog-site-with-hexo/</url>
      
        <content type="html"><![CDATA[<!-- ## Hexo+Github 搭建博客教程 --><blockquote><p> github 有一个非常强大的功能 —— <strong>GitHub Page</strong></p></blockquote><p>GitHub Pages 有以下几个优点：</p><ul><li>轻量级的博客系统，没有麻烦的配置</li><li>免费空间，享受 Git 版本管理功能</li><li>使用标记语言，比如 Markdown</li><li>无需自己搭建服务器</li><li>可以绑定自己的域名</li></ul><p>当然他也有缺点：</p><ul><li>搭配模板系统，相当于静态页发布，每运行生成一次都必须遍历全部的文本文件，网站越大，生成时间越长</li><li>动态程序的部分相当局限，比如没有评论，不过有解决方案</li><li>基于 Git，很多东西需要定制，不像 Wordpress 有强大的后台</li></ul><p>要想搭建漂亮的 blog，还需要模板系统，官方推荐的是 jekyll，但是配置稍复杂，我们使用另一个选择 —— <a href="https://hexo.io/" target="_blank" rel="noopener">hexo</a>，一个简单地、轻量地、基于 Node 的一个静态博客框架。</p><p>下面介绍下如何使用 hexo + github pages 搭建个人博客 。<br><a id="more"></a></p><h3 id="一-安装GIt"><a href="#一-安装GIt" class="headerlink" title="一. 安装GIt"></a>一. 安装GIt</h3><h4 id="1-for-windows"><a href="#1-for-windows" class="headerlink" title="1. for windows :"></a>1. for windows :</h4><p><a href="https://github.com/git-for-windows/git/releases/tag/v2.14.1.windows.1" target="_blank" rel="noopener">https://github.com/git-for-windows/git/releases/tag/v2.14.1.windows.1</a></p><h4 id="2-for-linux"><a href="#2-for-linux" class="headerlink" title="2. for linux :"></a>2. for linux :</h4><pre class=" language-shell"><code class="language-shell">$ sudo apt-get update$ sudo apt-get install git  </code></pre><p>安装下载完成后，可以使用下面的命令行，确认<code>git</code>的版本：</p><pre class=" language-shell"><code class="language-shell">$ git --version</code></pre><h3 id="二-安装node"><a href="#二-安装node" class="headerlink" title="二.安装node"></a>二.安装node</h3><h4 id="1-for-windows-1"><a href="#1-for-windows-1" class="headerlink" title="1. for windows"></a>1. for windows</h4><p><a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">https://nodejs.org/en/download/</a></p><h4 id="2-for-linux-1"><a href="#2-for-linux-1" class="headerlink" title="2. for linux"></a>2. for linux</h4><p>1 . 先装一个 nvm (  <a href="https://github.com/creationix/nvm" target="_blank" rel="noopener">https://github.com/creationix/nvm</a> )</p><pre class=" language-shell"><code class="language-shell">$ curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.25.2/install.sh | bash</code></pre><p>nvm 的全称是 <strong>Node Version Manager</strong>，之所以需要这个工具，是因为 Node.js 的各种特性都没有稳定下来，所以我们经常由于老项目或尝新的原因，需要切换各种版本。</p><p>安装完成后，你的 shell 里面应该就有个 nvm 命令了，调用它试试 , 有输出 ,  则 nvm 安装成功</p><pre class=" language-shell"><code class="language-shell">$ nvm</code></pre><ol start="2"><li>使用 nvm 的命令安装 Node.js 最新版</li></ol><pre class=" language-shell"><code class="language-shell">$ nvm install node</code></pre><p>查看安装效果</p><pre><code>nvm use node</code></pre><p>显示 :</p><pre class=" language-shell"><code class="language-shell">Now using node v6.11.0 (npm v3.10.10)</code></pre><h3 id="三-安装-hexo"><a href="#三-安装-hexo" class="headerlink" title="三. 安装 hexo"></a>三. 安装 hexo</h3><pre class=" language-shell"><code class="language-shell">$ npm install hexo-cli -g</code></pre><h3 id="四-初始化-hexo-博客项目"><a href="#四-初始化-hexo-博客项目" class="headerlink" title="四. 初始化 hexo 博客项目"></a>四. 初始化 hexo 博客项目</h3><p>1.新建一个文件夹 ( 我是在桌面创建的 HEXO )</p><p>2.在Hexo文件下，右键运行Git Bash，输入命令：</p><pre class=" language-shell"><code class="language-shell">$ hexo init</code></pre><p>会生成如下图所示的文件结构 :</p><p><img src="./../../ImageHosting/Hexo/hexo-folder.png" alt="xhexo-folder"></p><p>下面对文件目录做个简单介绍 :</p><p><strong>1. _config.yml</strong></p><p>全局配置文件，网站的很多信息都在这里配置，诸如网站名称，副标题，描述，作者，语言，主题，部署等等参数, 这个文件下面会做较为详细的介绍 。</p><p><strong>2. scaffolds</strong></p><p><code>scaffolds</code> 是“ 脚手架、骨架 ”的意思，当你新建一篇文章（<code>hexo new  &#39;title&#39;</code>）的时候，<code>hexo</code>是根据这个目录下的文件进行构建的 。</p><p><strong>3. package.json</strong></p><p><code>hexo</code> 框架的参数和所依赖插件，如下：</p><pre class=" language-shell"><code class="language-shell">{  "name": "hexo-site",  "version": "0.0.0",  "private": true,  "hexo": {    "version": ""  },  "dependencies": {    "hexo": "^3.2.0",    "hexo-generator-archive": "^0.1.4",    "hexo-generator-category": "^0.1.3",    "hexo-generator-index": "^0.2.0",    "hexo-generator-tag": "^0.2.0",    "hexo-renderer-ejs": "^0.3.0",    "hexo-renderer-stylus": "^0.3.1",    "hexo-renderer-marked": "^0.3.0",    "hexo-server": "^0.2.0"  }}</code></pre><p>如果后期我们想安装一些插件, 也会写入 <code>package.json</code> 当中 .</p><p><strong>4. source</strong></p><p>这个目录很重要，新建的文章都是在保存在这个目录下的.</p><ul><li><p><code>_posts</code> 。需要新建的博文都放在 <code>_posts</code> 目录下。</p></li><li><p><code>_posts</code> 目录下是一个个 <code>markdown</code> 文件。你应该可以看到一个 <code>hello-world.md</code> 的文件，文章就在这个文件中编辑 。</p></li><li><p><code>_posts</code> 目录下的<code>md</code>文件，会被编译成 <code>html</code> 文件，放到 <code>public</code> （此文件现在应该没有，因为你还没有编译过）文件夹下。</p></li></ul><p><strong>5. themes</strong></p><p>网站主题目录，hexo有非常好的主题拓展，支持的主题也很丰富。该目录下，每一个子目录就是一个主题</p><p><strong>6. 我们打开 <code>theme</code> 文件夹下的主题文件夹, 会发现也有一个 <code>_config.yml</code> 文件</strong></p><p><code>_config.yml</code> 文件中的内容，是主题的一个配置信息</p><p><code>_config.yml</code> 采用YAML语法格式，具体配置可以参考<a href="https://hexo.io/zh-cn/docs/configuration.html" target="_blank" rel="noopener">官方文档</a></p><h3 id="五-本地浏览博客"><a href="#五-本地浏览博客" class="headerlink" title="五.本地浏览博客"></a>五.本地浏览博客</h3><p>分别输入下面两条命令 :</p><pre><code>$ hexo g$ hexo s</code></pre><p>在浏览器中输入 : <code>http://localhost:4000/</code></p><p>会看到 :</p><p><img src="./../../ImageHosting/Hexo/hexo-init-theme.png" alt="hexo-init-theme"></p><h3 id="六-部署到-Github-上"><a href="#六-部署到-Github-上" class="headerlink" title="六.部署到 Github 上"></a>六.部署到 <code>Github</code> 上</h3><ol><li><p>申请Github账号 ( 别忘了邮箱验证 )</p></li><li><p>新建一个 <code>Repository</code>  , 注意仓库的名字前缀必须和自己 <code>github</code> 的用户名保持严格一致，如 <code>IDeepspace.github.io</code></p></li><li><p>在 <code>_config.yml</code> 进行配置</p></li></ol><pre class=" language-shell"><code class="language-shell"># Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy:  type: git  repo:    github: https://github.com/IDeepspace/IDeepspace.github.io.git  branch: master</code></pre><p>在 <code>deploy</code> 中配置自己的仓库信息 ( 注意冒号后面有空格 )</p><ol start="4"><li>安装<a href="https://github.com/hexojs/hexo-deployer-git" target="_blank" rel="noopener">hexo-deployer-git</a>自动部署发布工具</li></ol><pre class=" language-shell"><code class="language-shell">$  npm install hexo-deployer-git -–save</code></pre><ol start="5"><li>发布到Github</li></ol><p>输入如下命令 :</p><pre><code>$ hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</code></pre><p>然后输入自己的 <code>Github</code> 用户名和密码即可</p><ol start="6"><li>在浏览器中输入  <a href="https://IDeepspace.github.io/" target="_blank" rel="noopener">https://IDeepspace.github.io/</a> 便可以打开自己的博客啦 !</li></ol>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo博客－性能优化之静态文件压缩</title>
      <link href="/hexo-performance-optimization/"/>
      <url>/hexo-performance-optimization/</url>
      
        <content type="html"><![CDATA[<!-- ## Hexo博客－性能优化之静态文件压缩 --><h3 id="使用Gulp优化Hexo"><a href="#使用Gulp优化Hexo" class="headerlink" title="使用Gulp优化Hexo"></a>使用Gulp优化Hexo</h3><h4 id="1-安装依赖"><a href="#1-安装依赖" class="headerlink" title="1.安装依赖"></a>1.安装依赖</h4><pre class=" language-shell"><code class="language-shell">$ npm install gulp gulp-uglify gulp-clean-css gulp-htmlmin gulp-htmlclean gulp-imagemin gulp-concat --save-dev</code></pre><p>如果安装的依赖和已经存在的依赖有冲突 , 可在 <code>package.json</code> 中添加以下开发依赖 :</p><pre class=" language-shell"><code class="language-shell">"devDependencies": {    "gulp": "^3.9.1",    "gulp-concat": "^2.6.1",    "gulp-htmlclean": "^2.7.15",    "gulp-htmlmin": "^3.0.0",    "gulp-imagemin": "^3.3.0",    "gulp-clean-css": "^2.3.2",    "gulp-uglify": "^3.0.0"}</code></pre><a id="more"></a><h4 id="2-创建-gulpfile-js"><a href="#2-创建-gulpfile-js" class="headerlink" title="2.创建 gulpfile.js"></a>2.创建 gulpfile.js</h4><p>在 <code>hexo blog</code> 的根目录文件夹下创建 <code>gulpfile.js</code> :</p><p>写入以下内容 :</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> gulp <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'gulp'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  uglify <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'gulp-uglify'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  cssmin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'gulp-clean-css'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  imagemin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'gulp-imagemin'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  htmlmin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'gulp-htmlmin'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  htmlclean <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'gulp-htmlclean'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>concat <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'gulp-concat'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//JS压缩</span>gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">'uglify'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> gulp    <span class="token punctuation">.</span><span class="token function">src</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'./public/js/**/.js'</span><span class="token punctuation">,</span> <span class="token string">'!./public/js/**/*min.js'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//只是排除min.js文件还是不严谨，一般不会有问题，根据自己博客的修改我的修改为return gulp.src(['./public</span><span class="token comment" spellcheck="true">/**/</span><span class="token operator">*</span><span class="token punctuation">.</span>js<span class="token string">','</span><span class="token operator">!</span><span class="token punctuation">.</span><span class="token operator">/</span><span class="token keyword">public</span><span class="token operator">/</span>zuoxi<span class="token comment" spellcheck="true">/**/</span><span class="token operator">*</span><span class="token punctuation">.</span>js<span class="token string">',,'</span><span class="token operator">!</span><span class="token punctuation">.</span><span class="token operator">/</span><span class="token keyword">public</span><span class="token operator">/</span>radio<span class="token comment" spellcheck="true">/**/</span><span class="token operator">*</span><span class="token punctuation">.</span>js'<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">uglify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>gulp<span class="token punctuation">.</span><span class="token function">dest</span><span class="token punctuation">(</span><span class="token string">'./public/js'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//对应修改为./public即可</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//public-fancybox-js压缩</span>gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">'fancybox:js'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> gulp    <span class="token punctuation">.</span><span class="token function">src</span><span class="token punctuation">(</span><span class="token string">'./public/vendors/fancybox/source/jquery.fancybox.js'</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">uglify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>gulp<span class="token punctuation">.</span><span class="token function">dest</span><span class="token punctuation">(</span><span class="token string">'./public/vendors/fancybox/source/'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 合并 JS</span>gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">'jsall'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    gulp      <span class="token punctuation">.</span><span class="token function">src</span><span class="token punctuation">(</span><span class="token string">'./public/**/*.js'</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// 压缩后重命名</span>      <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token string">'app.js'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>gulp<span class="token punctuation">.</span><span class="token function">dest</span><span class="token punctuation">(</span><span class="token string">'./public'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//public-fancybox-css压缩</span>gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">'fancybox:css'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> gulp    <span class="token punctuation">.</span><span class="token function">src</span><span class="token punctuation">(</span><span class="token string">'./public/vendors/fancybox/source/jquery.fancybox.css'</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">cssmin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>gulp<span class="token punctuation">.</span><span class="token function">dest</span><span class="token punctuation">(</span><span class="token string">'./public/vendors/fancybox/source/'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//CSS压缩</span>gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">'cssmin'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> gulp    <span class="token punctuation">.</span><span class="token function">src</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'./public/css/main.css'</span><span class="token punctuation">,</span> <span class="token string">'!./public/css/*min.css'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">cssmin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>gulp<span class="token punctuation">.</span><span class="token function">dest</span><span class="token punctuation">(</span><span class="token string">'./public/css/'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">/</span><span class="token operator">/</span>图片压缩gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">'minify-img-aggressive'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> gulp<span class="token punctuation">.</span><span class="token function">src</span><span class="token punctuation">(</span><span class="token string">'./public/medias/**/*.*'</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">imagemin</span><span class="token punctuation">(</span>        <span class="token punctuation">[</span>imagemin<span class="token punctuation">.</span><span class="token function">gifsicle</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'optimizationLevel'</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        imagemin<span class="token punctuation">.</span><span class="token function">jpegtran</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'progressive'</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        imagemin<span class="token punctuation">.</span><span class="token function">optipng</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'optimizationLevel'</span><span class="token punctuation">:</span> <span class="token number">7</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        imagemin<span class="token punctuation">.</span><span class="token function">svgo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span><span class="token string">'verbose'</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>gulp<span class="token punctuation">.</span><span class="token function">dest</span><span class="token punctuation">(</span><span class="token string">'./public/medias'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 压缩 public 目录 html文件 public</span><span class="token comment" spellcheck="true">/**/</span><span class="token operator">*</span><span class="token punctuation">.</span>hmtl 表示<span class="token keyword">public</span>下所有文件夹中html，包括当前目录gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">'minify-html'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> gulp    <span class="token punctuation">.</span><span class="token function">src</span><span class="token punctuation">(</span><span class="token string">'./public/**/*.html'</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">htmlclean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>      <span class="token function">htmlmin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        removeComments<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        minifyJS<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        minifyCSS<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        minifyURLs<span class="token punctuation">:</span> <span class="token boolean">true</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>gulp<span class="token punctuation">.</span><span class="token function">dest</span><span class="token punctuation">(</span><span class="token string">'./public'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">'build'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>  <span class="token string">'uglify'</span><span class="token punctuation">,</span>  <span class="token string">'jsall'</span><span class="token punctuation">,</span>  <span class="token string">'cssmin'</span><span class="token punctuation">,</span>  <span class="token string">'minify-img-aggressive'</span><span class="token punctuation">,</span>  <span class="token string">'fancybox:js'</span><span class="token punctuation">,</span>  <span class="token string">'fancybox:css'</span><span class="token punctuation">,</span>  <span class="token string">'minify-html'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="2-执行优化命令"><a href="#2-执行优化命令" class="headerlink" title="2.执行优化命令"></a>2.执行优化命令</h4><pre class=" language-shell"><code class="language-shell">$ hexo clean$ hexo g$ gulp build$ hexo d</code></pre><p>连续执行4个命令太麻烦， 可以直接在根目录下的 <code>package.json</code> 文件中生成写入 <code>scripts</code> :</p><pre class=" language-shell"><code class="language-shell">"scripts": {  "build": "hexo clean && hexo g && gulp build && hexo deploy"  }</code></pre><p>然后执行命令 :</p><pre class=" language-shell"><code class="language-shell">$ npm run build</code></pre><p>以前都是使用 <code>hexo clean</code>  ,  <code>hexo g</code>  , <code>hexo d</code> 来自动更新博文，虽然命令不长，还是不如上面一条命令来的直接 !</p><p>至此，可以得到一个 <code>html</code> 、<code>css</code> 、<code>js</code> 、<code>image</code> 都更优化的 <code>/public</code>文件夹，我用评测工具测试了一下博客打开速度, 确实快了不少 !</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何自动备份Hexo博客源文件</title>
      <link href="/hexo-backup/"/>
      <url>/hexo-backup/</url>
      
        <content type="html"><![CDATA[<!-- ## 如何自动备份Hexo博客源文件 --><h3 id="一-前言"><a href="#一-前言" class="headerlink" title="一.前言"></a>一.前言</h3><blockquote><p>电脑装了双系统，前些天重装了系统，没有备份 <code>Hexo</code> 博客源文件，只能重新去安装一堆依赖和修改配置了。。。搜了一下网络教程解决了备份的问题，所以此博客记录自动备份<code>Hexo</code>博客源文件到<code>Github</code>的过程。</p></blockquote><p>原文出自：<a href="http://notes.xiamo.tk/2015-07-06-%E8%87%AA%E5%8A%A8%E5%A4%87%E4%BB%BDHexo%E5%8D%9A%E5%AE%A2%E6%BA%90%E6%96%87%E4%BB%B6.html" target="_blank" rel="noopener">自动备份Hexo博客源文件</a></p><h3 id="二-原理"><a href="#二-原理" class="headerlink" title="二.原理"></a>二.原理</h3><p>通过通过监听<code>Hexo</code> 的其它事件来完成自动执行Git命令完成自动备份。查阅<a href="https://hexo.io/zh-cn/api/events.html#deployBefore" target="_blank" rel="noopener">Hexo文档</a>，找到了<code>Hexo</code> 的主要事件，见下表：</p><table><thead><tr><th>事件名</th><th>事件发生时间</th></tr></thead><tbody><tr><td>deployBefore</td><td>在部署完成前发布</td></tr><tr><td>deployAfter</td><td>在部署成功后发布</td></tr><tr><td>exit</td><td>在 Hexo 结束前发布</td></tr><tr><td>generateBefore</td><td>在静态文件生成前发布</td></tr><tr><td>generateAfter</td><td>在静态文件生成后发布</td></tr><tr><td>new</td><td>在文章文件建立后发布</td></tr></tbody></table><p>于是我们就可以通过监听 <code>Hexo</code> 的 <code>deployAfter</code> 事件，待上传完成之后自动运行 <code>Git</code> 备份命令，从而达到自动备份的目的。<br><a id="more"></a></p><h3 id="三-实现"><a href="#三-实现" class="headerlink" title="三.实现"></a>三.实现</h3><h4 id="1-将Hexo目录加入Git仓库"><a href="#1-将Hexo目录加入Git仓库" class="headerlink" title="1.将Hexo目录加入Git仓库"></a>1.将<code>Hexo</code>目录加入Git仓库</h4><p>在<code>Github</code>下创建一个新的 <code>repository</code>，取名为<code>HEXO</code>。进入本地的<code>Hexo</code>文件夹，执行以下命令创建仓库:</p><pre class=" language-shell"><code class="language-shell">$ git init</code></pre><p>设置远程仓库地址，并更新:</p><pre class=" language-shell"><code class="language-shell">$ git remote add origin git@github.com:XXX/XXX.git$ git pull origin master</code></pre><p>修改 <code>.gitignore</code>文件（如果没有请手动创建一个），在里面加入<code>*.log</code> 和 <code>public/</code> 以及<code>.deploy*/</code>。因为每次执行<code>hexo generate</code>命令时，上述目录都会被重写更新。因此忽略这两个目录下的文件更新，加快 <code>push</code>速度。</p><p>执行命令以下命令，完成 <code>Hexo</code>源码在本地的提交:</p><pre class=" language-shell"><code class="language-shell">$ git add .$ git commit -m "添加hexo源码文件作为备份"</code></pre><p>执行以下命令，将本地的仓库文件推送到 Github</p><pre class=" language-shell"><code class="language-shell">$ git push origin master</code></pre><h4 id="2-安装shelljs模块"><a href="#2-安装shelljs模块" class="headerlink" title="2.安装shelljs模块"></a>2.安装shelljs模块</h4><p>要实现这个自动备份功能，需要依赖 <code>Node.js</code>的一个 <code>shelljs</code> 模块,该模块重新包装了<code>child_process</code>,调用系统命令更加的方便。该模块需要安装后使用。</p><p>在命令中键入以下命令，完成shelljs模块的安装：</p><pre class=" language-shell"><code class="language-shell">$ npm install --save shelljs</code></pre><h4 id="3-编写自动备份脚本"><a href="#3-编写自动备份脚本" class="headerlink" title="3.编写自动备份脚本"></a>3.编写自动备份脚本</h4><p>待到模块安装完成，在Hexo根目录的scripts文件夹下新建一个js文件，文件名随意取。</p><blockquote><p>ps: 如果没有scripts目录，请新建一个。</p></blockquote><p>然后在脚本中，写入以下内容：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'shelljs/global'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">{</span>    hexo<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'deployAfter'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//当deploy完成后执行备份</span>        <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"产生了一个错误&lt;(￣3￣)> !，错误详情为："</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">which</span><span class="token punctuation">(</span><span class="token string">'git'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">echo</span><span class="token punctuation">(</span><span class="token string">'Sorry, this script requires git'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token function">echo</span><span class="token punctuation">(</span><span class="token string">"======================Auto Backup Begin==========================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">cd</span><span class="token punctuation">(</span><span class="token string">'D:/hexo'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//此处修改为Hexo根目录路径</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">'git add --all'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>code <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">echo</span><span class="token punctuation">(</span><span class="token string">'Error: Git add failed'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">'git commit -am "Form auto backup script\'s commit"'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>code <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">echo</span><span class="token punctuation">(</span><span class="token string">'Error: Git commit failed'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">'git push origin master'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>code <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">echo</span><span class="token punctuation">(</span><span class="token string">'Error: Git push failed'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">echo</span><span class="token punctuation">(</span><span class="token string">"==================Auto Backup Complete============================"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>其中，需要修改第17行的 <code>D:\hexo</code> 路径为 <code>Hexo</code> 的根目录路径。（脚本中的路径为博主的 <code>Hexo</code> 路径）</p><p>如果你的 <code>Git</code> 远程仓库名称不为 <code>origin</code> 的话，还需要修改第28行执行的 <code>push</code> 命令，修改成自己的远程仓库名和相应的分支名。</p><p>保存脚本并退出，然后执行 <code>hexo deploy</code> 命令，将会得到类似以下结果:</p><pre class=" language-shell"><code class="language-shell">INFO  Deploying: gitINFO  Clearing .deploy_git folder...INFO  Copying files from public folder...INFO  Copying files from extend dirs...[master ca549c6] Site updated: 2017-12-19 13:34:01 61 files changed, 75 insertions(+), 75 deletions(-) rewrite archives/2016/page/2/index.html (64%) rewrite archives/2017/page/4/index.html (68%) rewrite archives/page/4/index.html (68%) rewrite archives/page/8/index.html (64%) rewrite page/4/index.html (78%) rewrite page/8/index.html (74%)Branch 'master' set up to track remote branch 'master' from 'https://github.com/IDeepspace/IDeepspace.github.io.git'.To https://github.com/IDeepspace/IDeepspace.github.io.git   c9c91a4..ca549c6  HEAD -> masterOn branch masternothing to commit, working tree cleanBranch 'master' set up to track remote branch 'master' from 'https://git.coding.net/IDeepspace/IDeepspace.coding.me.git'.To https://git.coding.net/IDeepspace/IDeepspace.coding.me.git   c9c91a4..ca549c6  HEAD -> masterINFO  Deploy done: git======================Auto Backup Begin===========================cd: no such file or directory: E:HEXO[master 5244810] Form auto backup script's commit 1 file changed, 6 insertions(+), 6 deletions(-) rename scripts/{index.js.bak => index.js} (70%)To https://github.com/IDeepspace/HEXO-BLOG.git   e6b6921..5244810  master -> master==================Auto Backup Complete============================</code></pre><p>这样子，每次更新博文并 <code>deploy</code> 到服务器上之后，备份就自动启动并完成备份啦 !</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
